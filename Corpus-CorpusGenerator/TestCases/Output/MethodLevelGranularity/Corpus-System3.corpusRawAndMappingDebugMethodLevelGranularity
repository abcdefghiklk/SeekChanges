Preprocessing file:	TestCases\Input\System3\inputFile1_System3.java
org.argouml.uml.ui.model_management.PropPanelPackage.PropPanelPackage	0	
/**	     * Construct a default property panel for UML Package elements.	     */	    public PropPanelPackage() {	        this("Package", lookupIcon("Package"),	                ConfigLoader.getTabPropsOrientation());	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.PropPanelPackage	3	String	ImageIcon	Orientation	
/**	     * Construct a property panel for UML Packages with the given parameters.	     * 	     * @param title the title for this panel	     * @param orientation the orientation	     * @param icon the icon to show next to the title	     */	    public PropPanelPackage(String title, ImageIcon icon,	            Orientation orientation) {	        super(title, icon, orientation);	        placeElements();	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.placeElements	0	
/**	     * Via this method, the GUI elements are added to the proppanel. Subclasses	     * should override to place the elements the way they want.	     */	    protected void placeElements() {	        addField(Translator.localize("label.name"),	                getNameTextField());	        addField(Translator.localize("label.namespace"),	                getNamespaceSelector());		        add(getNamespaceVisibilityPanel());		        add(getModifiersPanel());	        	        addSeparator();	        	        addField(Translator.localize("label.generalizations"),	                getGeneralizationScroll());	        addField(Translator.localize("label.specializations"),	                getSpecializationScroll());	        	        addSeparator();	        	        addField(Translator.localize("label.owned-elements"),	                getOwnedElementsScroll());	        addField(Translator.localize("label.imported-elements"),	                getImportedElementsScroll());		        /* TODO: Replace the previous 2 lines by this: 	         * (Issue 1942) */	        	//        JList importList =	//            new UMLMutableLinkedList(new UMLClassifierPackageImportsListModel(),	//                new ActionAddPackageImport(),	//                null,	//                new ActionRemovePackageImport(),	//                true);	//        addField(Translator.localize("label.imported-elements"),	//                new JScrollPane(importList));		        addAction(new ActionNavigateNamespace());	        addAction(new ActionAddPackage());	        addAction(new ActionAddDataType());	        addAction(new ActionAddEnumeration());	        addAction(new ActionNewStereotype());	        addAction(new ActionNewTagDefinition());	        addAction(new ActionDeleteSingleModelElement());	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.getModifiersPanel	0	
/**	     * Returns the Modifiers panel.	     * 	     * @return a panel with modifiers	     */	    public JPanel getModifiersPanel() {	        if (modifiersPanel == null) {	            modifiersPanel = createBorderPanel(Translator.localize(	                "label.modifiers"));	            modifiersPanel.add(	                    new UMLGeneralizableElementAbstractCheckBox());	            modifiersPanel.add(	                    new UMLGeneralizableElementLeafCheckBox());	            modifiersPanel.add(	                    new UMLGeneralizableElementRootCheckBox());	        }	        return modifiersPanel;	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.getGeneralizationScroll	0	
/**	     * Returns the generalizationScroll.	     * @return JScrollPane	     */	    public JScrollPane getGeneralizationScroll() {	        if (generalizationScroll == null) {	            JList list = new UMLLinkedList(generalizationListModel);	            generalizationScroll = new JScrollPane(list);	        }	        return generalizationScroll;	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.getSpecializationScroll	0	
/**	     * Returns the specializationScroll.	     * @return JScrollPane	     */	    public JScrollPane getSpecializationScroll() {	        if (specializationScroll == null) {	            JList list = new UMLLinkedList(specializationListModel);	            specializationScroll = new JScrollPane(list);	        }	        return specializationScroll;	    }	

org.argouml.uml.ui.model_management.PropPanelPackage.getImportedElementsScroll	0	
/**	     * @return the scrollpane with imported modelelements	     */	    public JScrollPane getImportedElementsScroll() {	        if (importedElementsScroll == null) {	            importedElementsScroll = new ScrollList(importedElementListModel);	        }	        return importedElementsScroll;	    }	

org.argouml.uml.ui.model_management.UMLPackageImportedElementListModel.UMLPackageImportedElementListModel	0	
/**	     * Constructor for UMLPackageImportedElementListModel.	     */	    public UMLPackageImportedElementListModel() {	        super("importedElement");	    }	

org.argouml.uml.ui.model_management.UMLPackageImportedElementListModel.buildModelList	0	
/**	     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()	     */	    protected void buildModelList() {	        if (getTarget() != null) {	            setAllElements(Model.getFacade().getImportedElements(getTarget()));	        }	    }	

org.argouml.uml.ui.model_management.UMLPackageImportedElementListModel.isValidElement	1	Object	
/**	     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)	     */	    protected boolean isValidElement(Object element) {	        return Model.getFacade().getImportedElements(getTarget())	            .contains(element);	    }	

org.argouml.uml.ui.model_management.UMLClassifierPackageImportsListModel.UMLClassifierPackageImportsListModel	0	
/**	     * Constructor for UMLClassifierRoleBaseListModel.	     */	    public UMLClassifierPackageImportsListModel() {	        super("importedElement");	    }	

org.argouml.uml.ui.model_management.UMLClassifierPackageImportsListModel.buildModelList	0	
/**	     * @see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()	     */	    protected void buildModelList() {	        setAllElements(Model.getFacade().getImportedElements(getTarget()));	    }	

org.argouml.uml.ui.model_management.UMLClassifierPackageImportsListModel.isValidElement	1	Object	
/**	     * @see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)	     */	    protected boolean isValidElement(Object elem) {	        return Model.getFacade().isAModelElement(elem)	            && Model.getFacade().getImportedElements(	                    getTarget()).contains(elem);	    }	

org.argouml.uml.ui.model_management.ActionAddPackageImport.ActionAddPackageImport	0	
/**	     * Constructor for ActionAddPackageImport.	     */	    ActionAddPackageImport() {	        super();	    }	

org.argouml.uml.ui.model_management.ActionAddPackageImport.getChoices	0	
/**	     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()	     */	    protected Vector getChoices() {	        Vector vec = new Vector();	        /* TODO: implement next function in the model subsystem for 	         * issue 1942: */	//        vec.addAll(Model.getModelManagementHelper()	//                .getAllPossibleImports(getTarget()));	        return vec;	    }	

org.argouml.uml.ui.model_management.ActionAddPackageImport.getSelected	0	
/**	     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()	     */	    protected Vector getSelected() {	        Vector vec = new Vector();	        vec.addAll(Model.getFacade().getImportedElements(getTarget()));	        return vec;	    }	

org.argouml.uml.ui.model_management.ActionAddPackageImport.getDialogTitle	0	
/**	     * @see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()	     */	    protected String getDialogTitle() {	        return Translator.localize("dialog.title.add-imported-elements");	    }	

org.argouml.uml.ui.model_management.ActionAddPackageImport.doIt	1	Vector	
/**	     * @see	     * org.argouml.uml.ui.AbstractActionAddModelElement#doIt(java.util.Vector)	     */	    protected void doIt(Vector selected) {	        Object pack = getTarget();	        Model.getModelManagementHelper().setImportedElements(pack, selected);	    }	

org.argouml.uml.ui.model_management.ActionRemovePackageImport.ActionRemovePackageImport	0	
/**	     * Constructor for ActionRemovePackageImport.	     */	    ActionRemovePackageImport() {	        super(Translator.localize("menu.popup.remove"));	    }	

org.argouml.uml.ui.model_management.ActionRemovePackageImport.actionPerformed	1	ActionEvent	
/**	     * @see	     * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)	     */	    public void actionPerformed(ActionEvent e) {	        super.actionPerformed(e);	        Model.getModelManagementHelper()	            .removeImportedElement(getTarget(), getObjectToRemove());	    }	

