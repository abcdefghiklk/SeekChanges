<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2011-05-03 01:24:04" id="1998" opendate="2011-04-18 09:34:34"><buginformation><summary>[PIG-1998] Allow macro to return void - ASF JIRA</summary><description>Pig macro is allowed to not have output alias. But this property isn't clear from macro definition and macro invocation (macro inline). Here we propose to make it clear: 1. If a macro doesn't output any alias, it must specify void as return value. For example:   &#13;
define mymacro(...) returns void {&#13;
   ... ...&#13;
};&#13;
 2. If a macro doesn't output any alias, it must be invoked without return value. For example, to invoke above macro, just specify: &#13;
mymacro(...);&#13;
 3. Any non-void return alias in the macro definition must exist in the macro body and be prefixed with $. For example:   &#13;
define mymacro(...) returns B {&#13;
   ... ...&#13;
   $B = filter ...;&#13;
};</description></buginformation><fixedFiles><file>src.org.apache.pig.parser.QueryParserDriver.java</file><file>test.org.apache.pig.test.TestMacroExpansion.java</file><file>src.org.apache.pig.parser.PigMacro.java</file></fixedFiles></bug><bug fixdate="2011-04-25 10:15:26" id="1981" opendate="2011-04-08 06:51:03"><buginformation><summary>[PIG-1981] LoadPushDown.pushProjection should pass alias in addition to position - ASF JIRA</summary><description>Currently pushProjection(RequiredFieldList requiredFieldList) requiredFieldList only contains position. It is better that we also provide alias whenever available.</description></buginformation><fixedFiles><file>src.org.apache.pig.newplan.logical.rules.ColumnPruneVisitor.java</file><file>test.org.apache.pig.test.TestPruneColumn.java</file></fixedFiles></bug><bug fixdate="2011-05-12 10:26:06" id="1938" opendate="2011-03-28 01:02:13"><buginformation><summary>[PIG-1938] support project-range as udf argument - ASF JIRA</summary><description>With changes in PIG-1693, project-range ('..') is supported in all use cases where '*' (project-star) is supported, except as udf argument. To be consistent with usage of project-star, project-range should be supported as udf argument as well.</description></buginformation><fixedFiles><file>src.org.apache.pig.newplan.logical.visitor.ProjStarInUdfExpander.java</file><file>src.org.apache.pig.newplan.logical.visitor.ProjectStarExpander.java</file><file>test.org.apache.pig.test.TestProjectRange.java</file><file>test.org.apache.pig.test.TestProjectStarRangeInUdf.java</file><file>test.org.apache.pig.test.TestNewPlanFilterAboveForeach.java</file><file>src.org.apache.pig.newplan.logical.optimizer.ProjectionPatcher.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.java</file><file>src.org.apache.pig.newplan.logical.visitor.ProjectStarExpanderUtil.java</file><file>src.org.apache.pig.builtin.TOBAG.java</file><file>test.org.apache.pig.test.Util.java</file></fixedFiles></bug><bug fixdate="2011-03-11 08:09:40" id="1874" opendate="2011-03-01 09:38:54"><buginformation><summary>[PIG-1874] Make PigServer work in a multithreading environment - ASF JIRA</summary><description>This means that PigServers should work if one creates separate PigServer instances for each thread (PigServers are not synchronized).</description></buginformation><fixedFiles><file>src.org.apache.pig.scripting.BoundScript.java</file><file>src.org.apache.pig.impl.util.UDFContext.java</file><file>src.org.apache.pig.PigServer.java</file><file>test.org.apache.pig.test.utils.UDFContextTestEvalFunc3.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.POStatus.java</file><file>src.org.apache.pig.impl.PigContext.java</file><file>test.org.apache.pig.test.TestScriptLanguage.java</file></fixedFiles></bug><bug fixdate="2011-03-01 10:55:49" id="1829" opendate="2011-01-27 08:48:47"><buginformation><summary>[PIG-1829] "0" value seen in PigStat's map/reduce runtime, even when the job is successful - ASF JIRA</summary><description>Pig runtime calls JobClient.getMapTaskReports(jobId) and JobClient.getReduceTaskReports(jobId) to get statistics about numbers of maps/reducers, as well as max/min/avg time of these tasks. But from time to time, these calls return empty lists. When that happens pig is reports 0 values for the stats. The jobtracker keeps the stats information only for a limited duration based on the configuration parameters mapred.jobtracker.completeuserjobs.maximum and mapred.job.tracker.retiredjobs.cache.size. Since pig collects the stats after jobs have finished running, it is possible that the stats for the initial jobs are no longer available. To have better chances of getting the stats, it should be collected as soon as the job is over.</description></buginformation><fixedFiles><file>src.org.apache.pig.tools.pigstats.SimplePigStats.java</file><file>src.org.apache.pig.tools.pigstats.PigStatsUtil.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.java</file></fixedFiles></bug><bug fixdate="2011-01-24 01:33:07" id="1809" opendate="2011-01-18 03:27:00"><buginformation><summary>[PIG-1809] TOMAP builtin function - ASF JIRA</summary><description>While doing some testing, I needed a function that generated a map. I created TOMAP that is similar to TOTUPLE and TOBAG and want to contribute it to builtin in case it is useful to others</description></buginformation><fixedFiles><file>src.org.apache.pig.builtin.TOMAP.java</file><file>test.org.apache.pig.test.TestBuiltin.java</file></fixedFiles></bug><bug fixdate="2011-01-19 06:29:09" id="1806" opendate="2011-01-14 08:33:30"><buginformation><summary>[PIG-1806] Modify embedded Pig API for usability - ASF JIRA</summary><description>bind methods. Currently, to explicitly bind variables to parameters, the variable type must be string: &#13;
public BoundScript bind(Map&lt;String, String&gt; vars) throws IOException {...}&#13;
 User needs explicitly convert variables to strings before passing them in. We propose to change the method signature so user does not need to do the conversion: &#13;
public BoundScript bind(Map&lt;String, Object&gt; vars) throws IOException {...}&#13;
 Internally Pig uses toString() method to convert variables to strings. fs method. Current Pig.fs(...) method doesn't return any value. Since this method just turns around to call FsShell.run() which has a return code, we should pass this return code to the user; &#13;
public static int fs(String cmd) throws IOException {...}</description></buginformation><fixedFiles><file>src.org.apache.pig.scripting.Pig.java</file><file>src.org.apache.pig.scripting.jython.JythonScriptEngine.java</file><file>test.org.apache.pig.test.TestScriptLanguage.java</file><file>src.org.apache.pig.scripting.ScriptEngine.java</file></fixedFiles></bug><bug fixdate="2011-05-07 01:16:30" id="1775" opendate="2010-12-17 06:18:03"><buginformation><summary>[PIG-1775] Removal of old logical plan - ASF JIRA</summary><description>The new logical plan will only be used and the old logical plan will be removed once the new one is stable enough. It is scheduled for the 0.9 release.</description></buginformation><fixedFiles><file>test.org.apache.pig.test.TestTypeCheckingValidatorNewLP.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.TypeCheckingValidator.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.LogicalTransformer.java</file><file>test.org.apache.pig.test.TestSecondarySort.java</file><file>src.org.apache.pig.impl.util.Utils.java</file><file>src.org.apache.pig.newplan.logical.relational.LogicalSchema.java</file><file>test.org.apache.pig.test.TestPartitionFilterOptimization.java</file><file>test.org.apache.pig.test.TestMRCompiler.java</file><file>test.org.apache.pig.test.TestForEachNestedPlan.java</file><file>src.org.apache.pig.scripting.js.JsFunction.java</file><file>test.org.apache.pig.test.TestProjectRange.java</file><file>src.org.apache.pig.impl.logicalLayer.LOCross.java</file><file>test.org.apache.pig.test.TestCombiner.java</file><file>src.org.apache.pig.impl.logicalLayer.LOEqual.java</file><file>src.org.apache.pig.impl.logicalLayer.LOCast.java</file><file>src.org.apache.pig.impl.logicalLayer.LORegexp.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.InputOutputFileValidator.java</file><file>src.org.apache.pig.impl.logicalLayer.LogicalPlanCloner.java</file><file>test.org.apache.pig.test.TestGroupConstParallel.java</file><file>test.org.apache.pig.test.Util.java</file><file>src.org.apache.pig.scripting.jython.JythonFunction.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.UnionOnSchemaSetException.java</file><file>test.org.apache.pig.test.TestMergeJoin.java</file><file>test.org.apache.pig.test.TestPushUpFilter.java</file><file>test.org.apache.pig.test.TestMultiQuery.java</file><file>src.org.apache.pig.impl.logicalLayer.LOProject.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.SchemaRemover.java</file><file>test.org.apache.pig.test.TestCollectedGroup.java</file><file>test.org.apache.pig.test.TestNewPlanPushDownForeachFlatten.java</file><file>test.org.apache.pig.test.TestPushDownForeachFlatten.java</file><file>src.org.apache.pig.impl.logicalLayer.LOAnd.java</file><file>test.org.apache.pig.test.TestOperatorPlan.java</file><file>test.org.apache.pig.test.TestAccumulator.java</file><file>test.org.apache.pig.test.TestRelationToExprProject.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.PartitionFilterOptimizer.java</file><file>test.org.apache.pig.test.TestSchemaParser.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.SchemaAliasVisitor.java</file><file>test.org.apache.pig.test.TestImplicitSplit.java</file><file>test.org.apache.pig.test.TestOptimizeLimit.java</file><file>test.org.apache.pig.test.TestPigServer.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.LogicalPlanValidationExecutor.java</file><file>src.org.apache.pig.impl.logicalLayer.LOGenerate.java</file><file>test.org.apache.pig.test.TestTypeCheckingValidator.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.ImplicitSplitInserter.java</file><file>test.org.apache.pig.test.TestPigScriptParser.java</file><file>test.org.apache.pig.test.TestStoreInstances.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.InputOutputFileVisitor.java</file><file>src.org.apache.pig.impl.logicalLayer.LOJoin.java</file><file>test.org.apache.pig.test.TestRelevantFields.java</file><file>src.org.apache.pig.impl.logicalLayer.LOForEach.java</file><file>test.org.apache.pig.test.TestFilterSimplification.java</file><file>test.org.apache.pig.test.TestProjectionMap.java</file><file>src.org.apache.pig.impl.logicalLayer.LOOr.java</file><file>src.org.apache.pig.impl.logicalLayer.ExpressionOperator.java</file><file>test.org.apache.pig.test.utils.dotGraph.DotGraphVisitor.java</file><file>test.org.apache.pig.test.TestSampleOptimizer.java</file><file>test.org.apache.pig.test.TestInputOutputFileValidator.java</file><file>test.org.apache.pig.test.TestNewPlanFilterRule.java</file><file>test.org.apache.pig.test.TestRequiredFields.java</file><file>test.org.apache.pig.test.TestLogicalOptimizer.java</file><file>src.org.apache.pig.impl.logicalLayer.RelationalOperator.java</file><file>test.org.apache.pig.test.TestTypeCheckingValidatorNoSchema.java</file><file>test.org.apache.pig.test.TestStore.java</file><file>test.org.apache.pig.test.TestPartitionFilterPushDown.java</file><file>src.org.apache.pig.impl.logicalLayer.LOUserFunc.java</file><file>src.org.apache.pig.tools.grunt.Grunt.java</file><file>test.org.apache.pig.test.TestScriptUDF.java</file><file>src.org.apache.pig.parser.QueryParserDriver.java</file><file>test.org.apache.pig.test.OpLimitOptimizerPrinter.java</file><file>test.org.apache.pig.test.TypeGraphPrinter.java</file><file>src.org.apache.pig.impl.logicalLayer.LOSplitOutput.java</file><file>src.org.apache.pig.impl.logicalLayer.LOLesserThan.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.PigStorageSchema.java</file><file>test.org.apache.pig.test.TestForEachStar.java</file><file>test.org.apache.pig.test.TestProjectStarExpander.java</file><file>src.org.apache.pig.impl.logicalLayer.LODefine.java</file><file>src.org.apache.pig.impl.logicalLayer.LOStream.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.SchemaCalculator.java</file><file>src.org.apache.pig.impl.logicalLayer.LOCogroup.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.TypeCastInserter.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.PruneColumns.java</file><file>test.org.apache.pig.test.TestNewPlanImplicitSplit.java</file><file>test.org.apache.pig.test.TestMergeJoinOuter.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor.java</file><file>test.org.apache.pig.test.TestNewPlanFilterAboveForeach.java</file><file>test.org.apache.pig.test.TestRewire.java</file><file>src.org.apache.pig.scripting.jython.JythonScriptEngine.java</file><file>test.org.apache.pig.test.TestLogToPhyCompiler.java</file><file>test.org.apache.pig.test.utils.planComparer.LogicalPlanComparer.java</file><file>src.org.apache.pig.impl.logicalLayer.LOPrinter.java</file><file>src.org.apache.pig.impl.logicalLayer.ProjectStarTranslator.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.SchemaAliasValidator.java</file><file>src.org.apache.pig.impl.logicalLayer.ProjectionMapRemover.java</file><file>src.org.apache.pig.impl.logicalLayer.PlanSetter.java</file><file>src.org.apache.pig.impl.logicalLayer.validators.TypeCheckingVisitor.java</file><file>test.org.apache.pig.test.TestLogicalPlanBuilder.java</file><file>test.org.apache.pig.test.TestJobSubmission.java</file><file>test.org.apache.pig.test.TestConversions.java</file><file>src.org.apache.pig.impl.logicalLayer.LOLimit.java</file><file>src.org.apache.pig.impl.logicalLayer.LOSplit.java</file><file>test.org.apache.pig.test.TestUnionOnSchema.java</file><file>test.org.apache.pig.test.TestLoad.java</file><file>src.org.apache.pig.impl.logicalLayer.LONotEqual.java</file><file>src.org.apache.pig.impl.logicalLayer.LOIsNull.java</file><file>test.org.apache.pig.test.TestTypedMap.java</file><file>test.org.apache.pig.test.TestMapSideCogroup.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.LogicalOptimizer.java</file><file>src.org.apache.pig.impl.logicalLayer.LogicalOperator.java</file><file>test.org.apache.pig.test.TestPOCast.java</file><file>test.org.apache.pig.test.TestJoin.java</file><file>test.org.apache.pig.test.TestSchema.java</file><file>test.org.apache.pig.test.TestNewPlanPruneMapKeys.java</file><file>src.org.apache.pig.impl.logicalLayer.schema.Schema.java</file><file>src.org.apache.pig.newplan.logical.Util.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.PushDownForeachFlatten.java</file><file>src.org.apache.pig.impl.logicalLayer.LOAdd.java</file><file>src.org.apache.pig.impl.logicalLayer.LOStore.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.OpLimitOptimizer.java</file><file>src.org.apache.pig.impl.logicalLayer.LOBinCond.java</file></fixedFiles></bug><bug fixdate="2011-01-25 05:50:01" id="1769" opendate="2010-12-15 05:36:29"><buginformation><summary>[PIG-1769] Consistency for HBaseStorage - ASF JIRA</summary><description>In our load statement we are allowed to prefix the table name with "hbase://" but when we call store it throws an exception unless we remove hbase:// from the table name: this works: store raw into 'piggytest2' USING org.apache.pig.backend.hadoop.hbase.HBaseStorage('content2:field1 anchor2:field1a anchor2:field2a'); this won't store raw into 'hbase://piggytest2' Exception: Caused by: java.lang.IllegalArgumentException: java.net.URISyntaxException: Relative path in absolute URI: hbase://piggytest2_logs Would be nice to be able to prefix the store with hbase:// so it's consistent with the load syntax</description></buginformation><fixedFiles><file>src.org.apache.pig.backend.hadoop.hbase.HBaseStorage.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.JobControlCompiler.java</file><file>test.org.apache.pig.test.TestHBaseStorage.java</file></fixedFiles></bug><bug fixdate="2010-12-09 06:39:33" id="1757" opendate="2010-12-07 11:04:48"><buginformation><summary>[PIG-1757] After split combination, the number of maps may vary slightly - ASF JIRA</summary><description>The split combination, introduced in 0.8 by PIG-1518, may see small variations in number of maps. For instance, PigMix2's L4 query experiences a variation of 901 or 902 maps in a test cluster. The reason is that the BlockLocation's getHosts method, used in FileInputFormat's spli generation, returns a list of hosts that hold the block. However the ordering of the list is not deterministic. Pig's split combination is not immune to such a random ordering since the combination decision is based upon the hosts that hold as many data local to a map as possible, and there is no specific tie-breaking rule to force a particular ordering. In some benchmarking or performance baselining tests, these variations, however small they are, might not be desirable. One solution is to sort the host lists from the component splits so as to get consistent number of maps. I suspect that other split combination techniques that make use of the data host info to maximize the data locality in each map, like CombineFileInputFormat, might have had the similar variations of number of maps.</description></buginformation><fixedFiles><file>src.org.apache.pig.backend.hadoop.executionengine.util.MapRedUtil.java</file></fixedFiles></bug><bug fixdate="2010-12-23 02:18:59" id="1755" opendate="2010-12-06 02:35:19"><buginformation><summary>[PIG-1755] Clean up duplicated code in Physical Operators - ASF JIRA</summary><description>A lot of the getNext() implementations in PhysicalOperators is copy-pasted, with only the method signatures and casts changing. Shorter code leads to less bugs and is easier to read.</description></buginformation><fixedFiles><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POForEach.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LTOrEqualToExpr.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POLocalRearrange.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ExpressionOperator.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Mod.java</file><file>src.org.apache.pig.data.DataType.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Multiply.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.NotEqualToExpr.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POUserFunc.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCollectedGroup.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POSort.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.LessThanExpr.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.EqualToExpr.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Subtract.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPartitionRearrange.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POIsNull.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.POBinCond.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPreCombinerLocalRearrange.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GTOrEqualToExpr.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.ConstantExpression.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Divide.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.PhysicalOperator.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.Add.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.expressionOperators.GreaterThanExpr.java</file></fixedFiles></bug><bug fixdate="2011-01-21 09:58:39" id="1749" opendate="2010-11-24 08:30:49"><buginformation><summary>[PIG-1749] Update Pig parser so that function arguments can contain newline characters - ASF JIRA</summary><description>We want to add this feature so that users can put long function argument strings in multiple lines. PIG-1748 depends on this.</description></buginformation><fixedFiles><file>test.org.apache.pig.parser.TestQueryParser.java</file><file>test.org.apache.pig.test.TestParamSubPreproc.java</file></fixedFiles></bug><bug fixdate="2011-01-31 09:19:32" id="1748" opendate="2010-11-24 08:27:21"><buginformation><summary>[PIG-1748] Add load/store function AvroStorage for avro data - ASF JIRA</summary><description>We want to use Pig to process arbitrary Avro data and store results as Avro files. AvroStorage() extends two PigFuncs: LoadFunc and StoreFunc. Due to discrepancies of Avro and Pig data models, AvroStorage has: 1. Limited support for "record": we do not support recursively defined record because the number of fields in such records is data dependent. 2. Limited support for "union": we only accept nullable union like ["null", "some-type"]. For simplicity, we also make the following assumptions: If the input directory is a leaf directory, then we assume Avro data files in it have the same schema; If the input directory contains sub-directories, then we assume Avro data files in all sub-directories have the same schema. AvroStorage takes no input parameters when used as a LoadFunc (except for "debug [debug-level]"). Users can provide parameters to AvroStorage when used as a StoreFunc. If they don't, Avro schema of output data is derived from its Pig schema. Detailed documentation can be found in http://linkedin.jira.com/wiki/display/HTOOLS/AvroStorage+-+Pig+support+for+Avro+data</description></buginformation><fixedFiles><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.ASFsInput.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.AvroSchema2Pig.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.AvroStorageUtils.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.AvroSchemaManager.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroDatumReader.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroRecordWriter.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroInputFormat.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigSchema2Avro.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroOutputFormat.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.ASCommons.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroRecordReader.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.PigAvroDatumWriter.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.ASLog.java</file><file>contrib.piggybank.java.src.main.java.org.apache.pig.piggybank.storage.avro.AvroStorage.java</file></fixedFiles></bug><bug fixdate="2010-12-01 12:31:33" id="1747" opendate="2010-11-24 07:02:38"><buginformation><summary>[PIG-1747] pattern match classes for matching patterns in physical plan - ASF JIRA</summary><description>Map-reduce plan optimization phase of query planning in pig uses several visitors. Each of these visitors use custom code to identify patterns in physical plan to determine if the optimization should be applied. Having pattern match utility classes that works with physical plan will make writing new visitors easier.</description></buginformation><fixedFiles><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternPlan.java</file><file>test.org.apache.pig.test.TestPhyPatternMatch.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.plans.PatternNode.java</file></fixedFiles></bug><bug fixdate="2011-02-03 08:03:28" id="1717" opendate="2010-11-11 03:41:37"><buginformation><summary>[PIG-1717] pig needs to call setPartitionFilter if schema is null but getPartitionKeys is not - ASF JIRA</summary><description>I'm writing a loader that works with hive style partitioning e.g. /logs/type1/daydate=2010-11-01 The loader does not know the schema upfront and this is something that the user adds in the script using the AS clause. The problem is that this user defined schema is not available to the loader, so the loader cannot return any schema, the Loader does know what the partition keys are and pig needs in some way to know about these partition keys. Currently if the schema is null pig never calls the LoadMetaData:getPartitionKeys method or the setPartitionFilter method.</description></buginformation><fixedFiles><file>src.org.apache.pig.impl.logicalLayer.LOLoad.java</file><file>test.org.apache.pig.test.TestLOLoadDeterminedSchema.java</file><file>src.org.apache.pig.impl.util.Utils.java</file><file>test.org.apache.pig.test.utils.ScriptSchemaTestLoader.java</file><file>src.org.apache.pig.newplan.logical.relational.LOLoad.java</file></fixedFiles></bug><bug fixdate="2010-11-03 08:59:11" id="1707" opendate="2010-11-02 07:05:07"><buginformation><summary>[PIG-1707] Allow pig build to pull from alternate maven repo to enable building against newer hadoop versions - ASF JIRA</summary><description>Currently pig build only pulls jar from http://repo1.maven.org/maven2/ for the dependencies. THis restricts the build to only released hadoop versions (and other dependencies). It would be good if pig build is configurable to use any maven repo url (with default being maven.org repo).</description></buginformation><fixedFiles><file>src.org.apache.pig.Main.java</file></fixedFiles></bug><bug fixdate="2010-10-29 11:32:21" id="1696" opendate="2010-10-23 09:26:51"><buginformation><summary>[PIG-1696] Performance: Use System.arraycopy() instead of manually copying the bytes while reading the data - ASF JIRA</summary><description>System.arraycopy() is said to be faster as compared to iterating over bytes and copying them over as it is implemented natively in JVM. Since every single byte read through PigStorage() will go through this code-path, this will have a performance impact.</description></buginformation><fixedFiles><file>src.org.apache.pig.data.DataByteArray.java</file></fixedFiles></bug><bug fixdate="2011-01-08 09:14:44" id="1675" opendate="2010-10-11 02:56:03"><buginformation><summary>[PIG-1675] Suggest to allow PigServer can register pig script from InputStream - ASF JIRA</summary><description>Currently, Pig only allow users to register script from file. Although it satisfy most people's requirements, sometimes people hope to build pig script dynamically using code, then they need to create temp file for the script they build. So here I suggest to allow PigServer be able to register pig script from InputStream. InputStream is a more general type than File, pig script can been from file (FileInputStream) or from in-memory (ByteArrayInputStream) even it can been from remote machines (SocketInputStream) Here's a blog which explains why using InputStream is better than using File in interface http://java.dzone.com/articles/using-files-your-interfaces-0 So I suggest to add the following 4 methods in PigServer: &#13;
public void registerScript(InputStream in) throws IOException&#13;
public void registerScript(InputStream in, Map&lt;String,String&gt; params) throws IOException&#13;
public void registerScript(InputStream in, List&lt;String&gt; paramsFiles) throws IOException&#13;
public void registerScript(InputStream in, Map&lt;String,String&gt; params,List&lt;String&gt; paramsFiles) throws IOException</description></buginformation><fixedFiles><file>src.org.apache.pig.PigServer.java</file><file>test.org.apache.pig.test.TestPigServer.java</file></fixedFiles></bug><bug fixdate="2011-03-18 12:34:20" id="1618" opendate="2010-09-17 04:55:42"><buginformation><summary>[PIG-1618] Switch to new parser generator technology - ASF JIRA</summary><description>There are many bugs in Pig related to the parser, particularly to bad error messages. After review of Java CC we feel these will be difficult to address using that tool. Also, the .jjt files used by JavaCC are hard to understand and maintain. ANTLR is being reviewed as the most likely choice to move to, but other parsers will be reviewed as well. This JIRA will act as an umbrella issue for other parser issues.</description></buginformation><fixedFiles><file>src.org.apache.pig.newplan.visitor.SortInfoSetter.java</file><file>src.org.apache.pig.newplan.logical.relational.LOUnion.java</file><file>test.org.apache.pig.test.TestTypeCheckingValidatorNewLP.java</file><file>src.org.apache.pig.parser.NonProjectExpressionException.java</file><file>test.org.apache.pig.test.TestNewPlanOperatorPlan.java</file><file>test.org.apache.pig.test.TestNewPlanLogicalOptimizer.java</file><file>src.org.apache.pig.newplan.logical.relational.LogicalSchema.java</file><file>test.org.apache.pig.test.TestMRCompiler.java</file><file>src.org.apache.pig.newplan.logical.expression.ProjectExpression.java</file><file>src.org.apache.pig.newplan.logical.relational.LOInnerLoad.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MapReduceLauncher.java</file><file>test.org.apache.pig.test.TestEvalPipeline2.java</file><file>src.org.apache.pig.tools.pigstats.PigStats.java</file><file>test.org.apache.pig.parser.TestLogicalPlanGenerator.java</file><file>test.org.apache.pig.test.TestJoinSmoke.java</file><file>test.org.apache.pig.test.TestGrunt.java</file><file>test.org.apache.pig.parser.TestAstValidator.java</file><file>src.org.apache.pig.parser.QueryParserUtils.java</file><file>test.org.apache.pig.test.TestPigRunner.java</file><file>src.org.apache.pig.newplan.OperatorPlan.java</file><file>test.org.apache.pig.parser.TestQueryLexer.java</file><file>src.org.apache.pig.pen.AugmentBaseDataVisitor.java</file><file>test.org.apache.pig.test.TestMergeJoin.java</file><file>test.org.apache.pig.test.TestFRJoin.java</file><file>src.org.apache.pig.newplan.logical.visitor.ProjectStarExpander.java</file><file>test.org.apache.pig.parser.TestScalarVisitor.java</file><file>test.org.apache.pig.test.TestScalarAliases.java</file><file>src.org.apache.pig.newplan.logical.visitor.SortInfoSetter.java</file><file>test.org.apache.pig.test.TestMultiQuery.java</file><file>test.org.apache.pig.test.TestCollectedGroup.java</file><file>src.org.apache.pig.parser.ParserException.java</file><file>src.org.apache.pig.parser.InvalidPathException.java</file><file>test.org.apache.pig.test.TestBestFitCast.java</file><file>src.org.apache.pig.newplan.logical.expression.BinCondExpression.java</file><file>test.org.apache.pig.test.TestLogicalPlanMigrationVisitor.java</file><file>src.org.apache.pig.parser.InvalidCommandException.java</file><file>test.org.apache.pig.test.TestEvalPipeline.java</file><file>src.org.apache.pig.newplan.logical.visitor.LineageFindRelVisitor.java</file><file>src.org.apache.pig.tools.grunt.GruntParser.java</file><file>test.org.apache.pig.test.TestEvalPipelineLocal.java</file><file>src.org.apache.pig.parser.AntlrNoCaseStringStream.java</file><file>src.org.apache.pig.newplan.logical.visitor.ColumnAliasConversionVisitor.java</file><file>src.org.apache.pig.newplan.logical.optimizer.AllExpressionVisitor.java</file><file>src.org.apache.pig.parser.DuplicatedSchemaAliasException.java</file><file>test.org.apache.pig.test.utils.TypeCheckingTestUtil.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.PushUpFilter.java</file><file>src.org.apache.pig.newplan.logical.relational.LogToPhyTranslationVisitor.java</file><file>src.org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.java</file><file>test.org.apache.pig.test.TestPigServer.java</file><file>test.org.apache.pig.test.TestNewPlanListener.java</file><file>test.org.apache.pig.test.TestMultiQueryBasic.java</file><file>src.org.apache.pig.newplan.logical.expression.UserFuncExpression.java</file><file>src.org.apache.pig.newplan.logical.LogicalPlanMigrationVistor.java</file><file>src.org.apache.pig.newplan.logical.relational.LogicalRelationalOperator.java</file><file>src.org.apache.pig.newplan.logical.expression.ScalarExpression.java</file><file>src.org.apache.pig.impl.logicalLayer.LOJoin.java</file><file>src.org.apache.pig.newplan.logical.visitor.TypeCheckingRelVisitor.java</file><file>src.org.apache.pig.newplan.logical.visitor.UnionOnSchemaSetter.java</file><file>src.org.apache.pig.newplan.logical.relational.LOJoin.java</file><file>test.org.apache.pig.test.TestNewPlanFilterRule.java</file><file>src.org.apache.pig.newplan.logical.expression.DereferenceExpression.java</file><file>src.org.apache.pig.parser.PlanGenerationFailureException.java</file><file>src.org.apache.pig.newplan.logical.LogicalExpPlanMigrationVistor.java</file><file>test.org.apache.pig.parser.TestUnionOnSchemaSetter.java</file><file>src.org.apache.pig.parser.QueryParserDriver.java</file><file>src.org.apache.pig.parser.AntlrNoCaseFileStream.java</file><file>test.org.apache.pig.test.TestMacroExpansion.java</file><file>src.org.apache.pig.Main.java</file><file>test.org.apache.pig.test.TestProjectStarExpander.java</file><file>test.org.apache.pig.test.TestForEachStar.java</file><file>src.org.apache.pig.newplan.logical.expression.LogicalExpressionVisitor.java</file><file>src.org.apache.pig.impl.logicalLayer.LOCogroup.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.LogToPhyTranslationVisitor.java</file><file>src.org.apache.pig.pen.ExampleGenerator.java</file><file>src.org.apache.pig.parser.QueryParserStringStream.java</file><file>test.org.apache.pig.test.TestPinOptions.java</file><file>src.org.apache.pig.parser.QueryParserStreamUtil.java</file><file>test.org.apache.pig.parser.TestDefaultDataTypeInserter.java</file><file>test.org.apache.pig.test.TestLogToPhyCompiler.java</file><file>src.org.apache.pig.impl.PigContext.java</file><file>test.org.apache.pig.test.TestDataBagAccess.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POMergeJoin.java</file><file>src.org.apache.pig.parser.QueryParserFileStream.java</file><file>test.org.apache.pig.test.TestSkewedJoin.java</file><file>src.org.apache.pig.impl.util.MultiMap.java</file><file>src.org.apache.pig.newplan.logical.visitor.ScalarVisitor.java</file><file>src.org.apache.pig.newplan.logical.visitor.CastLineageSetter.java</file><file>test.org.apache.pig.parser.TestSchemaAliasVisitor.java</file><file>src.org.apache.pig.impl.logicalLayer.ProjectFixerUpper.java</file><file>src.org.apache.pig.newplan.logical.visitor.SchemaAliasVisitor.java</file><file>test.org.apache.pig.test.TestMultiQueryLocal.java</file><file>src.org.apache.pig.newplan.logical.relational.LOStore.java</file><file>test.org.apache.pig.parser.ParsingFailureException.java</file><file>src.org.apache.pig.newplan.logical.relational.LOSort.java</file><file>src.org.apache.pig.newplan.logical.relational.LOCogroup.java</file><file>src.org.apache.pig.impl.plan.OperatorPlan.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.HExecutionEngine.java</file><file>src.org.apache.pig.newplan.logical.rules.ImplicitSplitInserter.java</file><file>test.org.apache.pig.test.TestPigStats.java</file><file>src.org.apache.pig.newplan.logical.expression.ExpToPhyTranslationVisitor.java</file><file>src.org.apache.pig.tools.pigstats.PigStatsUtil.java</file><file>src.org.apache.pig.parser.InvalidScalarProjectionException.java</file><file>test.org.apache.pig.test.TestNullConstant.java</file><file>src.org.apache.pig.StandAloneParser.java</file><file>src.org.apache.pig.newplan.logical.expression.MapLookupExpression.java</file><file>src.org.apache.pig.SortInfoSetter.java</file><file>test.org.apache.pig.test.TestUnionOnSchema.java</file><file>src.org.apache.pig.tools.pigstats.SimplePigStats.java</file><file>test.org.apache.pig.parser.TreePrinter.java</file><file>src.org.apache.pig.PigServer.java</file><file>src.org.apache.pig.newplan.logical.expression.ConstantExpression.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.MRCompiler.java</file><file>test.org.apache.pig.parser.TestColumnAliasConversion.java</file><file>src.org.apache.pig.newplan.OperatorSubPlan.java</file><file>src.org.apache.pig.newplan.logical.rules.ColumnPruneHelper.java</file><file>test.org.apache.pig.test.TestPruneColumn.java</file><file>test.org.apache.pig.parser.ParserTestingUtils.java</file><file>src.org.apache.pig.parser.ParserValidationException.java</file><file>src.org.apache.pig.parser.FunctionType.java</file><file>test.org.apache.pig.test.TestJoin.java</file><file>test.org.apache.pig.test.TestMultiQueryCompiler.java</file><file>test.org.apache.pig.test.TestSchema.java</file><file>src.org.apache.pig.parser.StreamingCommandUtils.java</file><file>src.org.apache.pig.impl.logicalLayer.schema.Schema.java</file><file>src.org.apache.pig.newplan.logical.Util.java</file><file>src.org.apache.pig.impl.logicalLayer.optimizer.PushDownForeachFlatten.java</file><file>src.org.apache.pig.newplan.visitor.UnionOnSchemaSetter.java</file><file>src.org.apache.pig.parser.UndefinedAliasException.java</file><file>src.org.apache.pig.newplan.logical.rules.ConstExpEvaluator.java</file><file>src.org.apache.pig.parser.LogicalPlanBuilder.java</file><file>src.org.apache.pig.newplan.logical.relational.LogicalPlan.java</file><file>src.org.apache.pig.tools.pigstats.ScriptState.java</file><file>src.org.apache.pig.newplan.BaseOperatorPlan.java</file><file>src.org.apache.pig.newplan.logical.expression.LogicalExpressionPlan.java</file><file>test.org.apache.pig.parser.TestQueryParser.java</file><file>src.org.apache.pig.newplan.logical.relational.LOGenerate.java</file></fixedFiles></bug><bug fixdate="2011-04-19 01:29:49" id="1612" opendate="2010-09-14 08:59:41"><buginformation><summary>[PIG-1612] error reporting: PigException needs to have a way to indicate that its message is appropriate for user - ASF JIRA</summary><description>The error message printed to the user by pig is the message from the exception that is the 'root cause' from the chain of getCause() of exception that has been thrown. But often the 'root cause' exception does not have enough context that would make for a better error message. It should be possible for a PigException to indicate to the code that determines the error message that its getMessage() string should be used instead of that of the 'cause' exception. The following code in LogUtils.java is used to determine the exception that is the 'root cause' - &#13;
    public static PigException getPigException(Throwable top) {&#13;
        Throwable current = top;&#13;
        Throwable pigException = top;&#13;
&#13;
        while (current != null &amp;&amp; current.getCause() != null){&#13;
            current = current.getCause();&#13;
            if((current instanceof PigException) &amp;&amp; (((PigException)current).getErrorCode() != 0)) {&#13;
                pigException = current;&#13;
            }&#13;
        }&#13;
        return (pigException instanceof PigException? (PigException)pigException : null);&#13;
        &#13;
    }</description></buginformation><fixedFiles><file>src.org.apache.pig.impl.util.LogUtils.java</file><file>src.org.apache.pig.PigException.java</file><file>test.org.apache.pig.test.TestPigException.java</file><file>src.org.apache.pig.impl.logicalLayer.schema.Schema.java</file></fixedFiles></bug><bug fixdate="2011-03-15 12:56:12" id="1566" opendate="2010-08-25 06:37:01"><buginformation><summary>[PIG-1566] Support globbing for registering jars in pig script. - ASF JIRA</summary><description>Currently user can not register pig jars with globing. For example following register script will fail. register /etc/jars/*.jar It will be great if we can support such globing for registering jars. Release notes: We allow globbing in register statement. User can use "*" to denote a globbing, eg: register key*.jar register /home/jarpath/key*.jar register jars/key*.jar The path can be absolute path or relative path start with working directory. Note globbing does not further search in classpath as non-globbing case does, eg: "register key1234.jar" works if key1234.jar in classpath, but not in working directory, however, "register key*.jar" will not locate key1234.jar in this case.</description></buginformation><fixedFiles><file>src.org.apache.pig.PigServer.java</file><file>test.org.apache.pig.test.TestPigServer.java</file></fixedFiles></bug><bug fixdate="2011-04-20 11:44:36" id="1281" opendate="2010-03-06 01:03:06"><buginformation><summary>[PIG-1281] Detect org.apache.pig.data.DataByteArray cannot be cast to org.apache.pig.data.Tuple type of errors at Compile Type during creation of logical plan - ASF JIRA</summary><description>This is more of an enhancement request, where we can detect simple errors during compile time during creation of Logical plan rather than at the backend. I created a script which contains an error which gets detected in the backend as a cast error when in fact we can detect it in the front end(group is a single element so group.$0 projection operation will not work). &#13;
inputdata = LOAD '/user/viraj/mymapdata' AS (co1, col2, col3, col4);&#13;
&#13;
projdata = FILTER inputdata BY (col1 is not null);&#13;
&#13;
groupprojdata = GROUP projdata BY col1;&#13;
&#13;
cleandata = FOREACH groupprojdata {&#13;
                     bagproj = projdata.col1;&#13;
                     dist_bags = DISTINCT bagproj;&#13;
                     GENERATE group.$0 as newcol1, COUNT(dist_bags) as newcol2;&#13;
                      };&#13;
&#13;
cleandata1 = GROUP cleandata by newcol2;&#13;
&#13;
cleandata2 = FOREACH cleandata1 { GENERATE group.$0 as finalcol1, COUNT(cleandata.newcol1) as finalcol2; };&#13;
&#13;
ordereddata = ORDER cleandata2 by finalcol2;&#13;
&#13;
store into 'finalresult' using PigStorage();</description></buginformation><fixedFiles><file>test.org.apache.pig.test.TestTypeCheckingValidatorNewLP.java</file><file>src.org.apache.pig.newplan.logical.visitor.TypeCheckingExpVisitor.java</file></fixedFiles></bug><bug fixdate="2011-01-05 04:52:32" id="946" opendate="2009-09-04 11:51:37"><buginformation><summary>[PIG-946] Combiner optimizer does not optimize when limit follow group, foreach - ASF JIRA</summary><description>The following script is combinable but is not optimized: a = load '/user/pig/tests/data/singlefile/studenttab10k'; b = group a by $1; c = foreach b generate group, AVG(a.$2); d = limit c 10; dump d;</description></buginformation><fixedFiles><file>test.org.apache.pig.test.TestCombiner.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.java</file></fixedFiles></bug><bug fixdate="2011-02-08 06:22:09" id="847" opendate="2009-06-12 11:33:10"><buginformation><summary>[PIG-847] Setting twoLevelAccessRequired field in a bag schema should not be required to access fields in the tuples of the bag - ASF JIRA</summary><description>Currently Pig interprets the result type of a relation as a bag. However the schema of the relation directly contains the schema describing the fields in the tuples for the relation. However when a udf wants to return a bag or if there is a bag in input data or if the user creates a bag constant, the schema of the bag has one field schema which is that of the tuple. The Tuple's schema has the types of the fields. To be able to access the fields from the bag directly in such a case by using something like &lt;bagname&gt;.&lt;fieldname&gt; or &lt;bag&gt;.&lt;fieldposition&gt;, the schema of the bag should have the twoLevelAccess set to true so that pig's type system can get traverse the tuple schema and get to the field in question. This is confusing - we should try and see if we can avoid needing this extra flag. A possible solution is to treat bags the same way - whether they represent relations or real bags. Another way is to introduce a special "relation" datatype for the result type of a relation and bag type would be used only for true bags. In this case, we would always need bag schema to have a tuple schema which would describe the fields.</description></buginformation><fixedFiles><file>src.org.apache.pig.newplan.logical.Util.java</file><file>src.org.apache.pig.builtin.TOKENIZE.java</file><file>test.org.apache.pig.test.TestLogicalPlanMigrationVisitor.java</file><file>src.org.apache.pig.ResourceSchema.java</file><file>src.org.apache.pig.impl.logicalLayer.LOProject.java</file><file>src.org.apache.pig.newplan.logical.rules.DuplicateForEachColumnRewrite.java</file><file>src.org.apache.pig.data.DataType.java</file><file>src.org.apache.pig.impl.logicalLayer.LOForEach.java</file><file>src.org.apache.pig.newplan.logical.rules.InputOutputFileValidator.java</file><file>src.org.apache.pig.newplan.logical.relational.LogicalSchema.java</file><file>test.org.apache.pig.test.TestSchema.java</file><file>src.org.apache.pig.impl.logicalLayer.schema.Schema.java</file></fixedFiles></bug><bug fixdate="2010-12-19 03:59:30" id="750" opendate="2009-04-03 12:59:55"><buginformation><summary>[PIG-750] Use combiner when algebraic UDFs are used in expressions - ASF JIRA</summary><description>Currently Pig uses combiner when all a,b, c,... are algebraic (e.g. SUM, AVG etc.) in foreach: foreach X generate a,b,c,... It's a performance improvement if it uses combiner when a mix of algebraic and non-algebraic functions are used as well.</description></buginformation><fixedFiles><file>test.org.apache.pig.test.TestCombiner.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POPackage.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.mapReduceLayer.CombinerOptimizer.java</file><file>test.org.apache.pig.test.TestMultiQueryCompiler.java</file><file>src.org.apache.pig.backend.hadoop.executionengine.physicalLayer.relationalOperators.POCombinerPackage.java</file></fixedFiles></bug></bugrepository>