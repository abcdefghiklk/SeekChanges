<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2012-09-04 10:52:10" id="4748" opendate="2012-09-04 09:22:07"><buginformation><summary>[WICKET-4748] Improve WicketTester to be able to find AjaxBehaviors on second/third/... event name - ASF JIRA</summary><description>Since Wicket 6.0 it is possible to pass several event names to any AbstractDefaultAjaxBehavior via AjaxRequestAttributes#setEventNames(String...) or by using jQuery's specific compound event name (e.g. AjaxEventBehavior("eventOne eventTwo")). WicketTesterHelper#findAjaxEventBehavior() currently can only work with AjaxEventBehavior and its specializations and only with full event name, i.e. the test should use "eventOne eventTwo".</description></buginformation><fixedFiles><file>gelog.wicket-git.wicket-core.src.main.java.org.apache.wicket.util.tester.WicketTesterHelper.java</file></fixedFiles></bug><bug fixdate="2012-09-03 06:36:20" id="4745" opendate="2012-09-03 04:20:50"><buginformation><summary>[WICKET-4745] Allow to set initial state of DebugBar to expanded / collapsed - ASF JIRA</summary><description>The current implementation of DebugBar initially loads in expanded state and can be collapsed by clicking on it. If possible I would like to be able to set the initial state of the DebugBar from code. Right now I'm using @Override public void renderHead(final IHeaderResponse response) { super.renderHead(response); response.renderOnLoadJavaScript("wicketDebugBarCollapse();"); } as a workaround.</description></buginformation><fixedFiles><file>gelog.wicket-git.wicket-devutils.src.main.java.org.apache.wicket.devutils.debugbar.DebugBar.java</file></fixedFiles></bug><bug fixdate="2012-09-03 12:45:59" id="4736" opendate="2012-08-29 11:35:37"><buginformation><summary>[WICKET-4736] JavaScriptFilteredIntoFooterHeaderResponse should reverse filter logic - ASF JIRA</summary><description>JavaScriptFilteredIntoFooterHeaderResponse creates two buckets. One for CSS and one for JS. The current logic is that everything that isn't CSS must be JS and so gets put at the bottom of the page. This breaks if CssAcceptingHeaderResponseFilter mistakingly identifies something as non-CSS (eg a CSS file with another extension). Also everything else that isn't CSS gets put into the footer bucket (which should contain only JS). It would be better if it only puts things in the footer bucket if it can determine that it's JS and sort everything else into the header bucket.</description></buginformation><fixedFiles><file>gelog.wicket-git.wicket-core.src.main.java.org.apache.wicket.markup.head.filter.JavaScriptFilteredIntoFooterHeaderResponse.java</file></fixedFiles></bug><bug fixdate="2012-09-03 11:02:53" id="4731" opendate="2012-08-26 08:33:23"><buginformation><summary>[WICKET-4731] TimeField not able to work with a java.sql.Time - ASF JIRA</summary><description>When using the TimeField with a model whose object is a java.sql.Time, I get an error similar to the following when submitting the form: Last cause: Cannot parse '1/1/70' using format java.text.SimpleDateFormat@b4dc7db3 Here's how the TimeField is constructed: TimeField tf = new TimeField(id, new Model&lt;java.sql.Time&gt;() { public java.sql.Time getObject() { // return java.sql.Time } }); This error is occurring because SqlTimeConverter is trying to convert the string representation of the java.util.Date obtained from the TimeField. TimeField doesn't support anything other than java.util.Date. It would be useful if TimeField could work with subclasses of java.util.Date such as java.sql.Time. In order to achieve this, I would like to propose: Changing setConvertedInput(new Date(date.getMillis())); in DateTimeField.convertInput() to setConvertedInput(newDateInstance(date.getMillis())); Create an overridable newDateInstance(long) method. Users of TimeField can override this method to create a java.sql.Time instance instead of a java.util.Date. The form component conversion process will then work when the model object is a java.sql.Time.</description></buginformation><fixedFiles><file>gelog.wicket-git.wicket-datetime.src.main.java.org.apache.wicket.extensions.yui.calendar.TimeField.java</file><file>gelog.wicket-git.wicket-datetime.src.main.java.org.apache.wicket.extensions.yui.calendar.DateTimeField.java</file></fixedFiles></bug><bug fixdate="2012-09-04 11:03:39" id="4730" opendate="2012-08-24 12:25:16"><buginformation><summary>[WICKET-4730] Filter component does not clear filter fields - ASF JIRA</summary><description>The GoAndClearFilter.onClearSubmit() does not clear filter fields because the originalState member has the current values of the filter. I think it should create a new instance of the originalState class instead of clone the model. To verify use the phonebook sample (https://github.com/wicketstuff/core/tree/master/jdk-1.6-parent/phonebook). The clear only works if "go" was not pressed after enter some values in the filter, but if you press go and then want to clear the filter it keeps the values. Attached is a patch that makes the phonebook sample work. It might also be useful if the originalState attribute were made protected or accessible via protected method to allow users to overwrite the onClearSubmit() method and access the originalState attribute.</description></buginformation><fixedFiles><file>gelog.wicket-git.wicket-extensions.src.main.java.org.apache.wicket.extensions.markup.html.repeater.data.table.filter.GoAndClearFilter.java</file></fixedFiles></bug></bugrepository>