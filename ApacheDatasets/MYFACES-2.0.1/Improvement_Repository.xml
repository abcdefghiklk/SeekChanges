<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2010-07-15 07:18:37" id="2802" opendate="2010-07-09 09:54:05"><buginformation><summary>[MYFACES-2802] Remove CompositeComponentResourceTagHandler.ATTACHED_OBJECT_HADLERS_KEY from Attributes Map - ASF JIRA</summary><description>Another state saving improvement is to remove the attached object handlers from the component attributes map. Instead a map that holds the attached object handlers indexed by the component reference will be created in CompositeComponentResourceTagHandler.</description></buginformation><fixedFiles><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.core.SetPropertyActionListenerHandler.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.FaceletCompositionContext.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.core.ValueChangeListenerHandler.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.core.ActionListenerHandler.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.BehaviorTagHandlerDelegate.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.core.AjaxHandler.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.impl.FaceletCompositionContextImpl.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.ValidatorTagHandlerDelegate.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.composite.CompositeComponentResourceTagHandler.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.tag.jsf.ConverterTagHandlerDelegate.java</file><file>impl.src.main.java.org.apache.myfaces.view.facelets.FaceletViewDeclarationLanguage.java</file></fixedFiles></bug><bug fixdate="2010-07-11 12:27:42" id="2777" opendate="2010-06-29 03:11:00"><buginformation><summary>[MYFACES-2777] Remove VISITED_FACET_COUNT from component attributes map - ASF JIRA</summary><description>In order to reduce the saved state, the ErrorPageWriter.VISITED_FACET_COUNT should not be included in the component attributes map, as this is only an intermediate parameter used in the current request.</description></buginformation><fixedFiles><file>impl.src.main.java.org.apache.myfaces.renderkit.ErrorPageWriter.java</file></fixedFiles></bug><bug fixdate="2010-07-11 12:32:04" id="2770" opendate="2010-06-23 09:00:27"><buginformation><summary>[MYFACES-2770] Improve &lt;ui:debug&gt; with information about the saved state - ASF JIRA</summary><description>Include in the &lt;ui:debug&gt; information about the saved state.</description></buginformation><fixedFiles><file>impl.src.main.java.org.apache.myfaces.renderkit.ErrorPageWriter.java</file></fixedFiles></bug><bug fixdate="2010-06-24 11:28:36" id="2769" opendate="2010-06-22 09:28:31"><buginformation><summary>[MYFACES-2769] Resource should expire immediately in javax.faces.PROJECT_STAGE=Development - ASF JIRA</summary><description>In PROJECT_STAGE=Development it would be useful to force browse not cache resources like .css or .js. The most annyoing during web development is clearing cache somewhere in Preferences -&gt; Advanced -&gt; Cache -&gt; Clear Cache in browsers which don't have Clear Cache plugin like Firefox does.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.resource.ResourceImpl.java</file></fixedFiles></bug><bug fixdate="2010-06-14 02:46:21" id="2746" opendate="2010-06-08 01:26:13"><buginformation><summary>[MYFACES-2746] Subdivide methods of HtmlTextRendererBase, HtmlTextareaRendererBase and HtmlSecretRendererBase into extendable parts - ASF JIRA</summary><description>Subdivide the functionality in HtmlTextRendererBase, HtmlTextareaRendererBase and HtmlSecretRendererBase classes of myfaces-shared into better extendable parts. So, subclasses of these can extend these bases, rather than copying them.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.shared.renderkit.html.HtmlTextareaRendererBase.java</file><file>src.main.java.org.apache.myfaces.shared.renderkit.html.HtmlSecretRendererBase.java</file><file>src.main.java.org.apache.myfaces.shared.renderkit.html.HtmlTextRendererBase.java</file></fixedFiles></bug><bug fixdate="2010-06-10 11:48:02" id="2739" opendate="2010-05-28 07:51:05"><buginformation><summary>[MYFACES-2739] Pass through String values in EnumConverter.getAsString() - ASF JIRA</summary><description>From the related spec issue (#817 - https://javaserverfaces-spec-public.dev.java.net/issues/show_bug.cgi?id=817): In every standard by-type converter in the JSF spec, except for the EnumConverter, the following code is present in getAsString(): if (value instanceof String) { return (String) value; } Thus allowing String values to be used directly as the String representation of the type. This allows e.g. the following scenario for an Integer property in the managed bean to work, although "1234" beeing a String and not an Integer: &lt;h:selectOneRadio value="# {myBean.inputInt} "&gt; &lt;f:selectItem itemValue="1234" /&gt; &lt;/h:selectOneRadio&gt; However the spec javadoc of the EnumConverter does not include this scenario and thus EnumConverter.getAsString() throws a ConverterException when providing a String value. This means that the following scenario won't work, although it should on my opinion (note that this currently does work with Mojarra because of an implementation issue - see [1] for details): &lt;h:selectOneRadio value="# {myBean.inputEnum}"&gt; &lt;f:selectItem itemValue="EnumConstant1" /&gt; &lt;/h:selectOneRadio&gt; EnumConstant1 beeing a valid constant in the enum type referenced by #{myBean.inputEnum} . The only way to make this work right now is to use a ValueExpression that resolves to the needed enum constant, so something like this: &lt;h:selectOneRadio value="# {myBean.inputEnum} "&gt; &lt;f:selectItem itemValue="# {myBean.propertyThatResolvesToEnumConstant1} " /&gt; &lt;/h:selectOneRadio&gt; This is not very straight forward IMHO, thus I think EnumConverter.getAsString() should pass through String-values just as every other standard by-type converter does. See also the discussion on the MyFaces user mailing list about this [2]. [1] https://javaserverfaces.dev.java.net/issues/show_bug.cgi?id=1694 [2] http://www.mail-archive.com/users@myfaces.apache.org/msg55742.html</description></buginformation><fixedFiles><file>src.main.java.javax.faces.convert.EnumConverter.java</file></fixedFiles></bug><bug fixdate="2010-05-28 03:28:45" id="2737" opendate="2010-05-27 02:19:01"><buginformation><summary>[MYFACES-2737] Cache FacesContext on UIComponentBase instances - ASF JIRA</summary><description>Right now, the implementation of UIComponentBase.getFacesContext() is this: @Override protected FacesContext getFacesContext() { return FacesContext.getCurrentInstance(); } I think it is possible to create a variable like this: private transient FacesContext _facesContext; and change the current implementation to: void setCachedFacesContext(FacesContext facesContext) { _facesContext = facesContext; } @Override protected FacesContext getFacesContext() { if (_facesContext == null) { return FacesContext.getCurrentInstance(); } else { return _facesContext; } } Then we do this on methods like processXXX, encodeXXX (not on encodeAll), visitTree and invokeOnComponent: @Override public void processDecodes(FacesContext context) { try { setCachedFacesContext(context); /*...... do what is required ........*/ } finally { popComponentFromEL(context); setCachedFacesContext(null); } In few words, set and release temporally the variable while those operations are executed. This change will reduce the amount of calls to FacesContext.getCurrentInstance() without side effects, because we are caching only on safe places and enclosing everything in a try finally block. If no objections I'll commit this code soon.</description></buginformation><fixedFiles><file>src.main.java.javax.faces.component.UIComponentBase.java</file><file>api.src.main.java.javax.faces.component.UIComponentBase.java</file><file>src.main.java.javax.faces.component.UIViewRoot.java</file><file>src.main.java.javax.faces.component._ComponentAttributesMap.java</file><file>src.main.java.javax.faces.component.UIData.java</file><file>api.src.main.java.javax.faces.component.UIData.java</file></fixedFiles></bug><bug fixdate="2010-06-25 10:41:46" id="2714" opendate="2010-05-13 10:08:36"><buginformation><summary>[MYFACES-2714] Include uncompressed jsf.js file and use it when development mode is used - ASF JIRA</summary><description>Reading some blogs about jsf 2.0, I notice mojarra include an uncompressed jsf.js file and use it when development mode is used. It is difficult to debug myfaces javascript for users and I think it is worth to do it too.</description></buginformation><fixedFiles><file>api.src.main.java.javax.faces.component.UIInput.java</file><file>impl.src.main.java.org.apache.myfaces.resource.ResourceMeta.java</file><file>impl.src.main.java.org.apache.myfaces.resource.ResourceImpl.java</file><file>impl.src.main.java.org.apache.myfaces.resource.InternalClassLoaderResourceLoader.java</file><file>impl.src.main.java.org.apache.myfaces.resource.ResourceMetaImpl.java</file><file>impl.src.main.java.org.apache.myfaces.application.DefaultResourceHandlerSupport.java</file><file>impl.src.main.java.org.apache.myfaces.resource.ClassLoaderResourceLoader.java</file><file>impl.src.main.java.org.apache.myfaces.resource.ExternalContextResourceLoader.java</file><file>impl.src.main.java.org.apache.myfaces.resource.AliasResourceMetaImpl.java</file></fixedFiles></bug><bug fixdate="2010-05-14 11:02:20" id="2712" opendate="2010-05-12 08:37:40"><buginformation><summary>[MYFACES-2712] Copy codehaus javascript plugin code and incorporate into myfaces-javascript-plugin - ASF JIRA</summary><description>Since there is no release of codehaus javascript-maven-plugin, and we don't know when it could be one, it becomes necessary to copy the code and include it into myfaces-javascript-plugin (which has original trinidad compressor). Fortunately, the code at codehaus is licensed with ASL v 2.0, so we can use it without problem. In this case, we are only interested in import yuicompressor.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.InPlaceMojo.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.CompressMojoTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.archive.Types.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.stub.ArtifactStub.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.CompressionException.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.CompileMojoTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.YahooUICompressor.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.archive.JavascriptArchiver.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.CompileMojo.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.AssemblerReaderManager.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.WarPackageMojoTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.AssemblerReader.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.archive.JavascriptUnArchiver.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.WebappCompressMojo.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.NoSuchAssemblerReaderException.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.IsolatedClassLoaderTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.JSCompressorProxy.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.AbstractJavascriptMojo.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.IsolatedClassLoader.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.JsBuilderAssemblerReader.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.AbstractCompressMojo.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.StripDebugsMojoTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.WarPackageMojo.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.JSMinCompressor.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.PackageMojo.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.YahooUICompressorTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.DefaultAssemblerReader.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.AttachCompressedMojo.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.stub.MavenProjectStub.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.JSCompressor.java</file><file>src.test.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.JsBuilderAssemblerReaderTest.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.compress.ShrinksafeCompressor.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.archive.JavascriptArtifactManager.java</file><file>src.main.java.org.apache.myfaces.buildtools.maven2.plugin.javascript.jmt.assembler.DefaultAssemblerReaderManager.java</file></fixedFiles></bug></bugrepository>