<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2010-07-09 09:29:06" id="2800" opendate="2010-07-09 12:13:24"><buginformation><summary>[MYFACES-2800] navigation-case/redirect/include-view-params is not picked up and has a wrong default value - ASF JIRA</summary><description>Tthe &lt;redirect&gt; element of a &lt;navigation-case&gt; has an attribute called include-view-params. This attribute is currently not picked up due to a wrong configuration of DigesterFacesConfigUnmarshallerImpl. Furthermore its default value should be false instead of true.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.config.impl.digester.DigesterFacesConfigUnmarshallerImpl.java</file><file>src.main.java.org.apache.myfaces.application.NavigationHandlerImpl.java</file><file>src.main.java.org.apache.myfaces.config.element.Redirect.java</file><file>src.main.java.org.apache.myfaces.config.impl.digester.elements.Redirect.java</file></fixedFiles></bug><bug fixdate="2010-07-06 05:39:33" id="2788" opendate="2010-07-06 04:57:32"><buginformation><summary>[MYFACES-2788] setRowIndex still uses getClientId instead of getContainerClientId for saving and restoring row states - ASF JIRA</summary><description>getClientId was replaced with getContainerClientId but method setRowIndex was not fit to this changes and so saving and restoring of row states doesn't work!</description></buginformation><fixedFiles><file>api.src.main.java.javax.faces.component.UIData.java</file></fixedFiles></bug><bug fixdate="2010-06-28 07:18:43" id="2775" opendate="2010-06-28 09:30:30"><buginformation><summary>[MYFACES-2775] StackOverflowError when adding componentResource with id=null - ASF JIRA</summary><description>If second parameter - the componentResource: UIViewRoot.addComponentResource(FacesContext context, UIComponent componentResource) has null id then StackOverflowError occurs: Caused by: java.lang.StackOverflowError at java.lang.ThreadLocal.get(ThreadLocal.java:124) at javax.faces.context.FacesContext.getCurrentInstance(FacesContext.java:71) at javax.faces.component.UIComponentBase.getFacesContext(UIComponentBase.java:1057) at javax.faces.component.UIComponentBase.setParent(UIComponentBase.java:174) at javax.faces.component._ComponentChildrenList.childRemoved(_ComponentChildrenList.java:123) at javax.faces.component._ComponentChildrenList.remove(_ComponentChildrenList.java:147) at javax.faces.component._ComponentChildrenList.removeChildrenFromParent(_ComponentChildrenList.java:136) at javax.faces.component._ComponentChildrenList.add(_ComponentChildrenList.java:76) at javax.faces.component._ComponentChildrenList.add(_ComponentChildrenList.java:30) at javax.faces.component.UIViewRoot.addComponentResource(UIViewRoot.java:188) at org.apache.myfaces.renderkit.html.HtmlStylesheetRenderer.processEvent(HtmlStylesheetRenderer.java:86) at javax.faces.component.UIComponent$EventListenerWrapper.processEvent(UIComponent.java:1098) at javax.faces.event.SystemEvent.processListener(SystemEvent.java:43) at org.apache.myfaces.application.ApplicationImpl._traverseListenerList(ApplicationImpl.java:1955) at org.apache.myfaces.application.ApplicationImpl.publishEvent(ApplicationImpl.java:504) at javax.faces.component.UIComponentBase._publishPostAddToViewEvent(UIComponentBase.java:201) at javax.faces.component.UIComponentBase.setParent(UIComponentBase.java:186) at javax.faces.component._ComponentChildrenList.updateParent(_ComponentChildrenList.java:128) at javax.faces.component._ComponentChildrenList.add(_ComponentChildrenList.java:79) at javax.faces.component._ComponentChildrenList.add(_ComponentChildrenList.java:30) at javax.faces.component.UIViewRoot.addComponentResource(UIViewRoot.java:188) at org.apache.myfaces.renderkit.html.HtmlStylesheetRenderer.processEvent(HtmlStylesheetRenderer.java:86) at javax.faces.component.UIComponent$EventListenerWrapper.processEvent(UIComponent.java:1098) .... This probably does not happen if componentResource is created from a facelet but only if it created from java code (a listener in my case)</description></buginformation><fixedFiles><file>src.main.java.javax.faces.component.UIViewRoot.java</file></fixedFiles></bug><bug fixdate="2010-05-31 10:16:44" id="2734" opendate="2010-05-24 12:14:02"><buginformation><summary>[MYFACES-2734] Character encoding not set correctly before Restore View - ASF JIRA</summary><description>In my examples I have a phase listener that outputs all request parameters. I accidentially did this before restore view and got some strange behaviour. With MyFaces 2.0, reading the request parameters before the restore view phase kills german umlauts. This happens because the character encoding is calculated and set in the request at the beginning of restore view but after the before phase listeners are executed. As this is not happening with Mojarra, I set a breakpoint in ServletRequest.setCharacterEncoding and saw that they are setting this somewhere at the beginning of the lifecycle. I quickly checked the spec but the only thing I found regarding the character encoding was at the beginning of restore view (which is done correctly in MyFaces). But I wonder if it should not be set earlier as, like in my case, an earlier access to the request parameters kills umlauts. This might also be necessary for extensions doing something with request parameters in a before restore view listener.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.lifecycle.PhaseExecutor.java</file><file>src.main.java.org.apache.myfaces.lifecycle.RenderResponseExecutor.java</file><file>src.main.java.org.apache.myfaces.lifecycle.RestoreViewExecutor.java</file><file>src.main.java.org.apache.myfaces.lifecycle.UpdateModelValuesExecutor.java</file><file>src.test.java.org.apache.myfaces.lifecycle.RestoreViewExecutorTest.java</file><file>src.main.java.org.apache.myfaces.lifecycle.ProcessValidationsExecutor.java</file><file>src.main.java.org.apache.myfaces.lifecycle.LifecycleImpl.java</file><file>src.main.java.org.apache.myfaces.lifecycle.ApplyRequestValuesExecutor.java</file><file>core.api.src.main.java.javax.faces.webapp.FacesServlet.java</file><file>src.main.java.org.apache.myfaces.lifecycle.InvokeApplicationExecutor.java</file></fixedFiles></bug><bug fixdate="2010-06-24 04:23:25" id="2730" opendate="2010-05-21 04:08:18"><buginformation><summary>[MYFACES-2730] FacesContext not available on application startup - ASF JIRA</summary><description>If custom ResourceHandler calls FacesContext.getCurrentInstance() in constructor to read init parameters, null value is returned. This affects latest MyFaces 2.0.0-SNAPSHOT. Mojarra 2.0 provides InitFacesContext in this case.</description></buginformation><fixedFiles><file>src.main.java.org.apache.myfaces.application._SystemEventServletResponse.java</file><file>src.main.java.org.apache.myfaces.config.FacesConfigurator.java</file><file>src.main.java.org.apache.myfaces.webapp.StartupServletContextListener.java</file><file>src.main.java.org.apache.myfaces.context.servlet.StartupFacesContextImpl.java</file><file>src.main.java.org.apache.myfaces.webapp.FacesInitializer.java</file><file>src.main.java.org.apache.myfaces.application._SystemEventServletRequest.java</file><file>src.main.java.org.apache.myfaces.webapp.AbstractFacesInitializer.java</file><file>src.main.java.org.apache.myfaces.context.servlet.ServletExternalContextImpl.java</file><file>src.main.java.org.apache.myfaces.application.ApplicationImpl.java</file><file>src.main.java.org.apache.myfaces.webapp.MyFacesServlet.java</file><file>src.main.java.org.apache.myfaces.context.servlet.StartupServletExternalContextImpl.java</file></fixedFiles></bug></bugrepository>