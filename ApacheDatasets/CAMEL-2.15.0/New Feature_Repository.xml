<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2015-03-02 02:17:48" id="8385" opendate="2015-02-21 02:57:23"><buginformation><summary>[CAMEL-8385] Add a OldestInflightDuration and OldestInflightExchangeId attribute to route MBeans - ASF JIRA</summary><description>If we has an attribute like OldestInflightStartedTimestamp and OldestInflightStartedExchangeId then it would be easier to monitor for routes which get 'stuck' or exceed the expected SLA for the route to complete processing the exchange.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.management.ManagedInflightStatisticsTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.api.management.mbean.ManagedRouteMBean.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.management.mbean.ManagedRoute.java</file></fixedFiles></bug><bug fixdate="2015-02-21 03:39:27" id="8368" opendate="2015-02-17 04:28:14"><buginformation><summary>[CAMEL-8368] Timer component - Support for greedy, backoff - ASF JIRA</summary><description>Look into letting timer endpoint support those backoff, greedy options we have. The idea would be that the exchange at the end of the routing, has some property/header, that the timer consumer understands, and then know if it should regard as one message polled, or zero message polled, etc. Then greedy, backoff, and the other options can work as usual. This allows people to have the simple timer scheduler to scale up / down depending on demand.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.scheduler.SchedulerComponent.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultScheduledPollConsumerScheduler.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.ScheduledPollConsumer.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.scheduler.SchedulerRouteTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Exchange.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.scheduler.SchedulerConsumer.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.scheduler.SchedulerNoPolledMessagesTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.scheduler.TwoSchedulerTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.timer.TimerRouteTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.scheduler.SchedulerEndpoint.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.scheduler.TwoSchedulerConcurrentTasksTest.java</file></fixedFiles></bug><bug fixdate="2015-02-19 07:09:08" id="8365" opendate="2015-02-17 09:21:52"><buginformation><summary>[CAMEL-8365] Release Apache Camel Archetype Catalog - ASF JIRA</summary><description>We have a bunch of Maven Archetypes in tooling/archetypes. But we do not have a camel-archetype.xml file as part of the release which is published to maven central, so users / tooling can use that to know the Camel only archetypes. Today they are in the big maven central at, but it contains all 1000+ archetypes http://repo2.maven.org/maven2/archetype-catalog.xml We should build our own camel-catalog.xml and publish at http://repo1.maven.org/maven2/org/apache/camel/archetypes/2.14.1/ And maybe name it archetype-catalog.xml. And then we should include the archetype in the camel-catalog JAR so its also easy for offline tooling and whatnot to grab that file.</description></buginformation><fixedFiles><file>gelog.camel-git.tooling.maven.camel-package-maven-plugin.src.main.java.org.apache.camel.maven.packaging.PackageArchetypeCatalogMojo.java</file><file>gelog.camel-git.tooling.maven.camel-package-maven-plugin.src.main.java.org.apache.camel.maven.packaging.StringHelper.java</file></fixedFiles></bug><bug fixdate="2015-02-27 08:48:56" id="8357" opendate="2015-02-15 04:25:20"><buginformation><summary>[CAMEL-8357] Add JDK 7 Mime/Content Type Support To File Camel Consumers - ASF JIRA</summary><description>Enhance all Camel file-type consumers to probe the content type and populate a header on the exchange to allow access to content type. See: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#probeContentType%28java.nio.file.Path%29</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Exchange.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.file.GenericFile.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.MyFileTypeDetector.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.GenericFileMessageTest.java</file></fixedFiles></bug><bug fixdate="2015-02-28 09:07:37" id="8342" opendate="2015-02-12 01:18:43"><buginformation><summary>[CAMEL-8342] add Ganglia component - ASF JIRA</summary><description>Add a component to send values to Ganglia as metrics</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-ganglia.src.main.java.org.apache.camel.component.ganglia.GangliaComponent.java</file><file>gelog.camel-git.components.camel-ganglia.src.main.java.org.apache.camel.component.ganglia.GangliaProducer.java</file><file>gelog.camel-git.components.camel-ganglia.src.main.java.org.apache.camel.component.ganglia.GangliaConfiguration.java</file><file>gelog.camel-git.components.camel-ganglia.src.main.java.org.apache.camel.component.ganglia.GangliaEndpoint.java</file><file>gelog.camel-git.components.camel-ganglia.src.main.java.org.apache.camel.component.ganglia.GangliaConstants.java</file></fixedFiles></bug><bug fixdate="2015-03-03 05:48:44" id="8332" opendate="2015-02-10 03:37:08"><buginformation><summary>[CAMEL-8332] Add component implementation to camel-dozer module - ASF JIRA</summary><description>The camel-dozer component does not actually provide a Camel component implementation today. Rather, it provides a converter loader which can be used in combination with a set of Dozer mapping files to register a global set of converters within a CamelContext. This issue proposes the addition of a full-blown component implementation within camel-dozer. Advantages of this approach include: The ability to manage Dozer mapping configuration on a per-endpoint basis vs. global configuration via the converter registry. Dozer handles direct field assignment quite well, but does not provide other common mapping functions OOTB. Camel can enrich Dozer via standard Dozer extensions, e.g. Mapping constant values to target fields Support for lookup tables, using the source value as the key Convenience transformations for mappings (e.g. trim spaces, convertToLowerCase, regular expression evaluation) Allow Camel message/exchange headers to be mapped to target fields The ability to surround dozer mappings with data formats to support a single, any-to-any transformation endpoint Here's an example of what the endpoint configuration would look like. dozer:mytransform?mappingFile=dozerBeanMapping.xml&amp;marshalId=json&amp;unmarshalId=jaxb&amp;targetModel=example.MyObject&#13;
 An initial implementation of this component is available as a PR against the Camel GitHub repository. Unit tests in the PR provide examples of various transformation use cases. Many, but not all, of the features listed above are implemented already. I can file follow-up JIRAs for additional features I have in mind. I will also post a link to the PR and the topic branch in the issue comments.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.LiteralMapper.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.converter.dozer.DozerTypeConverterLoader.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.LiteralMappingTest.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.xyz.LineItem.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.DozerConfiguration.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.CustomMapperOperations.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.BaseConverter.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.DozerComponentTest.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.VariableMappingTest.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.DozerComponent.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.DozerProducer.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.abc.ABCOrder.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.CustomMapperTest.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.VariableMapper.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.CustomMappingTest.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.ExpressionMappingTest.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.xyz.XYZOrder.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.DozerEndpoint.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.ExpressionMapper.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.CustomMapper.java</file><file>gelog.camel-git.components.camel-dozer.src.main.java.org.apache.camel.component.dozer.CustomMapper.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.example.abc.ObjectFactory.java</file><file>gelog.camel-git.components.camel-dozer.src.test.java.org.apache.camel.component.dozer.XmlToJsonTest.java</file></fixedFiles></bug><bug fixdate="2015-02-05 02:55:48" id="8317" opendate="2015-02-05 10:14:07"><buginformation><summary>[CAMEL-8317] XML DSL - Allow to use bean property style to configure endpoint options - ASF JIRA</summary><description>So we can do &#13;
&lt;endpoint id="foo" uri="file:something"&gt;&#13;
   &lt;property name="includes" value="backup/*.xml"/&gt;&#13;
   &lt;property name="recursive" value="true"/&gt;&#13;
   ...&#13;
&lt;/endpoint&gt;&#13;
 See also CAMEL-7419</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-spring.src.main.java.org.apache.camel.spring.CamelEndpointFactoryBean.java</file><file>gelog.camel-git.components.camel-blueprint.src.main.java.org.apache.camel.blueprint.handler.CamelNamespaceHandler.java</file><file>gelog.camel-git.components.camel-core-xml.src.main.java.org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.java</file><file>gelog.camel-git.components.camel-spring.src.test.java.org.apache.camel.spring.SpringEndpointPropertyTest.java</file><file>gelog.camel-git.components.camel-spring.src.main.java.org.apache.camel.spring.handler.CamelNamespaceHandler.java</file><file>gelog.camel-git.components.camel-test-blueprint.src.test.java.org.apache.camel.test.blueprint.EndpointPropertyTest.java</file></fixedFiles></bug><bug fixdate="2015-02-06 11:25:05" id="8281" opendate="2015-01-26 12:01:50"><buginformation><summary>[CAMEL-8281] camel-box - Improved type conversion - ASF JIRA</summary><description>BoxTypeConverter - documentation is ambiguous as to whether the folderId can be specified with a property or a header. The attached patch changes it so that it can be set on a header and adds a second conversion from byte[] so that camel-box endpoints can sit on the end of a message queue or other non-file like route. A dependence on the CamelFileName header is introduced.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-box.src.main.java.org.apache.camel.component.box.BoxConverter.java</file></fixedFiles></bug><bug fixdate="2015-05-04 09:19:52" id="8269" opendate="2015-01-23 08:56:06"><buginformation><summary>[CAMEL-8269] camel-salesforce: support for Salesforce Apex API - ASF JIRA</summary><description>Salesforce provides a service that they call the "Apex" API. Using Apex, a developer can write a script and upload it into Salesforce.com and have it executed in the server, similar to putting a stored procedure into a database. The Apex language is very similar to Java and likely to be very accessible to Camel developers. Here is an example: http://www.salesforce.com/us/developer/docs/apexcode/Content/apex_rest_code_sample_basic.htm Notice that each method implementd in the Apex system can define new URLs for handling REST requests. The URL, the format of input data and the format of the return value are arbitrary and at the discretion of the developer. It is not uncommon for developers to use SObjects as input or output and the existing DTOs from the camel-salesforce component would be suitable for interaction with Apex. A typical use case for the Apex API is implementing the convertLead method for REST. The Salesforce SOAP API provides a mechanism for developers to request lead conversion. The Salesforce REST API does not have the convertLead() method. The simplest and most common way to work around this limitation is to implement convertLead() in Apex, here is an example: http://stackoverflow.com/questions/19663119/is-there-any-rest-service-available-in-saleforce-to-convert-leads-into-accounts</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.AbstractSObjectBase.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.dto.PushTopic.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.SObject.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.client.DefaultRestClient.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.PickListValue.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.OperationName.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.processor.JsonRestProcessor.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.SObjectDescription.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.RestResources.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.processor.XmlRestProcessor.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.test.java.org.apache.camel.component.salesforce.dto.generated.Document.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.ActionOverrideTypeEnum.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.SObjectUrls.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.InfoUrls.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.processor.AbstractRestProcessor.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.test.java.org.apache.camel.component.salesforce.RestApiIntegrationTest.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.SalesforceComponent.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.RecordTypeInfo.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.streaming.PushTopicHelper.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.ChildRelationShip.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.FilteredLookupInfo.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.SalesforceEndpointConfig.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.test.java.org.apache.camel.component.salesforce.StreamingApiIntegrationTest.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.internal.client.RestClient.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.ActionOverride.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-component.src.main.java.org.apache.camel.component.salesforce.api.dto.SObjectField.java</file></fixedFiles></bug><bug fixdate="2015-01-17 11:06:03" id="8250" opendate="2015-01-16 08:24:22"><buginformation><summary>[CAMEL-8250] Add type converter for Saxon data types - ASF JIRA</summary><description>Camel does currently not contain any type converters for Saxon specific data types, particularily net.sf.saxon.om.NodeInfo (and List&lt;NodeInfo&gt;). This will lead to errors or an empty result (depending on the result type) if e.g. an XPath is executed with a SAXSource documentType with a Saxon XPathFactory as in from("direct:test") .setBody(xpath("/a/b/c", Document.class) .documentType(SAXSource.class) .factory(new XPathFactoryImpl()) ) The provided patch adds the appropriate type converters (and the unit tests for them) to camel-saxon.</description></buginformation><fixedFiles><file>....camel.converter.saxon.SaxonConverterTest.java</file></fixedFiles></bug></bugrepository>