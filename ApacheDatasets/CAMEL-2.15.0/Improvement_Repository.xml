<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2015-03-06 09:44:57" id="8449" opendate="2015-03-06 09:43:45"><buginformation><summary>[CAMEL-8449] camel-cdi - Support CDI 1.0 - ASF JIRA</summary><description>We should support a broader range of CDI as 1.2 is very new and many libraries and containers do not support that yet. And CDI 1.2 is compatible with the older versions, so there is no harm.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-cdi.src.main.java.org.apache.camel.cdi.internal.CamelContextBean.java</file></fixedFiles></bug><bug fixdate="2015-03-06 07:49:11" id="8444" opendate="2015-03-05 02:50:58"><buginformation><summary>[CAMEL-8444] Camel Toolbox - Component properties to include setters - ASF JIRA</summary><description>The component options are currently discovered in apt from fields. But there is a few components that has delegate setters, such as JMS component. We can improve apt to discover those setters as well to be included. Or better to use the same set of @UriParam on component level as well so its the same all over. But that would need to migrate on all the components if going down that path.</description></buginformation><fixedFiles><file>gelog.camel-git.tooling.apt.src.main.java.org.apache.camel.tools.apt.EndpointAnnotationProcessor.java</file></fixedFiles></bug><bug fixdate="2015-03-06 09:33:28" id="8443" opendate="2015-03-05 11:23:42"><buginformation><summary>[CAMEL-8443] Add properties to route via DSL and XML, expose route properties via JMX - ASF JIRA</summary><description>Allow adding arbitrary String properties to a route, with .routeProperty(name, value) in Java DSL and &lt;routeProperty name="..." value="..."/&gt; in XML. Expose getProperties(), getProperty(String name) and setProperty(String name, String value) for routes in JMX. Our use case: Add documentation to route in code and show it on a graph of Camel contexts, routes and endpoints in a running system. Graph is generated from JMX data. This would be nice data to show on hawtio as well. Although in this case we might want to use an explicit documentation variable rather than a reserved property name. Route has a properties map but that's used internally. These public properties would be held in a new map: publicProperties.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultRoute.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.RouteDefinition.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.management.ManagedRouteStopAndStartTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultRouteContext.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Route.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.management.mbean.ManagedRoute.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.ProcessorDefinition.java</file></fixedFiles></bug><bug fixdate="2015-03-03 02:03:52" id="8428" opendate="2015-03-03 09:05:35"><buginformation><summary>[CAMEL-8428] Cleanup some core interfaces (Consumer, Producer, EndpointAware) - ASF JIRA</summary><description>org.apache.camel.Consumer and org.apache.camel.Producer interfaces contain this method: Endpoint getEndpoint() But there's also org.apache.camel.EndpointAware for that purpose. Producer extends it (so it's own "getEndpoint()" is duplicate). Consumer could extend this interface too. So, I think we could: remove getEndpoint from both Customer and Producer interfaces change Consumer to extend EndpointAware from dev's POV the only (OO) change would be that Customer will become "endpoint aware"</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.spi.RouteContext.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Consumer.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Producer.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Route.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.EndpointAware.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultConsumer.java</file></fixedFiles></bug><bug fixdate="2015-03-04 07:29:57" id="8421" opendate="2015-03-02 01:21:07"><buginformation><summary>[CAMEL-8421] Add minimum age option to readLock=changed - ASF JIRA</summary><description>I'm a fan of noop=true in file consumers since it means I don't have to worry about how many readers I have and where. But eventually I came across a scenario where current features are not sufficient. Let's say we have a source system which writes files with name &lt;timestamp&gt;_something.xml, and it won't use temp files or .done marker files or anything like that. We want to get the latest file as soon as it's created. Consider the following route: &#13;
from("file:////somewhere/data?noop=true&amp;include=.*_something[.]xml&amp;readLock=changed&amp;sortBy=file:name")&#13;
	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()&#13;
		.to("amq:topic:something");&#13;
 When this route is started it will go through the files in order and get the last one. Then it will wait for new files. This works fine as long as the writer is not "slow". Now, we had cases of incomplete files being read and I was requested to not to read the file before it is 10 minutes old, just in case. If I increase readLockCheckInterval to 10 minutes getting to the latest file at route startup will take close to forever. The current readLock=changed implementation always sleeps for at least one readLockCheckInterval per file. If we had readLockMinAge option to define the minimum age for the target file the consumer could acquire readLock on the first poll and breeze through the files until too young a file is reached. The route below would poll a file every 500ms (default poll delay), while the current readLock=changed would take 1500ms (default poll delay + default readLockCheckInterval) per file. Consumer goes through the files until it hits the end and gets the last one as soon as it becomes old enough. &#13;
from("file:////somewhere/data?noop=true&amp;include=.*_something[.]xml&amp;readLock=changed&amp;readLockMinAge=600000&amp;sortBy=file:name")&#13;
	.aggregate(constant(true), new UseLatestAggregationStrategy()).completionFromBatchConsumer()&#13;
		.to("amq:topic:something");</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.file.GenericFileEndpoint.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeShortCircuitTest.java</file><file>gelog.camel-git.components.camel-ftp.src.main.java.org.apache.camel.component.file.remote.strategy.FtpChangedExclusiveReadLockStrategy.java</file><file>gelog.camel-git.components.camel-ftp.src.main.java.org.apache.camel.component.file.remote.strategy.SftpChangedExclusiveReadLockStrategy.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.file.strategy.FileChangedExclusiveReadLockStrategy.java</file><file>gelog.camel-git.components.camel-ftp.src.test.java.org.apache.camel.component.file.remote.FtpChangedReadLockMinAgeShortCircuitTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.strategy.FileChangedReadLockMinAgeTest.java</file><file>gelog.camel-git.components.camel-ftp.src.test.java.org.apache.camel.component.file.remote.FtpChangedReadLockMinAgeTest.java</file></fixedFiles></bug><bug fixdate="2015-02-28 10:47:04" id="8416" opendate="2015-02-28 10:46:27"><buginformation><summary>[CAMEL-8416] camel-jetty - Allow multiple restrict headers - ASF JIRA</summary><description>The option httpMethodRestrict is currently limited to one method. We should allow multiple separated by comma.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-jetty-common.src.main.java.org.apache.camel.component.jetty.CamelContinuationServlet.java</file></fixedFiles></bug><bug fixdate="2015-02-28 06:42:36" id="8400" opendate="2015-02-24 07:31:39"><buginformation><summary>[CAMEL-8400] camel-mqtt: multiple topic subscriptions - ASF JIRA</summary><description>I'm beginning to work with MQTT brokers, and have found that having an endpoint only able to subscribe to a single topic is limiting. Looking at the code, the underlying implementation (fusesource mqtt-client) accepts an array of Topics when creating a subscription. I have modified the camel-mqtt component to allow for a "subscribeTopicNames" option, which expects a comma-delimited list of topics that will be subscribed. I'm attaching a patch (after creating the issue) that includes additional unit tests for this functionality. It would be really great if this could be accepted before the 2.14.2 release is cut! A couple of notes: If the new "subscribeTopicNames" option is specified, anything specified for the existing "subscribeTopicName" option will be ignored. Long term, it doesn't make sense to maintain both options. Should the singular version be deprecated? If so, I can submit another patch that deprecates that option within the code. I don't know how to submit a "patch" for the component documentation. Here's something that would work: Property Default Description subscribeTopicName   The name of the Topic to subscribe to for messages. Deprecated since 2.14.2 (use subscribeTopicNames instead). subscribeTopicNames   Since Camel 2.14.2. A comma-delimited list of Topics to subscribe to for messages. Note that each item of this list can contain MQTT wildcards ('+' and/or '#'), in order to subscribe to topics matching a certain pattern within a hierarchy. For example, '+' is a wildcard for all topics at a level within the hierarchy, so if a broker has topics "topics/one" and "topics/two", then "topics/+" can be used to subscribe to both. A caveat to consider here is that if the broker adds "topics/three", the route would also begin to receive messages from that topic.</description></buginformation><fixedFiles><file>a.components.camel-mqtt.src.main.java.org.apache.camel.component.mqtt.MQTTConfiguration.java</file><file>gelog.camel-git.components.camel-mqtt.src.test.java.org.apache.camel.component.mqtt.MQTTBaseTest.java</file><file>a.components.camel-mqtt.src.test.java.org.apache.camel.component.mqtt.MQTTConfigurationTest.java</file><file>gelog.camel-git.components.camel-mqtt.src.main.java.org.apache.camel.component.mqtt.MQTTConfiguration.java</file><file>gelog.camel-git.components.camel-mqtt.src.test.java.org.apache.camel.component.mqtt.MQTTConfigurationTest.java</file><file>gelog.camel-git.components.camel-mqtt.src.test.java.org.apache.camel.component.mqtt.MQTTConsumerMultipleTopicsTest.java</file><file>....camel.component.mqtt.MQTTConfiguration.java</file><file>a.components.camel-mqtt.src.main.java.org.apache.camel.component.mqtt.MQTTEndpoint.java</file><file>a.components.camel-mqtt.src.test.java.org.apache.camel.component.mqtt.MQTTBaseTest.java</file><file>gelog.camel-git.components.camel-mqtt.src.main.java.org.apache.camel.component.mqtt.MQTTEndpoint.java</file></fixedFiles></bug><bug fixdate="2015-02-26 12:57:16" id="8399" opendate="2015-02-24 11:50:51"><buginformation><summary>[CAMEL-8399] Support setMode in JsonDataFormat - ASF JIRA</summary><description>CAMEL-7592 introduced the ability to customise the XStream mode, however org.apache.camel.dataformat.xstream.JsonDataFormat#createXStream still sets the mode explicitly to NO_REFERENCES. I think someone just has to update the method to do the following instead: &#13;
                if (getMode() != null) {&#13;
                    xs.setMode(getModeFromString(getMode()));&#13;
                }</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-xstream.src.main.java.org.apache.camel.dataformat.xstream.AbstractXStreamWrapper.java</file><file>gelog.camel-git.components.camel-xstream.src.main.java.org.apache.camel.dataformat.xstream.JsonDataFormat.java</file></fixedFiles></bug><bug fixdate="2015-02-25 03:28:07" id="8394" opendate="2015-02-23 07:12:30"><buginformation><summary>[CAMEL-8394] camel-docker - DockerConfiguration should not keep client state - ASF JIRA</summary><description>The configuration classes should be pure configuration, eg for users to configure options. Any state such as client in use et all should be stored on endpoint or component. eg move the options from DockerClientProfile to DockerConfiguration so there is only 1 class. And move the map with DockerClient to the component.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerClientProfile.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.producer.DockerProducer.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerClientFactory.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.BaseDockerHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.DockerClientProfileRegistryTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerComponent.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerConfiguration.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.consumer.DockerEventsConsumer.java</file></fixedFiles></bug><bug fixdate="2015-02-22 09:26:55" id="8389" opendate="2015-02-22 07:21:49"><buginformation><summary>[CAMEL-8389] camel-jackson - Allow to configure jackson object mapper from XML DSL - ASF JIRA</summary><description>We should make it easier to configure jackson as a &lt;dataFormat&gt; using the XML DSL. Its ObjectMapper has a fluent builder using with and without to turn things on or off. We would need some kind of mapping to this from the XML DSL, so end users can configure this.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.dataformat.JsonDataFormat.java</file><file>gelog.camel-git.components.camel-jackson.src.main.java.org.apache.camel.component.jackson.JacksonDataFormat.java</file><file>gelog.camel-git.components.camel-jackson.src.test.java.org.apache.camel.component.jackson.SpringJacksonEnableFeatureTest.java</file></fixedFiles></bug><bug fixdate="2015-02-22 09:50:27" id="8387" opendate="2015-02-21 05:39:06"><buginformation><summary>[CAMEL-8387] File consumer fails to acquire lock if readLockTimeout &gt;= readLockCheckInterval - ASF JIRA</summary><description>If the readLockCheckInterval is greater than or equal to readLockTimeout when using readLock=changed, the consumer never picks up any files. So this URI will triggers the behaviour: file:some-folder?readLock=changed&amp;readLockCheckInterval=1000&amp;readLockTimeout=500 The problem is that FileChangedExclusiveReadLockStrategy only takes readLockTimeout into account. 1. FileChangedExclusiveReadLockStrategy get the last modified and size of the file. 2. It sleeps for the duration configured in readLockCheckInterval 3. Now the timeout configured in readLockTimeout is exceeded, so FileChangedExclusiveReadLockStrategy logs "Cannot acquire read lock within.." and returns false</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.file.GenericFileEndpoint.java</file></fixedFiles></bug><bug fixdate="2015-02-22 03:12:24" id="8386" opendate="2015-02-21 03:06:44"><buginformation><summary>[CAMEL-8386] Wiretap - Should copy stream cache when tapping - ASF JIRA</summary><description>Related to CAMEL-8284.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.MulticastStreamCachingTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.processor.WireTapProcessor.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.WireTapStreamCachingTest.java</file></fixedFiles></bug><bug fixdate="2015-03-01 08:24:34" id="8383" opendate="2015-02-20 12:23:48"><buginformation><summary>[CAMEL-8383] CXFRS Consumer processors should be able to use JAX-RS contexts - ASF JIRA</summary><description>CXFRS consumer processors should be able to use JAX-RS Contexts, for example, instead of &#13;
String path = exchange.getIn().getHeader(Exchange.HTTP_PATH, String.class);&#13;
if (path.equals("/customers")) {&#13;
//...&#13;
} &#13;
 do something like &#13;
javax.ws.rs.core.UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class);&#13;
if (ui.getPath().equals("/customers")) {&#13;
//...&#13;
} &#13;
 This will make the processor code more JAX-RS friendly. Besides UriInfo, Request, HttpHeaders and other JAX-RS contexts offer a lot of utility methods for simplifying managing an HTTP request</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-cxf.src.main.java.org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.java</file><file>gelog.camel-git.components.camel-cxf.src.test.java.org.apache.camel.component.cxf.jaxrs.CxfRsConsumerTest.java</file><file>gelog.camel-git.components.camel-cxf.src.main.java.org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.java</file></fixedFiles></bug><bug fixdate="2015-02-19 07:13:00" id="8375" opendate="2015-02-19 06:27:43"><buginformation><summary>[CAMEL-8375] activity task thread pool is not configurable - ASF JIRA</summary><description>The aws-swf component doesn't support a way to configure the activity thread pool size. By default, the aws-sdk's activity task thread pool is 100 threads – which is way too high for cpu-intensive activities. Here's a PR: https://github.com/apache/camel/pull/399 that adds SWFConfiguration.activityThreadPoolSize Please let me know if there are changes you need to facilitate the merge.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-aws.src.main.java.org.apache.camel.component.aws.swf.SWFConfiguration.java</file></fixedFiles></bug><bug fixdate="2015-02-20 02:42:22" id="8372" opendate="2015-02-18 01:57:39"><buginformation><summary>[CAMEL-8372] CXFRS consumer should use a default handler if a model resource has no registered handler - ASF JIRA</summary><description>This is the first step toward supporting CXFRS consumers with only the model information available (CXF Model extensions but also other sources/description languages in the future)</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-cxf.src.main.java.org.apache.camel.component.cxf.jaxrs.DefaultModelResource.java</file><file>gelog.camel-git.components.camel-cxf.src.test.java.org.apache.camel.component.cxf.jaxrs.CxfRsConsumerTest.java</file><file>gelog.camel-git.components.camel-cxf.src.main.java.org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.java</file></fixedFiles></bug><bug fixdate="2015-02-23 07:10:39" id="8371" opendate="2015-02-18 07:01:40"><buginformation><summary>[CAMEL-8371] Update Camel Docker Component to support docker-java version 0.10.5 - ASF JIRA</summary><description>Update Camel Docker component to support underlying docker-java library version 0.10.5</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.AttachContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.CreateImageCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.TagImageCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.CopyFileContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.ssl.NoImplSslConfig.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerClientProfile.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.BuildImageCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.InspectImageCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerClientFactory.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.BaseDockerHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.DockerClientProfileRegistryTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.DiffContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.producer.DockerProducer.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.CommitContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.ExecCreateCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.InfoCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.StartContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerOperation.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.ExecStartCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.AuthCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerComponent.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerConstants.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.PushImageCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.KillContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.ListImagesCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.LogContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.ListContainersCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.RemoveContainerCmdHeaderTest.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerHelper.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.DockerConfiguration.java</file><file>gelog.camel-git.components.camel-docker.src.main.java.org.apache.camel.component.docker.consumer.DockerEventsConsumer.java</file><file>gelog.camel-git.components.camel-docker.src.test.java.org.apache.camel.component.docker.headers.CreateContainerCmdHeaderTest.java</file></fixedFiles></bug><bug fixdate="2015-02-18 07:19:45" id="8366" opendate="2015-02-17 09:46:25"><buginformation><summary>[CAMEL-8366] Close used iterator if RuntimeException is thrown at next()/hasNext() in Splitter - ASF JIRA</summary><description>There're some spots using user provided iterator but don't close them if RuntimeException is thrown during iteration even if it's Closeable . It would be convenient if it is closed in finally block. I immediately found 2, guessing there're some more else: https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/Splitter.java#L232-L234 https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java#L267-L347</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.issues.SplitterUsingBeanReturningCloseableIteratorTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.processor.Splitter.java</file></fixedFiles></bug><bug fixdate="2015-02-14 01:35:59" id="8354" opendate="2015-02-14 08:44:27"><buginformation><summary>[CAMEL-8354] Bean component - Should not support consumer - ASF JIRA</summary><description>The bean component should be a producer only, which makes most sence, eg to call a bean by sending a message to it, where the message is data for the bean parameters. We should remove support for consumer, which was not intended but was possible due its use of ProcessorEndpoint and being based on old stuff from 1.x days. The bean component should also be more aligned like the other components and how it setup and initializes itself, using doStart / doStop as others do.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.beanclass.ClassComponent.java</file><file>gelog.camel-git.components.camel-http4.src.main.java.org.apache.camel.component.http4.HttpEndpoint.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.BeanConsumerShutdownTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.BeanComponentCustomCreateEndpointTest.java</file><file>gelog.camel-git.components.camel-http.src.main.java.org.apache.camel.component.http.HttpEndpoint.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.BeanConsumerTemplateTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.BridgeMethodTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.SendBodyToBeanDirectlyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.ScheduledPollEndpoint.java</file><file>gelog.camel-git.components.camel-spring.src.test.java.org.apache.camel.component.bean.BeanRouteUsingSpringEndpointTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.bean.FromBeanTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.bean.BeanComponent.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.bean.BeanEndpoint.java</file><file>gelog.camel-git.components.camel-jms.src.test.java.org.apache.camel.component.jms.discovery.JmsDiscoveryTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.bean.BeanProducer.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.BeanMethodHeartbeatTest.java</file><file>gelog.camel-git.components.camel-ejb.src.main.java.org.apache.camel.component.ejb.EjbComponent.java</file></fixedFiles></bug><bug fixdate="2015-02-26 09:15:38" id="8349" opendate="2015-02-13 09:51:55"><buginformation><summary>[CAMEL-8349] Context should be started with defined TCCL - ASF JIRA</summary><description>During CamelContext.start() we may call into various 3rd party modules that rely on resource discovery through TCCL. Therefore, we should provide a well defined value for TCCL during context start. In the WildFly integration layer I attempted to do this using events. This approach is flawed however because there is no guarantee of event delivery. Conceptually, the requirement for a certain TCCL by 3rd party should not leak into client code. Instead, camel should be dealing with these TCCL requirements and provide client code a way to defined the ClassLoader associated with the context. the role of which is the ApplicationClassLoader. I therefore propose setting the TCCL to the ApplicationClassLoader (if there is one) just before we call into doStart()</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultCamelContext.java</file></fixedFiles></bug><bug fixdate="2015-02-12 03:05:25" id="8343" opendate="2015-02-12 02:07:01"><buginformation><summary>[CAMEL-8343] Migrate the two pax osgi components to be like the others - ASF JIRA</summary><description>They use custom activator which is not needed.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-paxlogging.src.main.java.org.apache.camel.component.paxlogging.Activator.java</file><file>gelog.camel-git.components.camel-eventadmin.src.main.java.org.apache.camel.component.eventadmin.EventAdminServiceFactory.java</file><file>gelog.camel-git.components.camel-eventadmin.src.main.java.org.apache.camel.component.eventadmin.EventAdminComponentResolver.java</file><file>gelog.camel-git.components.camel-paxlogging.src.main.java.org.apache.camel.component.paxlogging.PaxLoggingServiceFactory.java</file><file>gelog.camel-git.tests.camel-itest-karaf.src.test.java.org.apache.camel.itest.karaf.CamelPaxloggingTest.java</file><file>gelog.camel-git.components.camel-eventadmin.src.main.java.org.apache.camel.component.eventadmin.EventAdminConsumer.java</file><file>gelog.camel-git.components.camel-paxlogging.src.main.java.org.apache.camel.component.paxlogging.PaxLoggingComponent.java</file><file>gelog.camel-git.tests.camel-itest-karaf.src.test.java.org.apache.camel.itest.karaf.CamelEventadminTest.java</file><file>gelog.camel-git.components.camel-paxlogging.src.main.java.org.apache.camel.component.paxlogging.PaxLoggingComponentResolver.java</file><file>gelog.camel-git.components.camel-eventadmin.src.main.java.org.apache.camel.component.eventadmin.EventAdminComponent.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.osgi.Activator.java</file><file>gelog.camel-git.components.camel-eventadmin.src.main.java.org.apache.camel.component.eventadmin.Activator.java</file></fixedFiles></bug><bug fixdate="2015-02-10 01:46:19" id="8330" opendate="2015-02-10 01:11:21"><buginformation><summary>[CAMEL-8330] camel-jms - Use 1000 as default receiveTimeout - ASF JIRA</summary><description>The receiveTimeout documentation is a bit confusing as it says None. But we use the spring-jms default value of 1000. We should set it to explicit 1000 like the others. And we should not set receiveTimeout in the JmsTemplate that we are using for sending messages, as we do not us its receive method.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-jms.src.test.java.org.apache.camel.component.jms.JmsEndpointConfigurationTest.java</file><file>gelog.camel-git.components.camel-jms.src.main.java.org.apache.camel.component.jms.JmsPollingConsumer.java</file><file>gelog.camel-git.components.camel-jms.src.main.java.org.apache.camel.component.jms.JmsConfiguration.java</file></fixedFiles></bug><bug fixdate="2015-02-09 07:34:00" id="8324" opendate="2015-02-09 07:27:27"><buginformation><summary>[CAMEL-8324] Camel JMX - Allow to configure default management name pattern using JVM system property - ASF JIRA</summary><description>Currently it is not possible to define ManagementNamingStrategy globally through JVM system property for all deployed camel context. Instead, it can only be configured on each camel context. For instance, the following "managementNamePattern" parameter has to be added to all camel contexts. &#13;
managementNamePattern="#symbolicName#" &#13;
 It would be a nice feature to set default "managementNamePattern" using JVM system property for all camel contexts where no managementNamePattern is configured. Considering that there are already JVM system property exists for default domain and turning on/off camel JMX etc.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.management.JmxSystemPropertyKeys.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.management.ManagedNamePatternJvmSystemPropertyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.impl.DefaultManagementNameStrategy.java</file></fixedFiles></bug><bug fixdate="2015-02-18 01:45:56" id="8321" opendate="2015-02-06 11:28:52"><buginformation><summary>[CAMEL-8321] camel-box - Do not use dot in header keys - ASF JIRA</summary><description>This is standard Camel that header keys never has dots as that dont work well with various components such as jms and whatnot.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-box.src.main.java.org.apache.camel.component.box.BoxConverter.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.util.component.ApiMethodPropertiesHelper.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.util.component.ApiMethodPropertiesHelperTest.java</file></fixedFiles></bug><bug fixdate="2015-02-05 02:55:57" id="8316" opendate="2015-02-05 08:56:37"><buginformation><summary>[CAMEL-8316] Rename property language to exchangeProperty - ASF JIRA</summary><description>Using the generic name property is unfortunate as it causes clash in XML DSL and also confusion about property placeholders etc. Also this language is less in use, as more often people use simple language which is more powerful with predicates and expressions around exchange properties / message headers / bodies etc. See also CAMEL-7094 as a side effect of this naming clash.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.config.PropertyDefinition.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.util.URISupportTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.RecipientListNoErrorHandlerTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.FilterNotTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.ConvertBodyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.language.property.ExchangePropertyLanguage.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.ExpressionClauseSupport.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.language.ExchangePropertyExpression.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.SendToNoErrorHandlerTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.config.PropertiesDefinition.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.async.AsyncEndpointFailedAfterOnExceptionContinueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.issues.TryCatchWithSplitNotHandledIssueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.FilterTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.enricher.EnricherTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.ExpressionBuilder.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.issues.TryCatchWithSplitIssueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.TryCatchContinueToRouteTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.PropertiesDefinition.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionContinueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.issues.MockValueBuilderIssueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.issues.SplitStopOnExceptionIssueTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.RecipientListWithStringDelimitedPropertyTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.util.toolbox.FlexibleAggregationStrategiesTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.mock.MockEndpointTimeClauseTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.ExchangeProperty.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.BeanWithExceptionTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.language.PropertyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.BuilderSupport.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.ToEndpointPropertyTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.RoutingSlipNoErrorHandlerTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.Builder.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionContinueTwoTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.OnExceptionContinueToRouteTest.java</file><file>gelog.camel-git.components.camel-jaxb.src.test.java.org.apache.camel.jaxb.JaxbDataFormatMustBeJAXBElementTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.language.property.PropertyLanguage.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.interceptor.AdviceWithTwoRoutesOnExceptionTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.TryCatchRecipientListTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.aggregator.AggregateCompletionSizeAndBatchConsumerTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionContinueSubSubRouteTest.java</file><file>gelog.camel-git.components.camel-core-xml.src.main.java.org.apache.camel.core.xml.AbstractCamelContextFactoryBean.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.MulticastCompletedPropertyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.language.simple.ast.SimpleFunctionExpression.java</file><file>gelog.camel-git.components.camel-blueprint.src.main.java.org.apache.camel.blueprint.CamelContextFactoryBean.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.BodyInAggregatingStrategy.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.dataformat.JaxbDataFormat.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.Property.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionHandledTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.DeadLetterChannelExceptionCausePropagatedTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.util.URISupport.java</file><file>gelog.camel-git.components.camel-jaxb.src.main.java.org.apache.camel.converter.jaxb.JaxbDataFormat.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.rest.RestBindingDefinition.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionContinueSubRouteTest.java</file><file>gelog.camel-git.components.camel-restlet.src.test.java.org.apache.camel.component.restlet.RestRestletBindingInJaxbOutStringWithXmlTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.RecipientListExchangePropertyTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.ExpressionClause.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.bean.BeanInfo.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.FilterNotMatchedTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.IdempotentConsumerTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionWithRouteAndContinueTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.PropertyDefinition.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.language.HeaderExpression.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.FileConsumeMaxMessagesPerPollTest.java</file><file>gelog.camel-git.components.camel-spring.src.main.java.org.apache.camel.spring.CamelContextFactoryBean.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.component.file.FileConsumerBatchTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.model.language.PropertyExpression.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.SplitterCompletedPropertyTest.java</file><file>gelog.camel-git.components.camel-core-xml.src.main.java.org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.onexception.OnExceptionUseOriginalMessageTest.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.SplitterPropertyContinuedTest.java</file><file>gelog.camel-git.components.camel-spring.src.test.java.org.apache.camel.spring.processor.SpringIdempotentConsumerNoSkipDuplicateFilterTest.java</file></fixedFiles></bug><bug fixdate="2015-03-02 12:01:31" id="8312" opendate="2015-02-04 07:25:25"><buginformation><summary>[CAMEL-8312] XML External Entity (XXE) issue in XPath - ASF JIRA</summary><description>If the documentType of an XPath expression is set to a class for that no type converter exists and the data to which the expression is applied is of type WrappedFile or String the XPath will seem to work anyway. However this setup will create issues by using an InputSource created from the String or Generic file.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.builder.xml.XPathFeatureTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.builder.xml.XPathBuilder.java</file><file>gelog.camel-git.components.camel-saxon.src.test.java.org.apache.camel.component.xslt.SaxonXsltDTDTest.java</file></fixedFiles></bug><bug fixdate="2015-02-22 03:28:31" id="8310" opendate="2015-02-03 06:00:21"><buginformation><summary>[CAMEL-8310] RabbitMQConsumer has hard coded requeue flag set to false - ASF JIRA</summary><description>Current implementation has requeue is set to false that means there is no way for me to put back message in the queue if its one of the downstream system is down</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-rabbitmq.src.test.java.org.apache.camel.component.rabbitmq.RabbitMQRequeueIntTest.java</file></fixedFiles></bug><bug fixdate="2015-02-04 06:52:33" id="8309" opendate="2015-02-02 06:42:29"><buginformation><summary>[CAMEL-8309] Camel XML DSL - Allow to specify uri attributes in multi lines to make long urs easier to read and maintain - ASF JIRA</summary><description>If you have very long uris in routes, then in Java DSL you can just split the code into new lines, as its just Java code. But in XML you cannot do that. So we should allow the uri attribute to have new lines, and then when parsing the CamelContext we remove those whitespace noise, so the uri is one line. The parser does this partly when you obtain the attribute. All new lines, tabs etc is represented as a space. But then the url has double spaces, we need to trim, in the parser. You will still have to use &amp; to separate the options though Here is a very little example with only 2 options, but just imagine if the url was longer &#13;
        &lt;route&gt;&#13;
            &lt;from uri="direct:start"/&gt;&#13;
            &lt;to uri="seda:bar?timeout=10000&#13;
              &amp;amp;blockWhenFull=true"/&gt;&#13;
        &lt;/route&gt;&#13;
&#13;
        &lt;route&gt;&#13;
            &lt;from uri="seda:bar?&#13;
              timeout=10000&amp;amp;&#13;
              blockWhenFull=true"/&gt;&#13;
            &lt;to uri="mock:bar"/&gt;&#13;
        &lt;/route&gt;</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-blueprint.src.main.java.org.apache.camel.blueprint.handler.CamelNamespaceHandler.java</file><file>gelog.camel-git.components.camel-blueprint.src.test.java.org.apache.camel.blueprint.BlueprintJaxbTest.java</file><file>gelog.camel-git.components.camel-spring.src.test.java.org.apache.camel.component.properties.SpringAttributeNewLineRouteContextRefTest.java</file><file>gelog.camel-git.components.camel-blueprint.src.test.java.org.apache.camel.blueprint.BlueprintJaxbRestTest.java</file><file>gelog.camel-git.components.camel-spring.src.main.java.org.apache.camel.spring.handler.CamelNamespaceHandler.java</file><file>gelog.camel-git.components.camel-test-blueprint.src.test.java.org.apache.camel.test.blueprint.AttributeNewLineTest.java</file><file>gelog.camel-git.components.camel-spring.src.test.java.org.apache.camel.component.properties.SpringAttributeNewLineTest.java</file></fixedFiles></bug><bug fixdate="2015-02-02 05:47:22" id="8307" opendate="2015-02-02 03:42:53"><buginformation><summary>[CAMEL-8307] Properties are loaded only from the first source if whitespaces are used in propertyPlaceholder#location - ASF JIRA</summary><description>When whitespaces or newlines are used in location attribute of propertyPlaceholder (XML): &#13;
&lt;propertyPlaceholder id="camelPropertyPlaceholderConfigurer"&#13;
    location="classpath:a/b/c/environments/base.properties,&#13;
              classpath:a/b/c/environments/${env:ENV}/env.properties,&#13;
              classpath:a/b/c/environments/${ENV}/env.properties"&#13;
    ignoreMissingLocation="true"/&gt;&#13;
 , the properties are loaded only from the first source (base.properties) in this case. The problem may be in org.apache.camel.component.properties.DefaultPropertiesResolver#loadPropertiesFromClasspath: &#13;
    protected Properties loadPropertiesFromClasspath(CamelContext context, boolean ignoreMissingLocation, String path) throws IOException {&#13;
        Properties answer = new Properties();&#13;
&#13;
        if (path.startsWith("classpath:")) {&#13;
            path = ObjectHelper.after(path, "classpath:");&#13;
        }&#13;
&#13;
        InputStream is = context.getClassResolver().loadResourceAsStream(path);&#13;
        if (is == null) {&#13;
           ...&#13;
        } else {...}&#13;
&#13;
        return answer;&#13;
    }&#13;
 startsWith returns false as the path are splitted around ,. Trimming the path somewhere around those calls may help.</description></buginformation><fixedFiles><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.component.properties.PropertiesComponent.java</file></fixedFiles></bug><bug fixdate="2015-02-10 05:56:21" id="8299" opendate="2015-01-30 03:44:15"><buginformation><summary>[CAMEL-8299] Let BulkRequest return the whole BulkResponse - ASF JIRA</summary><description>"I found out that I needed to get more information from the bulk-request result. elasticsearch provides the BulkResponse with the full info. returning the full BulkResponse allows the caller to tell the reason of index failures and more." Here is the PR for it.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-elasticsearch.src.test.java.org.apache.camel.component.elasticsearch.ElasticsearchComponentTest.java</file><file>gelog.camel-git.components.camel-elasticsearch.src.main.java.org.apache.camel.component.elasticsearch.ElasticsearchProducer.java</file><file>gelog.camel-git.components.camel-elasticsearch.src.main.java.org.apache.camel.component.elasticsearch.ElasticsearchConfiguration.java</file></fixedFiles></bug><bug fixdate="2015-01-30 03:35:40" id="8298" opendate="2015-01-30 03:33:10"><buginformation><summary>[CAMEL-8298] Remove the spring-test dependency from camel-spring-javaconfig - ASF JIRA</summary><description>We got a PR which need to remove the deprecated class JavaConfigContextLoader at the same time.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-spring-javaconfig.src.main.java.org.apache.camel.spring.javaconfig.test.JavaConfigContextLoader.java</file><file>gelog.camel-git.components.camel-jaxb.src.test.java.org.apache.camel.jaxb.JaxbDataFormatIssueUsingSpringJavaConfigTest.java</file></fixedFiles></bug><bug fixdate="2015-02-11 05:52:20" id="8288" opendate="2015-01-27 11:10:32"><buginformation><summary>[CAMEL-8288] Attach Lucene Documents to the Results(Hits) if header contains RETURN_LUCENE_DOCS=true - ASF JIRA</summary><description>Current Hits result only contains the lucene docId, score and assuming there will be a field with the name "contents". This feature will allow specifying a new header value &#13;
 .setHeader("RETURN_LUCENE_DOCS",constant("true"))&#13;
 and return the actual lucene documents part of the Hits for further processing. This will allow us to retrieve any field from the actual lucene document. Both Lucene component and LuceneQueryProcessor should support this new header.</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-lucene.src.main.java.org.apache.camel.component.lucene.LuceneSearcher.java</file><file>gelog.camel-git.components.camel-lucene.src.main.java.org.apache.camel.processor.lucene.support.Hit.java</file><file>gelog.camel-git.components.camel-lucene.src.main.java.org.apache.camel.component.lucene.LuceneQueryProducer.java</file><file>gelog.camel-git.components.camel-lucene.src.test.java.org.apache.camel.component.lucene.LuceneIndexAndQueryProducerTest.java</file><file>gelog.camel-git.components.camel-lucene.src.main.java.org.apache.camel.processor.lucene.LuceneQueryProcessor.java</file></fixedFiles></bug><bug fixdate="2015-02-21 03:06:06" id="8284" opendate="2015-01-27 07:51:37"><buginformation><summary>[CAMEL-8284] MultiCast in Parallel Processing Mode with StreamCache leads to wrong results - ASF JIRA</summary><description>If the multi-cast processor gets as an input a stream cache in the parallel processing mode, then the stream is read by different threads concurrently. This leads to wrong results. The attached patch solves this issue. The idea of the patch is to provide a copy of the stream cache to each thread. The copy will use the same cache of the original stream cache, only the stream which accesses the cached data will be a separate instance. For this, we introduced the new method copy() in the StreamCache class. See also discussion in http://camel.465427.n5.nabble.com/Data-Corruption-in-SFTP-in-Parallel-Multicast-branches-td5761673.html#a5761781 Franz Forsthofer SAP SE e-mail: franz.forsthofer[at]sap.com</description></buginformation><fixedFiles><file>....main.java.org.apache.camel.StreamCache.java</file><file>....apache.camel.ParallelProcessableStream.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.StreamSourceCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.FileInputStreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.StreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.SourceCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.FileInputStreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.CachedOutputStream.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.StreamCache.java</file><file>a.components.camel-netty4-http.src.main.java.org.apache.camel.component.netty4.http.NettyChannelBufferStreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.InputStreamCache.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.processor.MultiCastParallelAndStreamCachingTest.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.ReaderCache.java</file><file>gelog.camel-git.camel-core.src.test.java.org.apache.camel.util.MessageHelperTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.SourceCache.java</file><file>a.camel-core.src.test.java.org.apache.camel.util.MessageHelperTest.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.ParallelProcessableStream.java</file><file>gelog.camel-git.components.camel-netty-http.src.main.java.org.apache.camel.component.netty.http.NettyChannelBufferStreamCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.ReaderCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.InputStreamCache.java</file><file>....camel.component.netty.http.NettyChannelBufferStreamCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.ByteArrayInputStreamCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.StreamSourceCache.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.processor.MulticastProcessor.java</file><file>gelog.camel-git.camel-core.src.main.java.org.apache.camel.converter.stream.CachedOutputStream.java</file><file>a.components.camel-netty-http.src.main.java.org.apache.camel.component.netty.http.NettyChannelBufferStreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.converter.stream.ByteArrayInputStreamCache.java</file><file>a.camel-core.src.main.java.org.apache.camel.processor.MulticastProcessor.java</file><file>gelog.camel-git.components.camel-netty4-http.src.main.java.org.apache.camel.component.netty4.http.NettyChannelBufferStreamCache.java</file></fixedFiles></bug><bug fixdate="2015-01-26 01:54:58" id="8279" opendate="2015-01-25 06:59:35"><buginformation><summary>[CAMEL-8279] ZipAggregationStrategy fails when used in multicast - ASF JIRA</summary><description>When aggregating byte arrays using a zipaggregationstrategy within a multicast the messageid will be the same resulting in an error because the filename will be duplicate</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-zipfile.src.test.java.org.apache.camel.processor.aggregate.zipfile.AggregationStrategyWithPreservationTest.java</file><file>gelog.camel-git.components.camel-zipfile.src.main.java.org.apache.camel.processor.aggregate.zipfile.ZipAggregationStrategy.java</file><file>gelog.camel-git.components.camel-zipfile.src.test.java.org.apache.camel.processor.aggregate.zipfile.AggregationStrategyWithFilenameHeaderTest.java</file></fixedFiles></bug><bug fixdate="2015-02-12 06:25:24" id="8277" opendate="2015-01-23 05:59:07"><buginformation><summary>[CAMEL-8277] camel-hbase - Provide a row prefix filter for the scan method - ASF JIRA</summary><description>It can be useful to perform some scan requests based on a HBase row prefix filter. A "ModelAwareRowPrefixMatchingFilter" filter could be added to the existing set of available filters.</description></buginformation><fixedFiles><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseRow.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseCell.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.mapping.HeaderMappingStrategy.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseConstants.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseProducer.java</file></fixedFiles></bug><bug fixdate="2015-02-12 06:25:46" id="8276" opendate="2015-01-23 05:52:48"><buginformation><summary>[CAMEL-8276] camel-hbase - Add timestamp on returned HBase objects - ASF JIRA</summary><description>The returned objects for scan / get methods does not contains the HBase timestamp. A timestamp field could be added on HBaseRow/HBaseCell classes to allow to get access to timestamps in mapping strategies / routes.</description></buginformation><fixedFiles><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseRow.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseCell.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.mapping.HeaderMappingStrategy.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseConstants.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseProducer.java</file></fixedFiles></bug><bug fixdate="2015-02-12 06:26:09" id="8275" opendate="2015-01-23 05:47:58"><buginformation><summary>[CAMEL-8275] camel-hbase - Propagation of in message headers - ASF JIRA</summary><description>By default, the input exchange message headers are not propagated when the get/scan method is called. It is not convenient in routes if you want to call others endpoints after the hbase enpoint. Instead of extending the HeaderMappingStrategy or implementing your own strategy, the HeaderMappingStrategy should propagates input message headers.</description></buginformation><fixedFiles><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseRow.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.model.HBaseCell.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.mapping.HeaderMappingStrategy.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseConstants.java</file><file>a.components.camel-hbase.src.main.java.org.apache.camel.component.hbase.HBaseProducer.java</file></fixedFiles></bug><bug fixdate="2015-01-25 11:48:33" id="8267" opendate="2015-01-23 02:15:25"><buginformation><summary>[CAMEL-8267] Allow to configure Salesforce URL when creating DTOs via camel-salesforce-maven-plugin - ASF JIRA</summary><description>When trying to generate DTOs for Salesforce, it is useful to allow using a different environment that production Salesforce. Currently the plugin does not allow to use a different URL, it always connect to https://login.salesforce.com. Suggestion is to add an extra parameter, camelSalesforce.loginUrl, that still uses the same URL as default value, but opens up the possibility to use a different url like https://test.salesforce.com/</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-maven-plugin.src.main.java.org.apache.camel.maven.CamelSalesforceMojo.java</file><file>gelog.camel-git.components.camel-salesforce.camel-salesforce-maven-plugin.src.test.java.org.apache.camel.maven.CamelSalesforceMojoIntegrationTest.java</file></fixedFiles></bug><bug fixdate="2015-01-25 11:41:21" id="8266" opendate="2015-01-22 10:08:18"><buginformation><summary>[CAMEL-8266] [camel-sftp] Allow directories which are un-readable to be ignored on permission error - ASF JIRA</summary><description>When reading from SFTP server recursively it is possible that we read a directory that are not having permission to be read. Specifically, lost+found directory created by the OS with root permission. We should be able to ignore these kind of errors. I can fix this and submit patch but would need guidance towards the better approach: 1. Re-use IgnoreFileNotFoundOrPermissionError flag and extend its functionality 2. Add a new flag to ignore these errors I think the first approach is better as I consider directories to be also a special type of files. I can work on this if you let me know which way to go from someone in Apache Camel team. Thanks, Shreyas Purohit</description></buginformation><fixedFiles><file>gelog.camel-git.components.camel-ftp.src.test.java.org.apache.camel.component.file.remote.RemoteFileIgnoreDoPollErrorTest.java</file><file>gelog.camel-git.components.camel-ftp.src.main.java.org.apache.camel.component.file.remote.RemoteFileConsumer.java</file><file>gelog.camel-git.components.camel-ftp.src.main.java.org.apache.camel.component.file.remote.FtpConsumer.java</file><file>gelog.camel-git.components.camel-ftp.src.main.java.org.apache.camel.component.file.remote.SftpConsumer.java</file></fixedFiles></bug></bugrepository>