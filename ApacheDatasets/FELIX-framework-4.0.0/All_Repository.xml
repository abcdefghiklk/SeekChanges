<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2011-09-12 10:44:23" id="3096" opendate="2011-08-31 07:36:24"><buginformation><summary>[FELIX-3096] Could not add FrameworkListener from ServiceListener - ASF JIRA</summary><description>It's now impossible to add a FrameworkListener from ServiceListener in 3.2.x, worked in 3.0.9. The code below hangs in addFrameworkListener when it tries to acquire a global lock on the framework bundle. Framework framework = ... framework.init(); final BundleContext ctx = framework.getBundleContext(); ctx.addServiceListener(new ServiceListener() { public void serviceChanged(ServiceEvent event) { if (...) { ctx.addFrameworkListener(new FrameworkListener() { public void frameworkEvent(FrameworkEvent event) { System.out.println(event); } }); } } }); StartLevel sl = (StartLevel) ctx.getService(ctx.getServiceReference(StartLevel.class.getName())); // Install bundles, set start level. ... framework.start(); framework.waitForStop();</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file></fixedFiles></bug><bug fixdate="2011-08-31 07:21:56" id="3085" opendate="2011-08-25 12:59:40"><buginformation><summary>[FELIX-3085] Importing/exporting "." should not be allowed - ASF JIRA</summary><description>In the Equinox implementation of OSGi, importing and exporting the default package (".") is allowed, whereas it fails to produce the expected results under Apache Felix.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file></fixedFiles></bug><bug fixdate="2011-08-25 08:40:47" id="3082" opendate="2011-08-24 03:13:00"><buginformation><summary>[FELIX-3082] [Framework] Bundles not allowed to add listeners while in STOPPING state - ASF JIRA</summary><description>In framework 3.2.0 we tried to fix a race condition where bundles could continue to add listeners even after they had been stopped ( FELIX-2748). As part of that fix, we made it so that bundles could no longer add listeners while in the STOPPING state, which is too restrictive from a spec point of view. We need to allow this again, but make sure we don't reintroduce the original issue we were trying to fix.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file></fixedFiles></bug><bug fixdate="2011-07-30 04:50:01" id="3062" opendate="2011-07-30 04:48:31"><buginformation><summary>[FELIX-3062] [Framework] Resolver gets into infinite loop in the face of a require-bundle cycle - ASF JIRA</summary><description>When calculating the package space for a given bundle revision, if that revision requires a bundle that in turn requires it (i.e., create a cycle), then package space calculation gets stuck in an infinite loop. We need to add a cycle check in the this case.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-11 04:37:28" id="3059" opendate="2011-07-27 09:55:29"><buginformation><summary>[FELIX-3059] Reexported packages are not calculate correctly leading to resolver and class loading bugs - ASF JIRA</summary><description>As described in http://www.mail-archive.com/users@felix.apache.org/msg10677.html [1], Require-Bundle with visibility:=reexport does not work transitively in Felix 3.2.2 (cannot comment wrt. other versions, only tested this one). Similar issue with Felix M2 plugin described in http://www.mail-archive.com/felix-dev@incubator.apache.org/msg02622.html. See attached zip for an example consisting of 4 bundles as described in [1]. Example works in Equinox, fails to load a.One in Felix 3.2.2.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-15 02:03:58" id="3043" opendate="2011-07-15 05:51:49"><buginformation><summary>[FELIX-3043] [Framework] Resolver is not correctly resolving fragments in all cases - ASF JIRA</summary><description>The algorithm to merge fragments into hosts is not always correct when merging fragments into multiple hosts when there are dependencies among the resulting merged hosts. The current algorithm needs to be modified to keep the dependents list up to date in Candidates so that every merged cap/req gets replaced by the corresponding wrapped cap/req from the synthesized merged host module.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Candidates.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedCapability.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedRequirement.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file></fixedFiles></bug><bug fixdate="2011-07-11 09:17:02" id="3033" opendate="2011-07-11 07:22:19"><buginformation><summary>[FELIX-3033] [Framework] Service registry hooks are not correctly filtering bundle contexts for event hook - ASF JIRA</summary><description>When calling out to service registry EventHooks, the collection of bundle contexts is being treated as a list with duplicates when it should be treated as a set without duplicates. The end result being, if a hook removes a bundle context from the set, then it effectively filters all listeners from that bundle context. The current implementation allows a hook to remove a single listener, which is not correct.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherListenerWrapperTest.java</file></fixedFiles></bug><bug fixdate="2011-06-10 04:19:37" id="2990" opendate="2011-06-10 03:12:07"><buginformation><summary>[FELIX-2990] [Framework] Bug introduced into handling of native libraries during a fresh - ASF JIRA</summary><description>In FELIX-2560 we modified how we handled module identifiers to allow bundle resource URLs to survive a refresh. These changes introduced a potential bug for native library handling by not always re-naming the revision directory when refreshing a bundle. Thus, it is possible that bundles with native libraries won't be able to link the the native library after refresh since the path to the native library doesn't change. This only impacts refreshing a bundle that hasn't been updated (i.e., only has a single revision), updated bundles are refresh correctly.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchive.java</file></fixedFiles></bug><bug fixdate="2011-08-30 04:47:45" id="2762" opendate="2011-01-04 06:42:15"><buginformation><summary>[FELIX-2762] Substring parser incorrectly disallowing use of parentheses characters - ASF JIRA</summary><description>When a bundle is trying to load a class with a classname that contains a perenthesis felix is throwing an IllegalArgumentException. Now usually the bundle trying to load the class would catch a "ClassNotFoundException". Other classLoaders (or at least sun.misc.Launcher.AppClassLoader) are throwing a ClassNotFoundException if the classname contains a parenthesis. Even if it's illegal to have parentheses in classnames some bundles still might try to load such classnames (e.g. due to a bug). So they could stop working in felix if they are catching a ClassNotFoundException even though they worked well before with different classloaders. Here is the stacktrace caused by a bundle that fits the category mentioned above: java.lang.IllegalArgumentException: Illegal value: Document doc = element.getOwnerDocument(); at org.apache.felix.framework.capabilityset.SimpleFilter.parseSubstring(SimpleFilter.java:399) at org.apache.felix.framework.util.manifestparser.RequirementImpl.convertToFilter(RequirementImpl.java:162) at org.apache.felix.framework.util.manifestparser.RequirementImpl.&lt;init&gt;(RequirementImpl.java:49) at org.apache.felix.framework.Felix$FelixResolver.isAllowedDynamicImport(Felix.java:4139) at org.apache.felix.framework.Felix$FelixResolver.resolve(Felix.java:4029) at org.apache.felix.framework.ModuleImpl.searchDynamicImports(ModuleImpl.java:1367) at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:723) at org.apache.felix.framework.ModuleImpl.access$200(ModuleImpl.java:73) at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1690) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) at org.apache.felix.framework.ModuleImpl.getClassByDelegation(ModuleImpl.java:634) at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1594) at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:887) at org.ops4j.pax.swissbox.core.BundleClassLoader.findClass(BundleClassLoader.java:176) at org.ops4j.pax.swissbox.core.BundleClassLoader.loadClass(BundleClassLoader.java:194) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) at org.milyn.util.ClassUtil.forName(ClassUtil.java:82)</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.capabilityset.SimpleFilter.java</file><file>framework.src.test.java.org.apache.felix.framework.capabilityset.SimpleFilterTest.java</file></fixedFiles></bug><bug fixdate="2011-09-20 08:41:02" id="3125" opendate="2011-09-20 08:24:34"><buginformation><summary>[FELIX-3125] [Framework] Use single file per bundle in bundle cache by default - ASF JIRA</summary><description>FELIX-2654 modified the bundle cache so it would use a single file per bundle to store bundle-related state (e.g., location, persisted state, etc.). The main reason was to reduce the amount of I/O performed during framework startup when you have lots of already cached bundles. This feature was disabled by default, since it didn't seem proper to introduce it in a micro release when it would result in bundle caches not being backward compatible with previous micro releases of 3.0.x. WIth the coming framework 4.0 release, we should switch this to be the default. Which means that new bundle caches created on 4.0 will not work with older releases. However, bundle caches created with older releases will be seamlessly converted by 4.0. Older caches will be converted non-destructively, so it is possible to go back, but if changes are made while running 4.0 on an older cache, then it is possible that they will get out of sync and will potentially no longer be backward compatible. For the foreseeable future, we can keep the felix.cache.singlebundlefile property which allows you to revert to the old behavior if you so choose. At some point in the future, though, it would be desirable to eliminate this property too and only support the new cache format.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchive.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleCache.java</file></fixedFiles></bug><bug fixdate="2011-08-29 04:12:36" id="3094" opendate="2011-08-29 04:11:11"><buginformation><summary>[FELIX-3094] [Main] Launcher should attempt to restart framework if the system bundle was updated - ASF JIRA</summary><description>The launcher starts the framework then calls Framework.waitForStop(), which returns a FrameworkEvent with a type value to indicate why the framework was stopped. If the system bundle was updated/refreshed, then according to the spec the framework should be restarted. Although technically, this should probably restart the JVM process, we can support a weak restart by simply having the launcher restart the framework any time waitForStop() exits with FrameworkEvent.STOPPED_UPDATE.</description></buginformation><fixedFiles><file>main.src.main.java.org.apache.felix.main.Main.java</file></fixedFiles></bug><bug fixdate="2011-09-20 08:14:51" id="3071" opendate="2011-08-08 04:28:19"><buginformation><summary>[FELIX-3071] [Framework] It should be possible to limit number of open JAR files - ASF JIRA</summary><description>Currently, the framework opens a ZipFile for each bundle JAR file and one for each embedded JAR file on a bundle's class path. Needless to say, if you have lots of bundles in your system, this can lead to lots of open files for the framework process. It should be possible to modify the framework to obey some limit on the number of open ZipFiles. A general approach would be to have a configurable limit and whenever the framework wanted to open another, if the limit was exceeded it would have to close a not recently used ZipFile. Theoretically, this shouldn't be too much of an issue for classes in particular, because once they are loaded they are cached in memory and it isn't necessary to go back to the disk.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchive.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleCache.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.DirectoryContent.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.DirectoryRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.JarContent.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.JarRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.util.Mutex.java</file><file>framework.src.main.java.org.apache.felix.framework.util.SecureAction.java</file><file>framework.src.main.java.org.apache.felix.framework.util.WeakZipFileFactory.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ZipFileX.java</file><file>framework.src.test.java.org.apache.felix.framework.util.WeakZipFileTest.java</file></fixedFiles></bug><bug fixdate="2011-08-26 10:11:02" id="3000" opendate="2011-06-16 07:49:57"><buginformation><summary>[FELIX-3000] Move sending service registered event out of bundle lock - ASF JIRA</summary><description>We have a strange situation on a Framework 3.0.7 based system here which is not reproducible on all platforms. We can track down a system freeze/deadlock to three threads all contending for bundle locks and the global lock. See attached FELIX-3000-stacktrace.txt for the stack trace. Looking at the Framework source, particularly acquireBundleLock and acquireGlobalLock I cannot see where this "deadlock" can occur. The only hint I have is a note in the Felix.registerService: &gt; // TODO: CONCURRENCY - Reconsider firing event here, outside of the &gt; // bundle lock. I wonder whether this situation can be fixed with moving the service registration event ? Looking at the code it seems to have not been changed. Thus I report this against 3.0.7 where we saw this and 3.2.2 being the latest release.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>src.main.java.org.apache.felix.framework.Felix.java</file><file>src.main.java.org.apache.felix.framework.ServiceRegistry.java</file></fixedFiles></bug><bug fixdate="2011-06-15 05:12:10" id="2998" opendate="2011-06-15 05:10:05"><buginformation><summary>[FELIX-2998] [Framework] OSGi R4.3 changed filter handling of exceptions when calling equals()/compare() to return false - ASF JIRA</summary><description>Previously, the spec wasn't consistent/clear on how to handle exceptions thrown by equals()/compare() when evaluating filters. Now this situation is defined as returning false from the filter, which is consistent with other similar cases in filter processing.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.capabilityset.CapabilitySet.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.SimpleFilter.java</file></fixedFiles></bug><bug fixdate="2011-09-20 08:42:52" id="2950" opendate="2011-05-13 03:49:27"><buginformation><summary>[FELIX-2950] [Framework] Adopt OSGi R4.3 API as framework internal API - ASF JIRA</summary><description>The R4.3 specification introduces more detailed API modeling bundle revisions and wiring. Rather than just facading our existing abstractions for these concepts, we should modify the framework implementation to adopt them wholesale (i.e., replace our existing abstractions with the spec'ed abstractions). Although the standard abstractions do not map one-to-one with our existing abstractions, they are reasonably close and the benefit of having an implementation that is consistent with the standard API probably outweighs the cost of changing, since very few people actually depend on our internal API. This issue will only be used for this internal refactoring process and generally will not be used as the issue for implementing new R4.3 functionality. We'll try to introduce separate issues for new any new functionality to make the change log more meaningful.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleProtectionDomain.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleRevisionDependencies.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleRevisionImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.EntryFilterEnumeration.java</file><file>framework.src.main.java.org.apache.felix.framework.ExportedPackageImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ExtensionManager.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.FilterImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ModuleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.PackageAdminImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.RequiredBundleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ResolverStateImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistrationImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.StatefulResolver.java</file><file>framework.src.main.java.org.apache.felix.framework.URLHandlersBundleURLConnection.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchive.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchiveRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleCache.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.BundleRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.Content.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.ContentDirectoryContent.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.DirectoryContent.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.DirectoryRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.JarContent.java</file><file>framework.src.main.java.org.apache.felix.framework.cache.JarRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.Attribute.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.Capability.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.CapabilitySet.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.Directive.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.Requirement.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.SimpleFilter.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.CandidateComparator.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Candidates.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Content.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostBundleRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostModule.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedCapability.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedRequirement.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Module.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolveException.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Resolver.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverWire.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverWireImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResourceNotFoundException.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Wire.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.WireImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.WireModuleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.FelixConstants.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ShrinkableCollection.java</file><file>framework.src.main.java.org.apache.felix.framework.util.Util.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.CapabilityImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ParsedHeaderClause.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.RequirementImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleCapabilityImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleRequirementImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleWireImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.FelixBundleWire.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.FelixBundleWireImpl.java</file><file>framework.src.main.java.org.osgi.framework.AdaptPermission.java</file><file>framework.src.main.java.org.osgi.framework.AdminPermission.java</file><file>framework.src.main.java.org.osgi.framework.AllServiceListener.java</file><file>framework.src.main.java.org.osgi.framework.Bundle.java</file><file>framework.src.main.java.org.osgi.framework.BundleActivator.java</file><file>framework.src.main.java.org.osgi.framework.BundleContext.java</file><file>framework.src.main.java.org.osgi.framework.BundleEvent.java</file><file>framework.src.main.java.org.osgi.framework.BundleException.java</file><file>framework.src.main.java.org.osgi.framework.BundleListener.java</file><file>framework.src.main.java.org.osgi.framework.BundlePermission.java</file><file>framework.src.main.java.org.osgi.framework.BundleReference.java</file><file>framework.src.main.java.org.osgi.framework.CapabilityPermission.java</file><file>framework.src.main.java.org.osgi.framework.Configurable.java</file><file>framework.src.main.java.org.osgi.framework.Constants.java</file><file>framework.src.main.java.org.osgi.framework.Filter.java</file><file>framework.src.main.java.org.osgi.framework.FrameworkEvent.java</file><file>framework.src.main.java.org.osgi.framework.FrameworkListener.java</file><file>framework.src.main.java.org.osgi.framework.FrameworkUtil.java</file><file>framework.src.main.java.org.osgi.framework.InvalidSyntaxException.java</file><file>framework.src.main.java.org.osgi.framework.PackagePermission.java</file><file>framework.src.main.java.org.osgi.framework.ServiceEvent.java</file><file>framework.src.main.java.org.osgi.framework.ServiceException.java</file><file>framework.src.main.java.org.osgi.framework.ServiceFactory.java</file><file>framework.src.main.java.org.osgi.framework.ServiceListener.java</file><file>framework.src.main.java.org.osgi.framework.ServicePermission.java</file><file>framework.src.main.java.org.osgi.framework.ServiceReference.java</file><file>framework.src.main.java.org.osgi.framework.ServiceRegistration.java</file><file>framework.src.main.java.org.osgi.framework.SignerProperty.java</file><file>framework.src.main.java.org.osgi.framework.SynchronousBundleListener.java</file><file>framework.src.main.java.org.osgi.framework.Version.java</file><file>framework.src.main.java.org.osgi.framework.hooks.bundle.EventHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.bundle.FindHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.resolver.ResolverHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.resolver.ResolverHookFactory.java</file><file>framework.src.main.java.org.osgi.framework.hooks.service.EventHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.service.EventListenerHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.service.FindHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.service.ListenerHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.weaving.WeavingException.java</file><file>framework.src.main.java.org.osgi.framework.hooks.weaving.WeavingHook.java</file><file>framework.src.main.java.org.osgi.framework.hooks.weaving.WovenClass.java</file><file>framework.src.main.java.org.osgi.framework.launch.Framework.java</file><file>framework.src.main.java.org.osgi.framework.launch.FrameworkFactory.java</file><file>framework.src.main.java.org.osgi.framework.startlevel.BundleStartLevel.java</file><file>framework.src.main.java.org.osgi.framework.startlevel.FrameworkStartLevel.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleCapability.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleRequirement.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleRevision.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleRevisions.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleWire.java</file><file>framework.src.main.java.org.osgi.framework.wiring.BundleWiring.java</file><file>framework.src.main.java.org.osgi.framework.wiring.FrameworkWiring.java</file><file>framework.src.main.java.org.osgi.service.packageadmin.ExportedPackage.java</file><file>framework.src.main.java.org.osgi.service.packageadmin.PackageAdmin.java</file><file>framework.src.main.java.org.osgi.service.packageadmin.RequiredBundle.java</file><file>framework.src.main.java.org.osgi.service.startlevel.StartLevel.java</file><file>framework.src.main.java.org.osgi.service.url.AbstractURLStreamHandlerService.java</file><file>framework.src.main.java.org.osgi.service.url.URLConstants.java</file><file>framework.src.main.java.org.osgi.service.url.URLStreamHandlerService.java</file><file>framework.src.main.java.org.osgi.service.url.URLStreamHandlerSetter.java</file><file>framework.src.main.java.org.osgi.util.tracker.AbstractTracked.java</file><file>framework.src.main.java.org.osgi.util.tracker.BundleTracker.java</file><file>framework.src.main.java.org.osgi.util.tracker.BundleTrackerCustomizer.java</file><file>framework.src.main.java.org.osgi.util.tracker.ServiceTracker.java</file><file>framework.src.main.java.org.osgi.util.tracker.ServiceTrackerCustomizer.java</file></fixedFiles></bug><bug fixdate="2011-08-15 03:14:42" id="2467" opendate="2010-07-08 02:26:56"><buginformation><summary>[FELIX-2467] The framework extensions should be returned when invoking the method PackageAdmin#getFragments with the system bundle - ASF JIRA</summary><description>The framework extensions should be returned when invoking the method PackageAdmin#getFragments with the system bundle. Today, null is returned even if extensions are activated.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleRevisionDependencies.java</file><file>framework.src.main.java.org.apache.felix.framework.ExtensionManager.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file></fixedFiles></bug><bug fixdate="2011-09-20 09:15:02" id="3124" opendate="2011-09-20 07:40:55"><buginformation><summary>[FELIX-3124] [Framework] Implement OSGi R4.3 property to allow installing bundles with the same BSN and version - ASF JIRA</summary><description>The OSGi R4.3 spec defines the org.osgi.framework.bsnversion framework configuration property that controls whether installing duplicate BSN/version pairs is an error or not. It supports the values "single" (which is the default and current behavior) or "multiple" (which enables duplicates).</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleImpl.java</file></fixedFiles></bug><bug fixdate="2011-09-20 07:37:28" id="3122" opendate="2011-09-20 06:19:50"><buginformation><summary>[FELIX-3122] [Framework] Implement OSGi R4.3 framework UUID - ASF JIRA</summary><description>The OSGi R4.3 spec requires that a framework generates a UUID each time it is init'ed. The string value of the UUID is placed in the org.osgi.framework.uuid framework property.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.util.Util.java</file></fixedFiles></bug><bug fixdate="2011-08-02 05:11:08" id="3056" opendate="2011-07-26 07:24:21"><buginformation><summary>[FELIX-3056] [Framework] Implement OSGi R4.3 event listener service registry hook - ASF JIRA</summary><description>The OSGi R4.3 spec introduces a new service registry hook, called EventListenerHook, which replaces the EventHook. Essentially, it is a more fine-grained version of the EventHook giving you control over precise listeners rather than operating on all listeners from a given bundle.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ListenerHookInfoImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ListenerInfo.java</file><file>framework.src.main.java.org.apache.felix.framework.util.SecureAction.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ShrinkableCollection.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ShrinkableMap.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherTest.java</file></fixedFiles></bug><bug fixdate="2011-08-02 03:31:13" id="3032" opendate="2011-07-11 04:40:17"><buginformation><summary>[FELIX-3032] [Framework] Implement OSGi R4.3 bundle hooks - ASF JIRA</summary><description>The OSGi R4.3 spec introduces a hook mechanism, called bundle hooks, to control which bundles can see other bundles via BundleContext.getBundles() and bundle events. We need to implement this functionality.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.main.java.org.apache.felix.framework.util.SecureAction.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherListenerWrapperTest.java</file></fixedFiles></bug><bug fixdate="2011-06-15 10:04:37" id="2999" opendate="2011-06-15 10:02:53"><buginformation><summary>[FELIX-2999] [Framework] OSGi R4.3 now specifies that number types should be trimmed when evaluating filters - ASF JIRA</summary><description>Previous specs were not clear how strict or lenient framework implementations should be when coercing types when evaluating filter strings. The Felix framework was strict and did not massage parsed data when coercing types (e.g., trimming string values before coercing them to a number). Now the spec says that the string representation of number types should be trimmed before attempting coercion.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.capabilityset.CapabilitySet.java</file></fixedFiles></bug><bug fixdate="2011-09-09 06:52:34" id="2986" opendate="2011-06-07 07:46:07"><buginformation><summary>[FELIX-2986] [Framework] Implement OSGi R4.3 resolver hooks - ASF JIRA</summary><description>The OSGi R4.3 specification introduces resolver hooks to impact how the resolver resolves bundle dependencies.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleRevisionDependencies.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleRevisionImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ExportedPackageImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ExtensionManager.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.PackageAdminImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ResolverStateImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.StatefulResolver.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.CandidateComparator.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Candidates.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedCapability.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Resolver.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.SecureAction.java</file><file>framework.src.main.java.org.apache.felix.framework.util.ShrinkableCollection.java</file><file>framework.src.main.java.org.apache.felix.framework.util.Util.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleCapabilityImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-12 05:51:43" id="2975" opendate="2011-05-26 03:40:40"><buginformation><summary>[FELIX-2975] [Framework] Implement OSGi R4.3 framework start level object - ASF JIRA</summary><description>The OSGi R4.3 spec deprecates the StartLevel service. It is replaced by two new interfaces, FrameworkStartLevel and BundleStartLevel, which are available from the new Bundle.adapt() method. The functionality is equivalent to the StartLevel service, this is just a new way to access it.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.FrameworkStartLevelImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.FrameworkWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.PackageAdminActivator.java</file><file>framework.src.main.java.org.apache.felix.framework.StartLevelActivator.java</file><file>framework.src.main.java.org.apache.felix.framework.StartLevelImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherTest.java</file></fixedFiles></bug><bug fixdate="2011-09-12 10:51:14" id="2973" opendate="2011-05-25 04:33:49"><buginformation><summary>[FELIX-2973] [Framework] Implement OSGi R4.3 generic capabilities and requirements - ASF JIRA</summary><description>The OSGi R4.3 spec introduces a generic mechanism for a bundle to provide some capability (Provide-Capability) and other bundles to require such capabilities (Require-Capability). We need to implement this feature. Since it is based on the existing model used by the Felix framework, this should be reasonably straightforward. The biggest changes are the support of specifying types in the manifest header for capabilities and that generic capabilities can express "uses" constraints on packages.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.StatefulResolver.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.CapabilitySet.java</file><file>framework.src.main.java.org.apache.felix.framework.capabilityset.SimpleFilter.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Candidates.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostBundleRevision.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Resolver.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverWireImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ParsedHeaderClause.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleCapabilityImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleRequirementImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.wiring.BundleWireImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-12 05:52:09" id="2969" opendate="2011-05-23 04:36:54"><buginformation><summary>[FELIX-2969] [Framework] Implement OSGi R4.3 framework wiring object - ASF JIRA</summary><description>The OSGi R4.3 spec introduces a new FrameworkWiring API available from the system bundle adapt() method to replace the PackageAdmin service. We need to implement it.</description></buginformation><fixedFiles><file>dependencymanager.test.src.test.java.org.apache.felix.dm.test.FELIX2696_ConfigurationAndServiceDependencyTest.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.FrameworkStartLevelImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.FrameworkWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.PackageAdminActivator.java</file><file>framework.src.main.java.org.apache.felix.framework.PackageAdminImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.StartLevelActivator.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherTest.java</file></fixedFiles></bug><bug fixdate="2011-05-25 04:11:10" id="2959" opendate="2011-05-19 05:06:18"><buginformation><summary>[FELIX-2959] [Framework] Implement OSGi R4.3 class loader byte-code weaving hook - ASF JIRA</summary><description>Implement the OSGi R4.3 specification's new class loading hook to enable byte code weaving.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.InvokeHookCallback.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.URLHandlersActivator.java</file><file>framework.src.main.java.org.apache.felix.framework.WovenClassImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file><file>framework.src.main.java.org.apache.felix.framework.util.SecureAction.java</file><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file><file>framework.src.test.java.org.apache.felix.framework.ServiceRegistryTest.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherTest.java</file></fixedFiles></bug></bugrepository>