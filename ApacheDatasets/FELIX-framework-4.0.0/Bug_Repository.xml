<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2011-09-12 10:44:23" id="3096" opendate="2011-08-31 07:36:24"><buginformation><summary>[FELIX-3096] Could not add FrameworkListener from ServiceListener - ASF JIRA</summary><description>It's now impossible to add a FrameworkListener from ServiceListener in 3.2.x, worked in 3.0.9. The code below hangs in addFrameworkListener when it tries to acquire a global lock on the framework bundle. Framework framework = ... framework.init(); final BundleContext ctx = framework.getBundleContext(); ctx.addServiceListener(new ServiceListener() { public void serviceChanged(ServiceEvent event) { if (...) { ctx.addFrameworkListener(new FrameworkListener() { public void frameworkEvent(FrameworkEvent event) { System.out.println(event); } }); } } }); StartLevel sl = (StartLevel) ctx.getService(ctx.getServiceReference(StartLevel.class.getName())); // Install bundles, set start level. ... framework.start(); framework.waitForStop();</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file></fixedFiles></bug><bug fixdate="2011-08-31 07:21:56" id="3085" opendate="2011-08-25 12:59:40"><buginformation><summary>[FELIX-3085] Importing/exporting "." should not be allowed - ASF JIRA</summary><description>In the Equinox implementation of OSGi, importing and exporting the default package (".") is allowed, whereas it fails to produce the expected results under Apache Felix.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.util.manifestparser.ManifestParser.java</file></fixedFiles></bug><bug fixdate="2011-08-25 08:40:47" id="3082" opendate="2011-08-24 03:13:00"><buginformation><summary>[FELIX-3082] [Framework] Bundles not allowed to add listeners while in STOPPING state - ASF JIRA</summary><description>In framework 3.2.0 we tried to fix a race condition where bundles could continue to add listeners even after they had been stopped ( FELIX-2748). As part of that fix, we made it so that bundles could no longer add listeners while in the STOPPING state, which is too restrictive from a spec point of view. We need to allow this again, but make sure we don't reintroduce the original issue we were trying to fix.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file></fixedFiles></bug><bug fixdate="2011-07-30 04:50:01" id="3062" opendate="2011-07-30 04:48:31"><buginformation><summary>[FELIX-3062] [Framework] Resolver gets into infinite loop in the face of a require-bundle cycle - ASF JIRA</summary><description>When calculating the package space for a given bundle revision, if that revision requires a bundle that in turn requires it (i.e., create a cycle), then package space calculation gets stuck in an infinite loop. We need to add a cycle check in the this case.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-11 04:37:28" id="3059" opendate="2011-07-27 09:55:29"><buginformation><summary>[FELIX-3059] Reexported packages are not calculate correctly leading to resolver and class loading bugs - ASF JIRA</summary><description>As described in http://www.mail-archive.com/users@felix.apache.org/msg10677.html [1], Require-Bundle with visibility:=reexport does not work transitively in Felix 3.2.2 (cannot comment wrt. other versions, only tested this one). Similar issue with Felix M2 plugin described in http://www.mail-archive.com/felix-dev@incubator.apache.org/msg02622.html. See attached zip for an example consisting of 4 bundles as described in [1]. Example works in Equinox, fails to load a.One in Felix 3.2.2.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file></fixedFiles></bug><bug fixdate="2011-08-15 02:03:58" id="3043" opendate="2011-07-15 05:51:49"><buginformation><summary>[FELIX-3043] [Framework] Resolver is not correctly resolving fragments in all cases - ASF JIRA</summary><description>The algorithm to merge fragments into hosts is not always correct when merging fragments into multiple hosts when there are dependencies among the resulting merged hosts. The current algorithm needs to be modified to keep the dependents list up to date in Candidates so that every merged cap/req gets replaced by the corresponding wrapped cap/req from the synthesized merged host module.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.Candidates.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.ResolverImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedRequirement.java</file><file>framework.src.main.java.org.apache.felix.framework.resolver.HostedCapability.java</file></fixedFiles></bug><bug fixdate="2011-07-11 09:17:02" id="3033" opendate="2011-07-11 07:22:19"><buginformation><summary>[FELIX-3033] [Framework] Service registry hooks are not correctly filtering bundle contexts for event hook - ASF JIRA</summary><description>When calling out to service registry EventHooks, the collection of bundle contexts is being treated as a list with duplicates when it should be treated as a set without duplicates. The end result being, if a hook removes a bundle context from the set, then it effectively filters all listeners from that bundle context. The current implementation allows a hook to remove a single listener, which is not correct.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.BundleContextImpl.java</file><file>framework.src.main.java.org.apache.felix.framework.BundleWiringImpl.java</file><file>framework.src.test.java.org.apache.felix.framework.util.EventDispatcherListenerWrapperTest.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file><file>framework.src.main.java.org.apache.felix.framework.ServiceRegistry.java</file><file>framework.src.main.java.org.apache.felix.framework.util.EventDispatcher.java</file></fixedFiles></bug><bug fixdate="2011-06-10 04:19:37" id="2990" opendate="2011-06-10 03:12:07"><buginformation><summary>[FELIX-2990] [Framework] Bug introduced into handling of native libraries during a fresh - ASF JIRA</summary><description>In FELIX-2560 we modified how we handled module identifiers to allow bundle resource URLs to survive a refresh. These changes introduced a potential bug for native library handling by not always re-naming the revision directory when refreshing a bundle. Thus, it is possible that bundles with native libraries won't be able to link the the native library after refresh since the path to the native library doesn't change. This only impacts refreshing a bundle that hasn't been updated (i.e., only has a single revision), updated bundles are refresh correctly.</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.cache.BundleArchive.java</file><file>framework.src.main.java.org.apache.felix.framework.Felix.java</file></fixedFiles></bug><bug fixdate="2011-08-30 04:47:45" id="2762" opendate="2011-01-04 06:42:15"><buginformation><summary>[FELIX-2762] Substring parser incorrectly disallowing use of parentheses characters - ASF JIRA</summary><description>When a bundle is trying to load a class with a classname that contains a perenthesis felix is throwing an IllegalArgumentException. Now usually the bundle trying to load the class would catch a "ClassNotFoundException". Other classLoaders (or at least sun.misc.Launcher.AppClassLoader) are throwing a ClassNotFoundException if the classname contains a parenthesis. Even if it's illegal to have parentheses in classnames some bundles still might try to load such classnames (e.g. due to a bug). So they could stop working in felix if they are catching a ClassNotFoundException even though they worked well before with different classloaders. Here is the stacktrace caused by a bundle that fits the category mentioned above: java.lang.IllegalArgumentException: Illegal value: Document doc = element.getOwnerDocument(); at org.apache.felix.framework.capabilityset.SimpleFilter.parseSubstring(SimpleFilter.java:399) at org.apache.felix.framework.util.manifestparser.RequirementImpl.convertToFilter(RequirementImpl.java:162) at org.apache.felix.framework.util.manifestparser.RequirementImpl.&lt;init&gt;(RequirementImpl.java:49) at org.apache.felix.framework.Felix$FelixResolver.isAllowedDynamicImport(Felix.java:4139) at org.apache.felix.framework.Felix$FelixResolver.resolve(Felix.java:4029) at org.apache.felix.framework.ModuleImpl.searchDynamicImports(ModuleImpl.java:1367) at org.apache.felix.framework.ModuleImpl.findClassOrResourceByDelegation(ModuleImpl.java:723) at org.apache.felix.framework.ModuleImpl.access$200(ModuleImpl.java:73) at org.apache.felix.framework.ModuleImpl$ModuleClassLoader.loadClass(ModuleImpl.java:1690) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) at org.apache.felix.framework.ModuleImpl.getClassByDelegation(ModuleImpl.java:634) at org.apache.felix.framework.Felix.loadBundleClass(Felix.java:1594) at org.apache.felix.framework.BundleImpl.loadClass(BundleImpl.java:887) at org.ops4j.pax.swissbox.core.BundleClassLoader.findClass(BundleClassLoader.java:176) at org.ops4j.pax.swissbox.core.BundleClassLoader.loadClass(BundleClassLoader.java:194) at java.lang.ClassLoader.loadClass(ClassLoader.java:266) at org.milyn.util.ClassUtil.forName(ClassUtil.java:82)</description></buginformation><fixedFiles><file>framework.src.main.java.org.apache.felix.framework.capabilityset.SimpleFilter.java</file><file>framework.src.test.java.org.apache.felix.framework.capabilityset.SimpleFilterTest.java</file></fixedFiles></bug></bugrepository>