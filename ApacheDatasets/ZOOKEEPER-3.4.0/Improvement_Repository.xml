<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2011-11-15 06:31:34" id="1239" opendate="2011-10-22 12:48:57"><buginformation><summary>[ZOOKEEPER-1239] add logging/stats to identify fsync stalls - ASF JIRA</summary><description>We don't have any logging to identify fsync stalls. It's a somewhat common occurrence (after gc/swap issues) when trying to diagnose pipeline stalls - where outstanding requests start piling up and operational latency increases. We should have some sort of logging around this. e.g. if the fsync time exceeds some limit then log a warning, something like that. It would also be useful to publish "stat" information related to this. min/avg/max latency for fsync. This should also be exposed through JMX.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.persistence.FileTxnLog.java</file></fixedFiles></bug><bug fixdate="2011-09-02 09:54:25" id="1169" opendate="2011-09-02 07:39:10"><buginformation><summary>[ZOOKEEPER-1169] Fix compiler (eclipse) warnings in (generated) jute code - ASF JIRA</summary><description>Fixes for compiled jute parser: missing generic types added @SuppressWarnings("unused") because javacc adds a dead throws clause at the end of functions. Fixes for code compiled by jute compiler: remove import java.util.* and use full ref to java.util.Arrays One warning fixed in non-compiled code: src/java/main/org/apache/jute/compiler/JRecord.java Rationale: The warnings in your IDE (eclipse) get useless if there are tons of them. This patch reduces many of them. Another issue with patch will reduce them to 8.</description></buginformation><fixedFiles><file>src.java.main.org.apache.jute.compiler.JBuffer.java</file><file>src.java.main.org.apache.jute.compiler.JRecord.java</file></fixedFiles></bug><bug fixdate="2011-08-30 07:29:41" id="1153" opendate="2011-08-15 10:33:07"><buginformation><summary>[ZOOKEEPER-1153] Deprecate AuthFLE and LE - ASF JIRA</summary><description>I propose we mark these as deprecated in 3.4.0 and remove them in the following release.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.LeaderElection.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.AuthFastLeaderElection.java</file></fixedFiles></bug><bug fixdate="2011-08-15 01:44:42" id="1143" opendate="2011-08-03 10:27:00"><buginformation><summary>[ZOOKEEPER-1143] quorum send &amp; recv workers are missing thread names - ASF JIRA</summary><description>Simplifies debugging.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumCnxManager.java</file></fixedFiles></bug><bug fixdate="2011-08-15 01:54:46" id="1104" opendate="2011-06-22 07:21:39"><buginformation><summary>[ZOOKEEPER-1104] CLONE - In QuorumTest, use the same "for ( .. try { break } catch { } )" pattern in testFollowersStartAfterLeaders as in testSessionMove. - ASF JIRA</summary><description>Patrick Hunt writes: "Such uses of sleep [used in testFollowersStartAfterLeader] are just asking for trouble. Take a look at the use of sleep in testSessionMove in the same class for a better way to do this. I had gone through all the tests a while back, replacing all the "sleep" with something like this testSessionMove pattern (retry with a max limit that's very long). During reviews we should look for anti-patterns like this and address them before commit." So, modify testFollowersStartAfterLeaders to use the same retrying approach that testSessionMove uses.</description></buginformation><fixedFiles><file>src.java.test.org.apache.zookeeper.test.QuorumTest.java</file></fixedFiles></bug><bug fixdate="2011-06-22 08:47:55" id="1103" opendate="2011-06-21 10:23:53"><buginformation><summary>[ZOOKEEPER-1103] In QuorumTest, use the same "for ( .. try { break } catch { } )" pattern in testFollowersStartAfterLeaders as in testSessionMove. - ASF JIRA</summary><description>Patrick Hunt writes: "Such uses of sleep [used in testFollowersStartAfterLeader] are just asking for trouble. Take a look at the use of sleep in testSessionMove in the same class for a better way to do this. I had gone through all the tests a while back, replacing all the "sleep" with something like this testSessionMove pattern (retry with a max limit that's very long). During reviews we should look for anti-patterns like this and address them before commit." So, modify testFollowersStartAfterLeaders to use the same retrying approach that testSessionMove uses.</description></buginformation><fixedFiles><file>src.java.test.org.apache.zookeeper.test.QuorumTest.java</file></fixedFiles></bug><bug fixdate="2011-06-17 12:34:52" id="1094" opendate="2011-06-13 11:14:32"><buginformation><summary>[ZOOKEEPER-1094] Small improvements to LeaderElection and Vote classes - ASF JIRA</summary><description>1. o.a.z.q.Vote is a struct-style class, whose fields are public and not final. In general, we should prefer making the fields of these kind of classes final, and hiding them behind getters for the following reasons: Marking them as final allows clients of the class not to worry about any synchronisation when accessing the fields Hiding them behind getters allows us to change the implementation of the class without changing the API. Object creation is very cheap. It's ok to create new Votes rather than mutate existing ones. 2. Votes are mainly used in the LeaderElection class. In this class a map of addresses to votes is passed in to countVotes, which modifies the map contents inside an iterator (and therefore changes the object passed in by reference). This is pretty gross, so at the same time I've slightly refactored this method to return information about the number of validVotes in the ElectionResult class, which is returned by countVotes. 3. The previous implementation of countVotes was quadratic in the number of votes. It is possible to do this linearly. No real speed-up is expected as a result, but it salves the CS OCD in me</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>src.java.test.org.apache.zookeeper.test.LENonTerminateTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLEZeroWeightTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLERestartTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Vote.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.AuthFastLeaderElection.java</file><file>src.java.test.org.apache.zookeeper.test.LETest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LeaderElection.java</file><file>src.java.test.org.apache.zookeeper.test.FLETest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Leader.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Learner.java</file><file>src.java.test.org.apache.zookeeper.test.FLENewEpochTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLELostMessageTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FastLeaderElection.java</file></fixedFiles></bug><bug fixdate="2011-08-18 09:20:15" id="1025" opendate="2011-03-22 12:40:50"><buginformation><summary>[ZOOKEEPER-1025] zkCli is overly sensitive to to spaces. - ASF JIRA</summary><description>Here's an example: I do an ls to get znode names. I try to stat a znode. &#13;
[zk: localhost:3181(CONNECTED) 1] ls /flume-nodes&#13;
[nodes0000000002, nodes0000000001, nodes0000000000, nodes0000000005, nodes0000000004, nodes0000000003]&#13;
[zk: localhost:3181(CONNECTED) 3] stat /flume-nodes/nodes0000000002 &#13;
cZxid = 0xb&#13;
ctime = Sun Mar 20 23:24:03 PDT 2011&#13;
... (success)&#13;
 Here's something that almost looks the same. Notice the extra space infront of the znode name. &#13;
[zk: localhost:3181(CONNECTED) 2] stat  /flume-nodes/nodes0000000002&#13;
Command failed: java.lang.IllegalArgumentException: Path length must be &gt; 0&#13;
 This seems like unexpected behavior.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>src.java.test.org.apache.zookeeper.ZooKeeperTest.java</file></fixedFiles></bug><bug fixdate="2010-11-05 06:25:22" id="862" opendate="2010-09-02 06:47:23"><buginformation><summary>[ZOOKEEPER-862] Hedwig created ledgers with hardcoded Bookkeeper ensemble and quorum size. Make these a server config parameter instead. - ASF JIRA</summary><description>Hedwig code right now when using Bookkeeper as the persistence store is hardcoding the number of bookie servers in the ensemble and quorum size. This is used the first time a ledger is created. This should be exposed as a server configuration parameter instead.</description></buginformation><fixedFiles><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.BookkeeperPersistenceManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.ServerConfiguration.java</file></fixedFiles></bug><bug fixdate="2012-01-24 12:25:01" id="850" opendate="2010-08-16 01:49:18"><buginformation><summary>[ZOOKEEPER-850] Switch from log4j to slf4j - ASF JIRA</summary><description>Hello, i would like to see slf4j integrated into the zookeeper instead of relying explicitly on log4j. slf4j is an abstract logging framework. There are adapters from slf4j to many logger implementations, one of them is log4j. The decision which log engine to use i dont like to make so early. This would help me to embed zookeeper in my own applications (which use a different logger implemenation, but slf4j is the basis) What do you think? (as i can see, those slf4j request flood all other projects on apache as well Maybe for 3.4 or 4.0? I can offer a patchset, i have experience in such an migration already.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.streaming.LedgerInputStream.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.LoopbackClient.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.PendingReadOp.java</file><file>src.java.main.org.apache.zookeeper.server.auth.ProviderRegistry.java</file><file>src.java.test.org.apache.zookeeper.test.ObserverQuorumHammerTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Vote.java</file><file>src.java.main.org.apache.zookeeper.server.PrepRequestProcessor.java</file><file>src.java.test.org.apache.zookeeper.test.ClientTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LeaderElection.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxnFactory.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.proto.BookieServer.java</file><file>src.java.test.org.apache.zookeeper.test.FLETest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.streaming.LedgerOutputStream.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Learner.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.flexible.QuorumMaj.java</file><file>src.java.main.org.apache.zookeeper.server.PurgeTxnLog.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.util.LocalBookKeeper.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.ZooKeeperService.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootAsyncTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.RandomAccessFileReader.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.AuthFastLeaderElection.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerOpenOp.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumHammerTest.java</file><file>src.java.test.org.apache.zookeeper.test.TruncateTest.java</file><file>src.java.main.org.apache.zookeeper.server.Request.java</file><file>src.java.test.org.apache.zookeeper.test.JMXEnv.java</file><file>src.java.main.org.apache.zookeeper.server.ZKDatabase.java</file><file>src.java.test.org.apache.zookeeper.test.CnxManagerTest.java</file><file>src.java.test.org.apache.zookeeper.test.ZooKeeperTestClient.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.LedgerRecoveryTest.java</file><file>src.recipes.lock.src.java.org.apache.zookeeper.recipes.lock.ProtocolSupport.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.BookKeeper.java</file><file>src.java.systest.org.apache.zookeeper.test.system.QuorumPeerInstance.java</file><file>src.java.test.org.apache.zookeeper.test.LETest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.flexible.QuorumHierarchical.java</file><file>src.java.test.org.apache.zookeeper.test.HierarchicalQuorumTest.java</file><file>src.java.main.org.apache.zookeeper.server.util.Profiler.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.SnapShot.java</file><file>src.java.test.org.apache.zookeeper.test.ZooKeeperQuotaTest.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieReadWriteTest.java</file><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsTest.java</file><file>src.java.main.org.apache.zookeeper.server.upgrade.DataTreeV1.java</file><file>src.java.main.org.apache.zookeeper.CreateMode.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.LedgerCache.java</file><file>src.java.test.org.apache.zookeeper.test.UpgradeTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Follower.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerMain.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxn.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.PendingAddOp.java</file><file>src.java.test.org.apache.zookeeper.test.StandaloneTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.servlets.FileLoader.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ProposalRequestProcessor.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerRecoveryOp.java</file><file>src.java.main.org.apache.zookeeper.server.upgrade.UpgradeSnapShot.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.FileTxnLog.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.RootTest.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.Util.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.FileTxnSnapLog.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxn.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerConfig.java</file><file>src.java.systest.org.apache.zookeeper.test.system.InstanceManager.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.LedgerDescriptor.java</file><file>src.java.test.org.apache.zookeeper.test.RepeatStartupTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.LogIterator.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncHammerTest.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.tools.BookKeeperTools.java</file><file>src.java.systest.org.apache.zookeeper.test.system.GenerateLoad.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Leader.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.AckRequestProcessor.java</file><file>src.java.systest.org.apache.zookeeper.test.system.InstanceContainer.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.FileSnap.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumQuotaTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientHammerTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.BookieException.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServer.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.GetTest.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieRecoveryTest.java</file><file>src.java.main.org.apache.zookeeper.client.StaticHostProvider.java</file><file>src.java.main.org.apache.zookeeper.server.ConnectionBean.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.Stats.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocketNIO.java</file><file>src.java.main.org.apache.zookeeper.Environment.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.TransactionEntry.java</file><file>src.java.test.org.apache.zookeeper.ZKTestCase.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.TxnLogSource.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LearnerHandler.java</file><file>src.java.main.org.apache.zookeeper.server.upgrade.UpgradeMain.java</file><file>src.recipes.lock.src.java.org.apache.zookeeper.recipes.lock.LockListener.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerHandle.java</file><file>src.java.test.org.apache.zookeeper.server.InvalidSnapshotTest.java</file><file>src.java.test.org.apache.zookeeper.test.LENonTerminateTest.java</file><file>src.java.main.org.apache.zookeeper.server.auth.DigestAuthenticationProvider.java</file><file>src.java.test.org.apache.zookeeper.test.IntegrityCheck.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncOpsTest.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.proto.NIOServerFactory.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.AsyncLedgerOpsTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLENewEpochTest.java</file><file>src.java.test.org.apache.zookeeper.test.ObserverTest.java</file><file>src.java.main.org.apache.zookeeper.ServerAdminClient.java</file><file>src.java.test.org.apache.zookeeper.test.NullDataTest.java</file><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsQuorumTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.Log4JEntry.java</file><file>src.java.test.org.apache.zookeeper.PortAssignment.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FollowerRequestProcessor.java</file><file>src.java.test.org.apache.zookeeper.server.SerializationPerfTest.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServerMain.java</file><file>src.java.test.org.apache.zookeeper.test.ACLRootTest.java</file><file>src.java.main.org.apache.zookeeper.server.ZooTrace.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumCnxManager.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieFailureTest.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.RestMain.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.WadlTest.java</file><file>src.java.test.org.apache.zookeeper.test.PurgeTxnTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientBase.java</file><file>src.java.test.org.apache.zookeeper.test.ObserverHierarchicalQuorumTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.SessionTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLERestartTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.servlets.GraphData.java</file><file>src.java.test.org.apache.zookeeper.test.DataTreeTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.Log4JSource.java</file><file>src.java.main.org.apache.zookeeper.server.LogFormatter.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ObserverZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FastLeaderElection.java</file><file>src.recipes.queue.src.java.org.apache.zookeeper.recipes.queue.DistributedQueue.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.MergedLogSource.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.flexible.QuorumVerifier.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerDeleteOp.java</file><file>src.java.main.org.apache.zookeeper.common.PathTrie.java</file><file>src.java.main.org.apache.zookeeper.server.upgrade.UpgradeSnapShotV1.java</file><file>src.java.main.org.apache.zookeeper.server.SyncRequestProcessor.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.GetChildrenTest.java</file><file>src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.CreateTest.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieClientTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.CommitProcessor.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.servlets.Throughput.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.util.SafeRunnable.java</file><file>src.java.main.org.apache.zookeeper.server.SessionTrackerImpl.java</file><file>src.recipes.lock.src.java.org.apache.zookeeper.recipes.lock.ZNodeName.java</file><file>src.java.test.org.apache.zookeeper.test.FLEZeroWeightTest.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumUtil.java</file><file>src.java.test.org.apache.zookeeper.server.quorum.QuorumPeerTestBase.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerEntry.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.DigestManager.java</file><file>src.java.test.org.apache.zookeeper.test.SessionTest.java</file><file>src.java.test.org.apache.zookeeper.server.CRCTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.EntryLogger.java</file><file>src.java.test.org.apache.zookeeper.test.FLELostMessageTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientPortBindTest.java</file><file>src.java.test.org.apache.zookeeper.test.ZkDatabaseCorruptionTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.BookieWatcher.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Election.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumBase.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerMetadata.java</file><file>src.java.test.org.apache.zookeeper.test.RecoveryTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.FilterParser.java</file><file>src.java.main.org.apache.zookeeper.server.DataTree.java</file><file>src.contrib.bookkeeper.benchmark.org.apache.bookkeeper.benchmark.TestClient.java</file><file>src.java.test.org.apache.zookeeper.test.WatcherTest.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BaseTestCase.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.LedgerDeleteTest.java</file><file>src.contrib.bookkeeper.benchmark.org.apache.bookkeeper.benchmark.MySqlClient.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.SendAckRequestProcessor.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.resources.SessionsResource.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.FilterOp.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.DeleteTest.java</file><file>src.java.systest.org.apache.zookeeper.test.system.SimpleSysTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.ExistsTest.java</file><file>src.java.test.org.apache.zookeeper.test.AuthTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.MeasureThroughput.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FollowerZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.server.WatchManager.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerCreateOp.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.servlets.Fs.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.Base.java</file><file>src.java.main.org.apache.zookeeper.server.util.SerializeUtils.java</file><file>src.java.test.org.apache.zookeeper.server.DeserializationPerfTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.LogServer.java</file><file>src.java.test.org.apache.zookeeper.test.ACLTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.Bookie.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ObserverRequestProcessor.java</file><file>src.java.test.org.apache.zookeeper.server.ZooKeeperServerMainTest.java</file><file>src.java.main.org.apache.zookeeper.jmx.MBeanRegistry.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.SetTest.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.servlets.NumEvents.java</file><file>src.java.test.org.apache.zookeeper.test.InvalidSnapshotTest.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootTest.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootClientTest.java</file><file>src.recipes.lock.src.java.org.apache.zookeeper.recipes.lock.WriteLock.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.proto.BookieClient.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocket.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.proto.PerChannelBookieClient.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.LogSkipList.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.CloseTest.java</file><file>src.java.test.org.apache.zookeeper.JUnit4ZKTestRunner.java</file></fixedFiles></bug><bug fixdate="2010-08-17 08:26:03" id="809" opendate="2010-07-10 04:18:29"><buginformation><summary>[ZOOKEEPER-809] Improved REST Interface - ASF JIRA</summary><description>I would like to extend the existing REST Interface to also support: configuration ephemeral znodes watches - PubSubHubbub ACLs basic authentication I want to do this because when building web applications that talks directly to ZooKeeper a REST API it's a lot easier to use (there is no protocol mismatch) than an API that uses persistent connections. I plan to use the improved version to build a web-based administrative interface.</description></buginformation><fixedFiles><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.GetTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.SetTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.WadlTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.RootTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.Base.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.resources.ZNodeResource.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.DeleteTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.GetChildrenTest.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.CreateTest.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.RestMain.java</file><file>src.contrib.rest.src.test.org.apache.zookeeper.server.jersey.ExistsTest.java</file><file>src.contrib.rest.src.java.org.apache.zookeeper.server.jersey.ZooKeeperService.java</file></fixedFiles></bug><bug fixdate="2010-07-05 08:53:50" id="789" opendate="2010-06-18 10:01:19"><buginformation><summary>[ZOOKEEPER-789] Improve FLE log messages - ASF JIRA</summary><description>Notification messages are quite important to determine what is going with leader election. The main idea of this improvement is name the fields we output in notification log messages.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.FastLeaderElection.java</file></fixedFiles></bug><bug fixdate="2010-06-25 09:11:29" id="788" opendate="2010-06-17 05:45:45"><buginformation><summary>[ZOOKEEPER-788] Add server id to message logs - ASF JIRA</summary><description>As discussed on IRC. The log visualisation needs some way of determining which server made which log. If the log segment is taken for a time period where no elections take place, there is no way to determine the id of the server.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerConfig.java</file><file>src.contrib.loggraph.src.java.org.apache.zookeeper.graph.Log4JSource.java</file></fixedFiles></bug><bug fixdate="2010-08-18 07:25:43" id="733" opendate="2010-04-05 03:44:46"><buginformation><summary>[ZOOKEEPER-733] use netty to handle client connections - ASF JIRA</summary><description>we currently have our own asynchronous NIO socket engine to be able to handle lots of clients with a single thread. over time the engine has become more complicated. we would also like the engine to use multiple threads on machines with lots of cores. plus, we would like to be able to support things like SSL. if we switch to netty, we can simplify our code and get the previously mentioned benefits.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.PendingReadOp.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServerBean.java</file><file>src.java.main.org.apache.zookeeper.server.PrepRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FollowerRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServerMain.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxn.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Learner.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumCnxManager.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumBase.java</file><file>src.java.test.org.apache.zookeeper.test.RepeatStartupTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerMetadata.java</file><file>src.java.test.org.apache.zookeeper.test.RecoveryTest.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncHammerTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientBase.java</file><file>src.java.test.org.apache.zookeeper.test.PurgeTxnTest.java</file><file>src.java.test.org.apache.zookeeper.test.WatcherTest.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.tools.BookKeeperTools.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerOpenOp.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Leader.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LeaderZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LearnerZooKeeperServer.java</file><file>src.java.test.org.apache.zookeeper.test.TruncateTest.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FastLeaderElection.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.FollowerZooKeeperServer.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieRecoveryTest.java</file><file>src.java.main.org.apache.zookeeper.server.ConnectionBean.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>src.java.main.org.apache.zookeeper.server.SyncRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.CommitProcessor.java</file><file>src.java.test.org.apache.zookeeper.test.ACLTest.java</file><file>src.java.main.org.apache.zookeeper.server.auth.IPAuthenticationProvider.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieReadWriteTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ObserverRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.SessionTrackerImpl.java</file><file>src.java.test.org.apache.zookeeper.server.InvalidSnapshotTest.java</file><file>src.java.test.org.apache.zookeeper.test.LENonTerminateTest.java</file><file>src.java.test.org.apache.zookeeper.test.InvalidSnapshotTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.Follower.java</file><file>src.java.test.org.apache.zookeeper.test.UpgradeTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.LocalPeerBean.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerMain.java</file><file>src.java.main.org.apache.zookeeper.server.auth.DigestAuthenticationProvider.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxn.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.PendingAddOp.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.proto.PerChannelBookieClient.java</file><file>src.java.test.org.apache.zookeeper.test.SessionTest.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>src.java.test.org.apache.zookeeper.server.CRCTest.java</file><file>src.java.test.org.apache.zookeeper.test.DisconnectableZooKeeper.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ProposalRequestProcessor.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerRecoveryOp.java</file><file>src.java.test.org.apache.zookeeper.test.OOMTest.java</file><file>src.java.test.org.apache.zookeeper.test.ObserverTest.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxn.java</file><file>src.java.test.org.apache.zookeeper.test.ClientPortBindTest.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxnFactory.java</file></fixedFiles></bug><bug fixdate="2010-03-31 05:26:42" id="724" opendate="2010-03-23 09:54:03"><buginformation><summary>[ZOOKEEPER-724] Improve junit test integration - log harness information - ASF JIRA</summary><description>Currently we have ad-hoc logging (log4j) of setup/teardown and test start/end. Without this information it's often difficult to determine what's going on (major milestones) in the logs relative to the tests performed. In junit 4.x "@Rule" annotations have been added that allow this to be done much more easily. This patch will add this. In particular we can access the test name easily during setup/teardown and the test itself. Additionally we can log more information on success/failure of each test.</description></buginformation><fixedFiles><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsQuorumTest.java</file><file>src.java.test.org.apache.zookeeper.test.KeeperStateTest.java</file><file>src.java.test.org.apache.zookeeper.server.ZooKeeperServerTest.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumZxidSyncTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLETest.java</file><file>src.java.test.org.apache.zookeeper.server.SerializationPerfTest.java</file><file>src.java.test.org.apache.zookeeper.test.ACLRootTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientRetry.java</file><file>src.java.test.org.apache.zookeeper.test.WatcherFuncTest.java</file><file>src.java.test.org.apache.zookeeper.test.RepeatStartupTest.java</file><file>src.java.test.org.apache.zookeeper.test.RecoveryTest.java</file><file>src.java.test.org.apache.zookeeper.test.GetChildren2Test.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncHammerTest.java</file><file>src.java.test.org.apache.zookeeper.test.CreateModeTest.java</file><file>src.java.test.org.apache.zookeeper.server.DataTreeUnitTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientBase.java</file><file>src.java.test.org.apache.zookeeper.test.WatcherTest.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootAsyncTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLERestartTest.java</file><file>src.java.test.org.apache.zookeeper.test.DataTreeTest.java</file><file>src.java.test.org.apache.zookeeper.test.SyncCallTest.java</file><file>src.java.test.org.apache.zookeeper.test.TruncateTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientHammerTest.java</file><file>src.java.test.org.apache.zookeeper.test.AuthTest.java</file><file>src.java.test.org.apache.zookeeper.test.CnxManagerTest.java</file><file>src.java.test.org.apache.zookeeper.test.ZooKeeperTestClient.java</file><file>src.java.test.org.apache.zookeeper.test.StatTest.java</file><file>src.java.test.org.apache.zookeeper.test.LETest.java</file><file>src.java.test.org.apache.zookeeper.test.WatchedEventTest.java</file><file>src.java.test.org.apache.zookeeper.test.HierarchicalQuorumTest.java</file><file>src.java.test.org.apache.zookeeper.server.DeserializationPerfTest.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncTest.java</file><file>src.java.test.org.apache.zookeeper.test.ZooKeeperQuotaTest.java</file><file>src.java.test.org.apache.zookeeper.test.ACLTest.java</file><file>src.java.test.org.apache.zookeeper.server.ToStringTest.java</file><file>src.java.test.org.apache.zookeeper.server.ZooKeeperServerMainTest.java</file><file>src.java.test.org.apache.zookeeper.server.InvalidSnapshotTest.java</file><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsTest.java</file><file>src.java.test.org.apache.zookeeper.test.LENonTerminateTest.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootTest.java</file><file>src.java.test.org.apache.zookeeper.test.InvalidSnapshotTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLEZeroWeightTest.java</file><file>src.java.test.org.apache.zookeeper.test.UpgradeTest.java</file><file>src.java.test.org.apache.zookeeper.test.ChrootClientTest.java</file><file>src.java.test.org.apache.zookeeper.server.quorum.QuorumPeerTestBase.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncOps.java</file><file>src.java.test.org.apache.zookeeper.test.AsyncOpsTest.java</file><file>src.java.test.org.apache.zookeeper.test.SessionTest.java</file><file>src.java.test.org.apache.zookeeper.server.quorum.QuorumPeerMainTest.java</file><file>src.java.test.org.apache.zookeeper.test.FLENewEpochTest.java</file><file>src.java.test.org.apache.zookeeper.server.CRCTest.java</file><file>src.java.test.org.apache.zookeeper.test.DisconnectableZooKeeper.java</file><file>src.java.test.org.apache.zookeeper.test.FLELostMessageTest.java</file><file>src.java.test.org.apache.zookeeper.test.EventTypeTest.java</file><file>src.java.test.org.apache.zookeeper.test.MaxCnxnsTest.java</file><file>src.java.test.org.apache.zookeeper.test.ClientPortBindTest.java</file><file>src.java.test.org.apache.zookeeper.test.ZkDatabaseCorruptionTest.java</file></fixedFiles></bug><bug fixdate="2011-01-06 04:08:01" id="500" opendate="2009-08-06 12:01:48"><buginformation><summary>[ZOOKEEPER-500] Async methods shouldnt throw exceptions - ASF JIRA</summary><description>Async methods like asyncLedgerCreate and Open shouldnt be throwing InterruptedException and BKExceptions. The present method signatures lead to messy application code since one is forced to have error handling code in 2 places: inside the callback to handler a non-OK return code, and outside for handling the exceptions thrown by the call. There should be only one way to indicate error conditions, and that should be through a non-ok return code to the callback.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.BKException.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerRecoveryOp.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerHandle.java</file></fixedFiles></bug></bugrepository>