<?xml version="1.0" encoding="UTF-8" standalone="no"?><bugrepository><bug fixdate="2011-09-02 09:51:29" id="1107" opendate="2011-06-23 03:48:22"><buginformation><summary>[ZOOKEEPER-1107] automating log and snapshot cleaning - ASF JIRA</summary><description>I like to have ZK itself manage the amount of snapshots and logs kept, instead of relying on the PurgeTxnLog utility.</description></buginformation><fixedFiles><file>src.java.test.org.apache.zookeeper.ZooKeeperPurgeTest.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeperPurger.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerConfig.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerMain.java</file><file>src.java.main.org.apache.zookeeper.server.DatadirCleanupManager.java</file><file>src.java.test.org.apache.zookeeper.server.DatadirCleanupManagerTest.java</file></fixedFiles></bug><bug fixdate="2011-07-19 01:59:54" id="992" opendate="2011-02-17 04:29:24"><buginformation><summary>[ZOOKEEPER-992] MT Native Version of Windows C Client - ASF JIRA</summary><description>This is an extention of the work in https://issues.apache.org/jira/browse/ZOOKEEPER-859</description></buginformation><fixedFiles><file>src.java.main.org.apache.jute.compiler.JRecord.java</file></fixedFiles></bug><bug fixdate="2011-06-30 11:54:23" id="965" opendate="2010-12-28 12:18:46"><buginformation><summary>[ZOOKEEPER-965] Need a multi-update command to allow multiple znodes to be updated safely - ASF JIRA</summary><description>The basic idea is to have a single method called "multi" that will accept a list of create, delete, update or check objects each of which has a desired version or file state in the case of create. If all of the version and existence constraints can be satisfied, then all updates will be done atomically. Two API styles have been suggested. One has a list as above and the other style has a "Transaction" that allows builder-like methods to build a set of updates and a commit method to finalize the transaction. This can trivially be reduced to the first kind of API so the list based API style should be considered the primitive and the builder style should be implemented as syntactic sugar. The total size of all the data in all updates and creates in a single transaction should be limited to 1MB. Implementation-wise this capability can be done using standard ZK internals. The changes include: update to ZK clients to all the new call additional wire level request on the server, in the code that converts transactions to idempotent form, the code should be slightly extended to convert a list of operations to idempotent form. on the client, a down-rev server that rejects the multi-update should be detected gracefully and an informative exception should be thrown. To facilitate shared development, I have established a github repository at https://github.com/tdunning/zookeeper and am happy to extend committer status to anyone who agrees to donate their code back to Apache. The final patch will be attached to this bug as normal.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.ReadOnlyRequestProcessor.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.QuorumCnxManager.java</file><file>a.src.java.main.org.apache.zookeeper.ZooDefs.java</file><file>src.java.main.org.apache.zookeeper.server.PrepRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.persistence.FileTxnSnapLog.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxn.java</file><file>src.java.test.org.apache.zookeeper.test.QuorumBase.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>src.java.main.org.apache.zookeeper.server.DataTree.java</file><file>src.java.test.org.apache.zookeeper.test.ClientBase.java</file><file>a.src.java.main.org.apache.zookeeper.server.TraceFormatter.java</file><file>src.java.test.org.apache.zookeeper.test.DataTreeTest.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ReadOnlyZooKeeperServer.java</file><file>a.src.java.main.org.apache.zookeeper.server.Request.java</file><file>src.java.main.org.apache.zookeeper.server.Request.java</file><file>src.java.test.org.apache.zookeeper.test.ReadOnlyModeTest.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.CommitProcessor.java</file><file>a.src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>a.src.java.main.org.apache.zookeeper.server.RequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.KeeperException.java</file><file>a.src.java.main.org.apache.zookeeper.server.DataTree.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.ReadOnlyBean.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.FastLeaderElection.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>a.src.java.main.org.apache.zookeeper.server.PrepRequestProcessor.java</file><file>a.src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.Follower.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocketNIO.java</file><file>a.src.java.test.org.apache.zookeeper.test.FLETest.java</file><file>src.java.main.org.apache.zookeeper.server.RequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.util.SerializeUtils.java</file><file>src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.CommitProcessor.java</file><file>a.src.java.test.org.apache.zookeeper.test.CnxManagerTest.java</file><file>src.java.main.org.apache.zookeeper.server.TraceFormatter.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.Leader.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxn.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocket.java</file><file>src.java.main.org.apache.zookeeper.ZooDefs.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>src.java.test.org.apache.zookeeper.test.LoadFromLogTest.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxn.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.Watcher.java</file></fixedFiles></bug><bug fixdate="2011-08-18 11:05:54" id="938" opendate="2010-11-23 05:25:18"><buginformation><summary>[ZOOKEEPER-938] Support Kerberos authentication of clients. - ASF JIRA</summary><description>Support Kerberos authentication of clients. The following usage would let an admin use Kerberos authentication to assign ACLs to authenticated clients. 1. Admin logs into zookeeper (not necessarily through Kerberos however). 2. Admin decides that a new node called '/mynode' should be owned by the user 'zkclient' and have full permissions on this. 3. Admin does: zk&gt; create /mynode content sasl:zkclient@FOOFERS.ORG:cdrwa 4. User 'zkclient' logins to kerberos using the command line utility 'kinit'. 5. User connects to zookeeper server using a Kerberos-enabled version of zkClient (ZookeeperMain). 6. Behind the scenes, the client and server exchange authentication information. User is now authenticated as 'zkclient'. 7. User accesses /mynode with permissions 'cdrwa'.</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeer.java</file><file>a.src.java.main.org.apache.zookeeper.ClientCnxnSocketNIO.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>a.src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>a.src.java.main.org.apache.zookeeper.server.NIOServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxnFactory.java</file><file>a.src.java.main.org.apache.zookeeper.server.ServerConfig.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocketNIO.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>a.src.java.main.org.apache.zookeeper.ZooDefs.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServerMain.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxn.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerConfig.java</file><file>src.java.main.org.apache.zookeeper.server.FinalRequestProcessor.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerConfig.java</file><file>a.src.java.main.org.apache.zookeeper.Watcher.java</file><file>a.src.java.main.org.apache.zookeeper.server.NettyServerCnxnFactory.java</file><file>a.src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerMain.java</file><file>a.src.java.main.org.apache.zookeeper.ClientCnxnSocket.java</file><file>src.java.main.org.apache.zookeeper.server.ServerConfig.java</file><file>a.src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>a.src.java.main.org.apache.zookeeper.ClientCnxn.java</file><file>a.src.java.main.org.apache.zookeeper.server.NettyServerCnxn.java</file><file>src.java.main.org.apache.zookeeper.server.quorum.QuorumPeerMain.java</file><file>a.src.java.main.org.apache.zookeeper.server.ServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.NettyServerCnxn.java</file><file>a.src.java.main.org.apache.zookeeper.server.ZooKeeperServerMain.java</file><file>src.java.main.org.apache.zookeeper.ClientCnxnSocket.java</file><file>src.java.main.org.apache.zookeeper.ZooDefs.java</file><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>src.java.test.org.apache.zookeeper.TestableZooKeeper.java</file><file>a.src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>a.src.java.main.org.apache.zookeeper.server.Request.java</file><file>src.java.main.org.apache.zookeeper.server.Request.java</file><file>a.src.java.main.org.apache.zookeeper.ZooKeeper.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxn.java</file><file>src.java.main.org.apache.zookeeper.server.ServerCnxnFactory.java</file><file>src.java.main.org.apache.zookeeper.server.ZooKeeperServer.java</file><file>src.java.main.org.apache.zookeeper.Watcher.java</file><file>a.src.java.main.org.apache.zookeeper.server.ServerCnxn.java</file></fixedFiles></bug><bug fixdate="2010-08-19 10:29:46" id="775" opendate="2010-05-18 05:21:30"><buginformation><summary>[ZOOKEEPER-775] A large scale pub/sub system - ASF JIRA</summary><description>we have developed a large scale pub/sub system based on ZooKeeper and BookKeeper.</description></buginformation><fixedFiles><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.StubPersistenceManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.benchmark.HedwigBenchmark.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.FileUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.regions.RegionManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.WriteCallback.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.zookeeper.ZooKeeperTestBase.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.Callback.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.ClientChannelPipelineFactory.java</file><file>src.contrib.hedwig.protocol.src.main.java.org.apache.hedwig.exceptions.PubSubException.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.netty.PubSubServerPipelineFactory.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.ZkSubscriptionManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.conf.ClientConfiguration.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.UnexpectedError.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.SubscriptionEventListener.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.api.Subscriber.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.zookeeper.SafeAsyncCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.MapMethods.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.benchmark.BenchmarkSubscriber.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.PersistenceManagerWithRangeScan.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.subscriptions.StubSubscriptionManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.MessageFilter.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.TopicOpQueuer.java</file><file>src.contrib.hedwig.client.src.test.java.org.apache.hedwig.client.AppTest.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.topics.TestZkTopicManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.HedwigProxy.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.Option.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.delivery.FIFODeliveryManager.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestReadAheadCacheBlackBox.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.exceptions.TooManyServerRedirectsException.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.exceptions.InvalidSubscriberIdException.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.ssl.SslClientContextFactory.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.data.MessageConsumeData.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.data.PubSubData.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyConsumeHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.integration.TestHedwigRegion.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.topics.TopicOwnershipChangeListener.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.exceptions.ServerRedirectLoopException.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.regions.HedwigHubSubscriber.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxySubscribeHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.handlers.TestBaseHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.AllToAllTopologyFilter.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.ServerControlDaemon.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.topics.TrivialOwnAllTopicManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.SubscribeResponseHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestBookkeeperPersistenceManagerWhiteBox.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.delivery.StubDeliveryManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.delivery.DeliveryEndPoint.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.ScanCallback.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.MessageConsumeCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.InMemorySubscriptionState.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestPersistenceManagerBlackBox.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.SubscribeReconnectCallback.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.HedwigRegionTestBase.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.UnsubscribeResponseHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.PublishHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.HelperMethods.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyStopDeliveryHandler.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.ssl.SslContextFactory.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.HedwigPublisher.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ChannelTracker.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.SubscribeHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.LocalDBPersistenceManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.topics.ZkTopicManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.ResponseHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.SubscriptionManager.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestReadAheadCacheWhiteBox.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.Handler.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.api.Publisher.java</file><file>src.contrib.hedwig.protocol.src.main.java.org.apache.hedwig.protoextensions.MessageIdUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.PersistenceManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.data.TopicSubscriber.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.Either.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.HedwigSocketAddress.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.delivery.DeliveryManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.Factory.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.delivery.ChannelEndPoint.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.ConcurrencyUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.topics.AbstractTopicManager.java</file><file>src.contrib.hedwig.protocol.src.main.java.org.apache.hedwig.protoextensions.PubSubResponseUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.ScanCallbackWithContext.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.regions.HedwigHubClientFactory.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.zookeeper.SafeAsyncZKCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.regions.HedwigHubClient.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.netty.TestPubSubServer.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.BaseHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.integration.TestHedwigHub.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.benchmark.FakeBookie.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.BookkeeperPersistenceManager.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.PubSubCallback.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.StubScanCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.delivery.DeliveryCallback.java</file><file>src.contrib.hedwig.client.src.test.java.org.apache.hedwig.util.TestFileUtils.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.StubCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.ScanRequest.java</file><file>src.contrib.hedwig.client.src.test.java.org.apache.hedwig.util.TestPathUtils.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.conf.AbstractConfiguration.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyStartDeliveryHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.UnsubscribeHandler.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.benchmark.BenchmarkUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.benchmark.BookkeeperBenchmark.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.netty.UmbrellaHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.zookeeper.SafeAsynBKCallback.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.subscriptions.TestZkSubscriptionManager.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.client.TestPubSubClient.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestBookKeeperPersistenceManagerBlackBox.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.benchmark.BenchmarkWorker.java</file><file>src.contrib.hedwig.client.src.test.java.org.apache.hedwig.util.TestHedwigSocketAddress.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.topics.TopicManager.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.zookeeper.TestZkUtils.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.HedwigHubTestBase.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.CacheKey.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.HedwigClient.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.StubScanCallback.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.ssl.SslServerContextFactory.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.CacheValue.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.ConnectCallback.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.CallbackUtils.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.benchmark.BenchmarkPublisher.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyUnsubscribeHandler.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.handlers.PublishResponseHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.handlers.TestSubUnsubHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.ByteStringInterner.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.netty.HedwigSubscriber.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.ServerConfiguration.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.TrueFilter.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.subscriptions.InMemorySubscriptionManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.netty.PubSubServer.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.PersistRequest.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.ChannelDisconnectListener.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.client.api.MessageHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.ServerControl.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyPublishHander.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.handlers.ConsumeHandler.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.zookeeper.ZkUtils.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.PathUtils.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.common.TerminateJVMExceptionHandler.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.PubSubServerStandAloneTestBase.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.BookKeeperTestBase.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.persistence.TestLocalDBPersistenceManagerBlackBox.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.ReadAheadCache.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.persistence.RangeScanRequest.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.netty.WriteRecordingChannel.java</file><file>src.contrib.hedwig.protocol.src.main.java.org.apache.hedwig.protoextensions.SubscriptionStateUtils.java</file><file>src.contrib.hedwig.client.src.main.java.org.apache.hedwig.util.Pair.java</file><file>src.contrib.hedwig.server.src.test.java.org.apache.hedwig.server.topics.StubTopicManager.java</file><file>src.contrib.hedwig.server.src.main.java.org.apache.hedwig.server.proxy.ProxyConfiguration.java</file></fixedFiles></bug><bug fixdate="2010-05-03 10:50:41" id="747" opendate="2010-04-22 04:17:33"><buginformation><summary>[ZOOKEEPER-747] Add C# generation to Jute - ASF JIRA</summary><description>The following patch adds a new language, C#, to the Jute code generation. The code that is generated does have a dependency on a third party library, Jon Skeet's MiscUtil, which is Apache licensed. The library is necessary because C# does not provide big endian support in the base class libraries. As none of the existing Jute code has any unit tests, I have not added tests for this patch.</description></buginformation><fixedFiles><file>src.java.main.org.apache.jute.compiler.JBuffer.java</file><file>src.java.main.org.apache.jute.compiler.JCompType.java</file><file>src.java.main.org.apache.jute.compiler.JByte.java</file><file>src.java.main.org.apache.jute.compiler.JString.java</file><file>src.java.main.org.apache.jute.compiler.JDouble.java</file><file>src.java.main.org.apache.jute.compiler.JFloat.java</file><file>src.java.main.org.apache.jute.compiler.JFile.java</file><file>src.java.main.org.apache.jute.compiler.JLong.java</file><file>src.java.main.org.apache.jute.compiler.JBoolean.java</file><file>src.java.main.org.apache.jute.compiler.JInt.java</file><file>src.java.main.org.apache.jute.compiler.JVector.java</file><file>src.java.main.org.apache.jute.compiler.CSharpGenerator.java</file><file>src.java.main.org.apache.jute.compiler.JRecord.java</file><file>src.java.main.org.apache.jute.compiler.JMap.java</file><file>src.java.main.org.apache.jute.compiler.JType.java</file></fixedFiles></bug><bug fixdate="2010-07-05 07:22:10" id="744" opendate="2010-04-19 09:14:42"><buginformation><summary>[ZOOKEEPER-744] Add monitoring four-letter word - ASF JIRA</summary><description>Filing a feature request based on a zookeeper-user discussion. Zookeeper should have a new four-letter word that returns key-value pairs appropriate for importing to a monitoring system (such as Ganglia which has a large installed base) This command should initially export the following: (a) Count of instances in the ensemble. (b) Count of up-to-date instances in the ensemble. But be designed such that in the future additional data can be added. For example, the output could define the statistic in a comment, then print a key "space character" value line: """ Total number of instances in the ensemble zk_ensemble_instances_total 5 Number of instances currently participating in the quorum. zk_ensemble_instances_active 4 """ From the mailing list: """ Date: Mon, 19 Apr 2010 12:10:44 -0700 From: Patrick Hunt &lt;phunt@apache.org&gt; To: zookeeper-user@hadoop.apache.org Subject: Re: Recovery issue - how to debug? On 04/19/2010 11:55 AM, Travis Crawford wrote: &gt; It would be a lot easier from the operations perspective if the leader &gt; explicitly published some health stats: &gt; &gt; (a) Count of instances in the ensemble. &gt; (b) Count of up-to-date instances in the ensemble. &gt; &gt; This would greatly simplify monitoring&amp; alerting - when an instance &gt; falls behind one could configure their monitoring system to let &gt; someone know and take a look at the logs. That's a great idea. Please enter a JIRA for this - a new 4 letter word and JMX support. It would also be a great starter project for someone interested in becoming more familiar with the server code. Patrick """</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.server.NIOServerCnxn.java</file><file>src.java.test.org.apache.zookeeper.test.ClientBase.java</file><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsTest.java</file><file>src.java.test.org.apache.zookeeper.test.WatcherTest.java</file><file>src.java.test.org.apache.zookeeper.test.FourLetterWordsQuorumTest.java</file><file>src.java.main.org.apache.zookeeper.server.WatchManager.java</file><file>src.java.main.org.apache.zookeeper.server.DataTreeBean.java</file><file>src.java.main.org.apache.zookeeper.server.DataTree.java</file></fixedFiles></bug><bug fixdate="2010-04-15 08:26:48" id="729" opendate="2010-03-26 07:30:44"><buginformation><summary>[ZOOKEEPER-729] Recursively delete a znode - zkCli.sh rmr /node - ASF JIRA</summary><description>Recursively delete a given znode in zookeeper, from the command-line. New operation "rmr" added to zkclient. $ ./zkCli.sh rmr /node</description></buginformation><fixedFiles><file>src.java.main.org.apache.zookeeper.ZooKeeperMain.java</file><file>src.java.main.org.apache.zookeeper.ZooKeeper.java</file></fixedFiles></bug><bug fixdate="2011-02-19 04:01:22" id="712" opendate="2010-03-18 03:39:08"><buginformation><summary>[ZOOKEEPER-712] Bookie recovery - ASF JIRA</summary><description>Recover the ledger fragments of a bookie once it crashes.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.DigestManager.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.AsyncCallback.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.DistributionSchedule.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieRecoveryTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerHandle.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerMetadata.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.BookKeeper.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.tools.BookKeeperTools.java</file></fixedFiles></bug><bug fixdate="2011-02-17 09:53:48" id="465" opendate="2009-07-13 09:24:41"><buginformation><summary>[ZOOKEEPER-465] Ledger size in bytes - ASF JIRA</summary><description>It is currently easy to know how many entries a ledger has, but there is no easy way to know the total number of bytes in a ledger. The idea of this jira is to add a method that gives the number of bytes in a closed ledger. My current idea is to simply have the writer counting the number of bytes written and store it to ZooKeeper.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.DigestManager.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.PendingReadOp.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.AsyncLedgerOpsTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerRecoveryOp.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.LedgerRecoveryTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerHandle.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerMetadata.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.BookieReadWriteTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerEntry.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.tools.BookKeeperTools.java</file></fixedFiles></bug><bug fixdate="2010-05-13 09:24:49" id="464" opendate="2009-07-13 09:20:34"><buginformation><summary>[ZOOKEEPER-464] Need procedure to garbage collect ledgers - ASF JIRA</summary><description>An application using BookKeeper is likely to use a large number of ledgers over time. Such an application might not need all ledgers created over time and might want to delete some of these ledgers to free up some space on bookies. The idea of this jira is to implement a procedure that enables an application to garbage-collect unwanted ledgers. To garbage-collect a ledger, we need to delete the ledger metadata on ZooKeeper, and delete the ledger data on corresponding bookies.</description></buginformation><fixedFiles><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.AsyncCallback.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.LedgerDeleteOp.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.LedgerCache.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.LedgerDeleteTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.client.BookKeeper.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.EntryLogger.java</file><file>src.contrib.bookkeeper.test.org.apache.bookkeeper.test.CloseTest.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.BufferedChannel.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.Bookie.java</file><file>src.contrib.bookkeeper.src.java.org.apache.bookkeeper.bookie.FileInfo.java</file></fixedFiles></bug></bugrepository>