public  abstract input handler repeat count 
 adds a key binding to this input handler  the key binding is a list of white space separated key strokes of the form i modifiers key i where modifier is c for  control a for  alt or s for  shift and key is either a character a z or a field name in the  key event class prefixed with vk  e g back space param key binding  the key binding param action  the action since j edit pre public void add key binding  string key binding  string action add key binding key binding  object action 
 adds a key binding to this input handler  the key binding is a list of white space separated key strokes of the form i modifiers key i where modifier is c for  control a for  alt or s for  shift and key is either a character a z or a field name in the  key event class prefixed with vk  e g back space param key binding  the key binding param action  the action public void add key binding  string key binding e action add key binding key binding  object action 
 adds a key binding to this input handler  the key binding is a list of white space separated key strokes of the form i modifiers key i where modifier is c for  control a for  alt or s for  shift and key is either a character a z or a field name in the  key event class prefixed with vk  e g back space param key binding  the key binding param action  the action since j edit pre public void add key binding  string key binding  object action  hashtable current bindings  string prefix str null  string tokenizer st new  string tokenizer key binding while st has more tokens  string key code str st next token if prefix str null prefix str key code str else prefix str prefix str key code str  key event translator  key key stroke  key event translator parse key key code str if key stroke null return if st has more tokens  object o current get key stroke if o instanceof  hashtable current  hashtable o else  hashtable hash new  hashtable hash put prefix str prefix str o hash current put key stroke o current  hashtable o else current put key stroke action 
 removes a key binding from this input handler  this is not yet implemented param key binding  the key binding public void remove key binding  string key binding  hashtable current bindings  string tokenizer st new  string tokenizer key binding while st has more tokens  string key code str st next token  key event translator  key key stroke  key event translator parse key key code str if key stroke null return if st has more tokens  object o current get key stroke if o instanceof  hashtable current  hashtable o else if o null we have binding foo but user asks to remove foo bar current remove key stroke return else user asks to remove non existent return else current remove key stroke 
 removes all key bindings from this input handler public void remove all key bindings bindings clear 
 returns either an edit action or a hashtable if the specified key is a prefix param key binding  the key binding since j edit pre public  object get key binding  string key binding  hashtable current bindings  string tokenizer st new  string tokenizer key binding while st has more tokens  key event translator  key key stroke  key event translator parse key st next token if key stroke null return null if st has more tokens  object o current get key stroke if o instanceof  hashtable if st has more tokens return o else current  hashtable o else return o else return current get key stroke return null 
 returns the number of times the last action was executed  it can be used with smart home and smart end return the number of times the last action was executed since j edit pre public int get last action count return last action count 
 resets the last action count  this should be called when an editing operation that is not an action is invoked for example a mouse click since j edit pre public void reset last action count last action count 
public  key listener get key event interceptor return key event interceptor 
 sets the listener that will handle all key events in this view  for example the complete word command uses this so that all key events are passed to the word list popup while it is visible param key event interceptor the  key listener that will receive the events public void set key event interceptor  key listener key event interceptor this key event interceptor key event interceptor 
 returns if a prefix key has been pressed public boolean is prefix active return read next char null 
 replace the set of key bindings since j edit pre public void set bindings  hashtable bindings this bindings this current bindings bindings 
public void set current bindings  hashtable bindings current bindings bindings 
 if protected void send shortcut prefix off if shortcut on  shortcut prefix active event fire prefix state change null false shortcut on false 
param evt the keyboard event param from the source it can be link org gjt sp jedit  view view link org gjt sp jedit  view action bar or link org gjt sp jedit  view text area param mode the mode is press or type and is used for debug only param global tell if the event comes from the  default keyboard focus manager or not protected void process key event key stroke handling  key event evt int from  string mode boolean global  key event translator  key key stroke  key event translator translate key event evt if key stroke null key stroke set is from global context global if  debug dump key events  log log  log debug this  translated key mode key stroke from from boolean consumed false if handle key key stroke key stroke is phantom evt consume consumed true if  debug dump key events  log log  log debug this  translated key mode key stroke from from consumed consumed 
public  abstract input handler repeat count 
 returns the number of times the last action was executed  it can be used with smart home and smart end return the number of times the last action was executed since j edit pre public int get last action count return last action count 
 resets the last action count  this should be called when an editing operation that is not an action is invoked for example a mouse click since j edit pre public void reset last action count last action count 
public  key listener get key event interceptor return key event interceptor 
 sets the listener that will handle all key events in this view  for example the complete word command uses this so that all key events are passed to the word list popup while it is visible param key event interceptor the  key listener that will receive the events public void set key event interceptor  key listener key event interceptor this key event interceptor key event interceptor 
 returns if a prefix key has been pressed public boolean is prefix active return read next char null 
param evt the keyboard event param from the source it can be link org gjt sp jedit  view view link org gjt sp jedit  view action bar or link org gjt sp jedit  view text area param mode the mode is press or type and is used for debug only param global tell if the event comes from the  default keyboard focus manager or not protected void process key event key stroke handling  key event evt int from  string mode boolean global  key event translator  key key stroke  key event translator translate key event evt if key stroke null key stroke set is from global context global if  debug dump key events  log log  log debug this  translated key mode key stroke from from boolean consumed false if handle key key stroke key stroke is phantom evt consume consumed true if  debug dump key events  log log  log debug this  translated key mode key stroke from from consumed consumed 
