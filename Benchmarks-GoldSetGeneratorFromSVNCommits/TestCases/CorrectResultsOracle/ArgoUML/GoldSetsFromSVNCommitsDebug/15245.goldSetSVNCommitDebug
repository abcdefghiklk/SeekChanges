SVN Commit: 15245
File Name and Type: M	trunk_src_argouml-core-model-mdr_src_org_argouml_model_mdr_CoreFactoryMDRImpl.java
Reading file: TestCases/Input/ArgoUML/SVNFilesSideBySide/15245/trunk_src_argouml-core-model-mdr_src_org_argouml_model_mdr_CoreFactoryMDRImpl.java.vPrevious
org.argouml.model.mdr.CoreFactoryMDRImpl.CoreFactoryMDRImpl	1	MDRModelImplementation	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAbstraction	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAbstraction	3	String	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createArtifact	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociation	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationEnd	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAttribute	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createBinding	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createComment	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createComponent	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createConstraint	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createDataType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createDependency	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createElementResidence	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildElementResidence	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumeration	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumerationLiteral	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumerationLiteral	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createFlow	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createGeneralization	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createInterface	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createMethod	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createNode	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createOperation	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createParameter	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPermission	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitive	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitiveType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createProgrammingLanguageDataType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateArgument	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateParameter	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createUsage	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	6	Classifier	boolean	AggregationKind	Classifier	boolean	AggregationKind	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	5	Object	Object	Object	Object	Boolean	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	5	Object	boolean	Object	boolean	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd	11	Object	String	Object	Object	Object	boolean	Object	Object	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.getMaxUpper	1	Multiplicity	
org.argouml.model.mdr.CoreFactoryMDRImpl.getMultiplicity11	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass	3	UmlClass	Classifier	Classifier	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildDataType	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumeration	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildDependency	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermission	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageImport	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermissionInternal	2	ModelElement	ModelElement	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageAccess	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization	3	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildMethod	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	4	Object	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation2	3	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	1	Classifier	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildRealization	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildTemplateArgument	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildUsage	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildComment	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildBinding	3	Object	Object	List	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAbstraction	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteArtifact	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociation	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationEnd	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAttribute	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBehavioralFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBinding	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClassifier	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComment	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComponent	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteConstraint	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDataType	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDependency	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElementResidence	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFlow	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralizableElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralization	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteInterface	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteMethod	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteModelElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNamespace	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNode	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteOperation	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteParameter	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePermission	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePresentationElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteRelationship	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteStructuralFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateArgument	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateParameter	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteUsage	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumeration	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumerationLiteral	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePrimitive	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteProgrammingLanguageDataType	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyFeature	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyDataType	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyInterface	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyEnumeration	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClassifier	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyDataType	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyGeneralizableElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyInterface	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyModelElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyNamespace	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyAttribute	2	Attribute	Attribute	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyOperation	2	Operation	Operation	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyMethod	2	Method	Method	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyReception	2	Reception	Reception	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyBehavioralFeature	2	BehavioralFeature	BehavioralFeature	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyFeature	2	Feature	Feature	
List of methods:
org.argouml.model.mdr.CoreFactoryMDRImpl.CoreFactoryMDRImpl(MDRModelImplementation)
{
  modelImpl=implementation;
  corePackage=modelImpl.getUmlPackage().getCore();
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAbstraction()
{
  Abstraction myAbstraction=corePackage.getAbstraction().createAbstraction();
  super.initialize(myAbstraction);
  return myAbstraction;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAbstraction(String,Object,Object)
{
  if (!(client instanceof Classifier) || !(supplier instanceof Classifier)) {
    throw new IllegalArgumentException("The supplier and client of an abstraction" + "should be classifiers");
  }
  if (client.equals(supplier)) {
    throw new IllegalArgumentException("The supplier and the client " + "must be different elements");
  }
  Abstraction abstraction=createAbstraction();
  abstraction.setName(name);
  abstraction.getClient().add((Classifier)client);
  abstraction.getSupplier().add((Classifier)supplier);
  return abstraction;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createArtifact()
{
  Artifact artifact=corePackage.getArtifact().createArtifact();
  super.initialize(artifact);
  return artifact;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociation()
{
  UmlAssociation assoc=corePackage.getUmlAssociation().createUmlAssociation();
  super.initialize(assoc);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationClass()
{
  AssociationClass assoc=corePackage.getAssociationClass().createAssociationClass();
  super.initialize(assoc);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationEnd()
{
  AssociationEnd assocEnd=corePackage.getAssociationEnd().createAssociationEnd();
  super.initialize(assocEnd);
  return assocEnd;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAttribute()
{
  Attribute myAttribute=corePackage.getAttribute().createAttribute();
  super.initialize(myAttribute);
  return myAttribute;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createBinding()
{
  Binding myBinding=corePackage.getBinding().createBinding();
  super.initialize(myBinding);
  return myBinding;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createClass()
{
  UmlClass myClass=corePackage.getUmlClass().createUmlClass();
  super.initialize(myClass);
  return myClass;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createComment()
{
  Comment myComment=corePackage.getComment().createComment();
  super.initialize(myComment);
  return myComment;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createComponent()
{
  Component myComponent=corePackage.getComponent().createComponent();
  super.initialize(myComponent);
  return myComponent;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createConstraint()
{
  Constraint myConstraint=corePackage.getConstraint().createConstraint();
  super.initialize(myConstraint);
  return myConstraint;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createDataType()
{
  DataType dataType=corePackage.getDataType().createDataType();
  super.initialize(dataType);
  return dataType;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createDependency()
{
  Dependency myDependency=corePackage.getDependency().createDependency();
  super.initialize(myDependency);
  return myDependency;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createElementResidence()
{
  ElementResidence myElementResidence=corePackage.getElementResidence().createElementResidence();
  super.initialize(myElementResidence);
  return myElementResidence;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildElementResidence(Object,Object)
{
  ElementResidence myElementResidence=corePackage.getElementResidence().createElementResidence();
  super.initialize(myElementResidence);
  myElementResidence.setContainer((Component)component);
  myElementResidence.setResident((ModelElement)me);
  return myElementResidence;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumeration()
{
  Enumeration myEnumeration=corePackage.getEnumeration().createEnumeration();
  super.initialize(myEnumeration);
  return myEnumeration;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumerationLiteral()
{
  EnumerationLiteral myEnumerationLiteral=corePackage.getEnumerationLiteral().createEnumerationLiteral();
  super.initialize(myEnumerationLiteral);
  return myEnumerationLiteral;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumerationLiteral(String,Object)
{
  EnumerationLiteral el=createEnumerationLiteral();
  el.setName(name);
  el.setEnumeration((Enumeration)enumeration);
  return el;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createFlow()
{
  Flow myFlow=corePackage.getFlow().createFlow();
  super.initialize(myFlow);
  return myFlow;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createGeneralization()
{
  Generalization myGeneralization=corePackage.getGeneralization().createGeneralization();
  super.initialize(myGeneralization);
  return myGeneralization;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createInterface()
{
  Interface myInterface=corePackage.getInterface().createInterface();
  super.initialize(myInterface);
  return myInterface;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createMethod()
{
  Method myMethod=corePackage.getMethod().createMethod();
  super.initialize(myMethod);
  return myMethod;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createNode()
{
  Node myNode=corePackage.getNode().createNode();
  super.initialize(myNode);
  return myNode;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createOperation()
{
  Operation myOperation=corePackage.getOperation().createOperation();
  super.initialize(myOperation);
  return myOperation;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createParameter()
{
  Parameter myParameter=corePackage.getParameter().createParameter();
  super.initialize(myParameter);
  return myParameter;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPermission()
{
  Permission myPermission=corePackage.getPermission().createPermission();
  super.initialize(myPermission);
  return myPermission;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitive()
{
  return createPrimitiveType();
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitiveType()
{
  Primitive obj=corePackage.getPrimitive().createPrimitive();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createProgrammingLanguageDataType()
{
  ProgrammingLanguageDataType obj=corePackage.getProgrammingLanguageDataType().createProgrammingLanguageDataType();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateArgument()
{
  TemplateArgument obj=corePackage.getTemplateArgument().createTemplateArgument();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateParameter()
{
  TemplateParameter myTemplateParameter=corePackage.getTemplateParameter().createTemplateParameter();
  super.initialize(myTemplateParameter);
  return myTemplateParameter;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createUsage()
{
  Usage myUsage=corePackage.getUsage().createUsage();
  super.initialize(myUsage);
  return myUsage;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Classifier,boolean,AggregationKind,Classifier,boolean,AggregationKind)
{
  if (c1 == null || c2 == null) {
    throw new IllegalArgumentException("one of " + "the classifiers to be " + "connected is null");
  }
  Namespace ns1=c1.getNamespace();
  Namespace ns2=c2.getNamespace();
  if (ns1 == null || ns2 == null) {
    throw new IllegalArgumentException("one of " + "the classifiers does not " + "belong to a namespace");
  }
  Namespace ns=null;
  if (nav2) {
    ns=ns1;
  }
 else   if (nav1) {
    ns=ns2;
  }
 else {
    throw new IllegalArgumentException("At least one end must be navigable");
  }
  UmlAssociation assoc=createAssociation();
  assoc.setName("");
  assoc.setNamespace(ns);
  buildAssociationEnd(assoc,null,c1,null,null,nav1,null,agg1,null,null,null);
  buildAssociationEnd(assoc,null,c2,null,null,nav2,null,agg2,null,null,null);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,Object,Object,Object,Boolean)
{
  if (fromClassifier == null || toClassifier == null) {
    throw new IllegalArgumentException("one of " + "the classifiers to be " + "connected is null");
  }
  Classifier from=(Classifier)fromClassifier;
  Classifier to=(Classifier)toClassifier;
  AggregationKind agg1=(AggregationKind)aggregationKind1;
  AggregationKind agg2=(AggregationKind)aggregationKind2;
  Namespace ns1=from.getNamespace();
  if (ns1 == null) {
    throw new IllegalArgumentException("The from " + "classifiers does not " + "belong to a namespace");
  }
  UmlAssociation assoc=createAssociation();
  assoc.setName("");
  assoc.setNamespace(ns1);
  boolean nav1=true;
  boolean nav2=true;
  if (from instanceof Interface) {
    nav2=false;
    agg2=agg1;
    agg1=null;
  }
 else   if (to instanceof Interface) {
    nav1=false;
  }
 else {
    nav1=!Boolean.TRUE.equals(unidirectional);
    nav2=true;
  }
  buildAssociationEnd(assoc,null,from,null,null,nav1,null,agg1,null,null,null);
  buildAssociationEnd(assoc,null,to,null,null,nav2,null,agg2,null,null,null);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,Object)
{
  Classifier c1=(Classifier)classifier1;
  Classifier c2=(Classifier)classifier2;
  return buildAssociation(c1,true,AggregationKindEnum.AK_NONE,c2,true,AggregationKindEnum.AK_NONE);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,boolean,Object,boolean,String)
{
  UmlAssociation assoc=buildAssociation((Classifier)c1,nav1,AggregationKindEnum.AK_NONE,(Classifier)c2,nav2,AggregationKindEnum.AK_NONE);
  if (assoc != null) {
    assoc.setName(name);
  }
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass(Object,Object)
{
  if (end1 == null || end2 == null || !(end1 instanceof Classifier) || !(end2 instanceof Classifier)) {
    throw new IllegalArgumentException("either one of the arguments was null");
  }
  return buildAssociationClass(buildClass(),(Classifier)end1,(Classifier)end2);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd(Object,String,Object,Object,Object,boolean,Object,Object,Object,Object,Object)
{
  if (assoc == null || !(assoc instanceof UmlAssociation) || type == null || !(type instanceof Classifier)) {
    throw new IllegalArgumentException("either type or association " + "are null");
  }
  if (multi != null && !(multi instanceof Multiplicity)) {
    throw new IllegalArgumentException("Multiplicity");
  }
  if (stereo != null && !(stereo instanceof Stereotype)) {
    throw new IllegalArgumentException("Stereotype");
  }
  if (order != null && !(order instanceof OrderingKind)) {
    throw new IllegalArgumentException("OrderingKind");
  }
  if (aggregation != null && !(aggregation instanceof AggregationKind)) {
    throw new IllegalArgumentException("AggregationKind");
  }
  if (scope != null && !(scope instanceof ScopeKind)) {
    throw new IllegalArgumentException("ScopeKind");
  }
  if (changeable != null && !(changeable instanceof ChangeableKind)) {
    throw new IllegalArgumentException("ChangeableKind");
  }
  if (visibility != null && !(visibility instanceof VisibilityKind)) {
    throw new IllegalArgumentException("VisibilityKind");
  }
  if (type instanceof DataType || type instanceof Interface) {
    if (!navigable) {
      throw new IllegalArgumentException("Wellformedness rule 2.5.3.3 [1] is broken. " + "The Classifier of an AssociationEnd cannot" + "be an Interface or a DataType if the "+ "association is navigable away from "+ "that end.");
    }
    List<AssociationEnd> ends=new ArrayList<AssociationEnd>();
    ends.addAll(((UmlAssociation)assoc).getConnection());
    for (    AssociationEnd end : ends) {
      if (end.isNavigable()) {
        throw new IllegalArgumentException("type is either " + "datatype or " + "interface and is "+ "navigable to");
      }
    }
  }
  if (aggregation != null && aggregation.equals(AggregationKindEnum.AK_COMPOSITE) && multi != null && getMaxUpper((Multiplicity)multi) > 1) {
    throw new IllegalArgumentException("aggregation is composite " + "and multiplicity > 1");
  }
  AssociationEnd end=createAssociationEnd();
  end.setAssociation((UmlAssociation)assoc);
  end.setParticipant((Classifier)type);
  end.setName(name);
  List<AssociationEnd> ends=((UmlAssociation)assoc).getConnection();
  if (ends.size() >= 3) {
    for (    AssociationEnd e : ends) {
      e.setAggregation(AggregationKindEnum.AK_NONE);
    }
  }
  if (multi != null) {
    end.setMultiplicity((Multiplicity)multi);
  }
 else {
    end.setMultiplicity(getMultiplicity11());
  }
  if (stereo != null) {
    end.getStereotype().clear();
    end.getStereotype().add((Stereotype)stereo);
  }
  end.setNavigable(navigable);
  if (order != null) {
    end.setOrdering((OrderingKind)order);
  }
 else {
    end.setOrdering(OrderingKindEnum.OK_UNORDERED);
  }
  if (aggregation != null) {
    end.setAggregation((AggregationKind)aggregation);
  }
 else {
    end.setAggregation(AggregationKindEnum.AK_NONE);
  }
  if (scope != null) {
    end.setTargetScope((ScopeKind)scope);
  }
 else {
    end.setTargetScope(ScopeKindEnum.SK_INSTANCE);
  }
  if (changeable != null) {
    end.setChangeability((ChangeableKind)changeable);
  }
 else {
    end.setChangeability(ChangeableKindEnum.CK_CHANGEABLE);
  }
  if (visibility != null) {
    end.setVisibility((VisibilityKind)visibility);
  }
 else {
    end.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  }
  return end;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.getMaxUpper(Multiplicity)
{
  int max=0;
  for (  MultiplicityRange mr : m.getRange()) {
    int value=mr.getUpper();
    if (value > max) {
      max=value;
    }
  }
  return 0;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.getMultiplicity11()
{
  return (Multiplicity)modelImpl.getDataTypesFactory().createMultiplicity(1,1);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd(Object,Object)
{
  if (type == null || !(type instanceof Classifier) || assoc == null || !(assoc instanceof UmlAssociation)) {
    throw new IllegalArgumentException("one of the arguments is null");
  }
  return buildAssociationEnd(assoc,"",type,null,null,true,null,null,null,null,VisibilityKindEnum.VK_PUBLIC);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass(UmlClass,Classifier,Classifier)
{
  if (end1 == null || end2 == null || cl == null) {
    throw new IllegalArgumentException("one of the arguments was null");
  }
  AssociationClass assoc=createAssociationClass();
  assoc.setNamespace(cl.getNamespace());
  assoc.setName(cl.getName());
  assoc.setAbstract(cl.isAbstract());
  assoc.setActive(cl.isActive());
  assoc.setLeaf(cl.isLeaf());
  assoc.setRoot(cl.isRoot());
  assoc.setSpecification(cl.isSpecification());
  assoc.getStereotype().addAll(cl.getStereotype());
  assoc.setVisibility(cl.getVisibility());
  assoc.getClientDependency().addAll(cl.getClientDependency());
  assoc.getComment().addAll(cl.getComment());
  assoc.getConstraint().addAll(cl.getConstraint());
  assoc.getFeature().addAll(cl.getFeature());
  assoc.getGeneralization().addAll(cl.getGeneralization());
  assoc.getPowertypeRange().addAll(cl.getPowertypeRange());
  assoc.getSourceFlow().addAll(cl.getSourceFlow());
  assoc.getTaggedValue().addAll(cl.getTaggedValue());
  assoc.getTargetFlow().addAll(cl.getTargetFlow());
  assoc.getTemplateParameter().addAll(cl.getTemplateParameter());
  buildAssociationEnd(assoc,null,end1,null,null,true,null,null,null,null,null);
  buildAssociationEnd(assoc,null,end2,null,null,true,null,null,null,null,null);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute(Object,Object)
{
  return buildAttribute2(theType);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2(Object)
{
  Attribute attr=buildAttribute();
  attr.setType((Classifier)theType);
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute()
{
  Attribute attr=createAttribute();
  attr.setName("newAttr");
  attr.setMultiplicity(getMultiplicity11());
  attr.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  attr.setOwnerScope(ScopeKindEnum.SK_INSTANCE);
  attr.setChangeability(ChangeableKindEnum.CK_CHANGEABLE);
  attr.setTargetScope(ScopeKindEnum.SK_INSTANCE);
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute(Object,Object,Object)
{
  Attribute attr=buildAttribute(model,type);
  if (handle instanceof Classifier) {
    Classifier cls=(Classifier)handle;
    cls.getFeature().add(attr);
  }
 else   if (handle instanceof AssociationEnd) {
    AssociationEnd assend=(AssociationEnd)handle;
    assend.getQualifier().add(attr);
  }
 else {
    throw new IllegalArgumentException();
  }
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2(Object,Object)
{
  Attribute attr=buildAttribute2(type);
  if (handle instanceof Classifier) {
    Classifier cls=(Classifier)handle;
    cls.getFeature().add(attr);
  }
 else   if (handle instanceof AssociationEnd) {
    AssociationEnd assend=(AssociationEnd)handle;
    assend.getQualifier().add(attr);
  }
 else {
    throw new IllegalArgumentException();
  }
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass()
{
  ModelCommand command=new ModelCommand(){
    private UmlClass cl;
    public UmlClass execute(){
      cl=createClass();
      cl.setName("");
      cl.setAbstract(false);
      cl.setActive(false);
      cl.setRoot(false);
      cl.setLeaf(false);
      cl.setSpecification(false);
      cl.setVisibility(VisibilityKindEnum.VK_PUBLIC);
      return cl;
    }
    public void undo(){
      try {
        cl.refDelete();
      }
 catch (      InvalidObjectException e) {
        LOG.warn("Object already deleted " + cl);
      }
    }
    public boolean isUndoable(){
      return true;
    }
    public boolean isRedoable(){
      return false;
    }
  }
;
  return (UmlClass)org.argouml.model.Model.execute(command);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(Object)
{
  UmlClass clazz=buildClass();
  if (owner instanceof Namespace) {
    modelImpl.getCoreHelper().setNamespace(clazz,owner);
  }
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(String)
{
  UmlClass clazz=buildClass();
  clazz.setName(name);
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(String,Object)
{
  UmlClass clazz=buildClass();
  clazz.setName(name);
  if (owner instanceof Namespace) {
    modelImpl.getCoreHelper().setNamespace(clazz,owner);
  }
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface()
{
  Interface cl=createInterface();
  cl.setName("");
  cl.setAbstract(false);
  cl.setRoot(false);
  cl.setLeaf(false);
  cl.setSpecification(false);
  cl.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(Object)
{
  Interface cl=buildInterface();
  if (owner instanceof Namespace) {
    cl.setNamespace((Namespace)owner);
  }
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(String)
{
  Interface cl=buildInterface();
  cl.setName(name);
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(String,Object)
{
  Interface cl=buildInterface();
  cl.setName(name);
  if (owner instanceof Namespace) {
    cl.setNamespace((Namespace)owner);
  }
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildDataType(String,Object)
{
  DataType dt=createDataType();
  dt.setName(name);
  if (owner instanceof Namespace) {
    dt.setNamespace((Namespace)owner);
  }
  return dt;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumeration(String,Object)
{
  Enumeration e=createEnumeration();
  e.setName(name);
  if (owner instanceof Namespace) {
    e.setNamespace((Namespace)owner);
  }
  return e;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildDependency(Object,Object)
{
  ModelElement client=(ModelElement)clientObj;
  ModelElement supplier=(ModelElement)supplierObj;
  if (client == null || supplier == null) {
    throw new IllegalArgumentException("client or supplier is null " + "client = " + client + " supplier = "+ supplier);
  }
  Dependency dep=createDependency();
  dep.getSupplier().add(supplier);
  dep.getClient().add(client);
  if (client instanceof Namespace) {
    dep.setNamespace((Namespace)client);
  }
 else   if (client.getNamespace() != null) {
    dep.setNamespace(client.getNamespace());
  }
  return dep;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermission(Object,Object)
{
  if (!(client instanceof ModelElement) || !(supplier instanceof ModelElement)) {
    throw new IllegalArgumentException("client is not a Namespace" + " or supplier is not a Package");
  }
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    LOG.warn("buildPermission called with client that is not a " + "Namespace or supplier that is not a Package");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(ModelElement)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.IMPORT_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageImport(Object,Object)
{
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    throw new IllegalArgumentException("client is not a Namespace" + " or supplier is not a Package");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(UmlPackage)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.IMPORT_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermissionInternal(ModelElement,ModelElement)
{
  Permission permission=createPermission();
  permission.getSupplier().add(supplier);
  permission.getClient().add(client);
  if (client instanceof Namespace) {
    permission.setNamespace((Namespace)client);
  }
 else   if (client.getNamespace() != null) {
    permission.setNamespace(client.getNamespace());
  }
  return permission;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageAccess(Object,Object)
{
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    throw new IllegalArgumentException("client or " + "supplier is not a Namespace");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(UmlPackage)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.ACCESS_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization(Object,Object,String)
{
  if (child == null || parent == null || !(child instanceof GeneralizableElement) || !(parent instanceof GeneralizableElement)) {
    throw new IllegalArgumentException();
  }
  Generalization gen=buildGeneralization(child,parent);
  if (gen != null) {
    gen.setName(name);
  }
  return gen;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization(Object,Object)
{
  if ((!(child1 instanceof GeneralizableElement) || !(parent1 instanceof GeneralizableElement)) && child1 != parent1) {
    throw new IllegalArgumentException("Both items must be different generalizable elements");
  }
  GeneralizableElement child=(GeneralizableElement)child1;
  GeneralizableElement parent=(GeneralizableElement)parent1;
  for (  Generalization gen : parent.getGeneralization()) {
    if (gen.getParent().equals(child)) {
      throw new IllegalArgumentException("Generalization exists" + " in opposite direction");
    }
  }
  if (parent.isLeaf()) {
    throw new IllegalArgumentException("parent is leaf");
  }
  if (child.isRoot()) {
    throw new IllegalArgumentException("child is root");
  }
  Generalization gen=createGeneralization();
  gen.setParent(parent);
  gen.setChild(child);
  if (child.getNamespace() != null) {
    gen.setNamespace(child.getNamespace());
  }
 else   if (child instanceof Namespace) {
    gen.setNamespace((Namespace)child);
  }
  return gen;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildMethod(String)
{
  Method method=createMethod();
  if (method != null) {
    method.setName(name);
  }
  return method;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object,Object)
{
  return buildOperation(classifier,returnType);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object)
{
  if (!(classifier instanceof Classifier)) {
    throw new IllegalArgumentException("Handle is not a classifier");
  }
  Classifier cls=(Classifier)classifier;
  Operation oper=createOperation();
  oper.setName("newOperation");
  oper.setOwner(cls);
  oper.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  oper.setAbstract(false);
  oper.setLeaf(false);
  oper.setRoot(false);
  oper.setQuery(false);
  oper.setOwnerScope(ScopeKindEnum.SK_INSTANCE);
  oper.setConcurrency(CallConcurrencyKindEnum.CCK_SEQUENTIAL);
  Parameter returnParameter=buildParameter(oper,returnType);
  returnParameter.setKind(ParameterDirectionKindEnum.PDK_RETURN);
  returnParameter.setName("return");
  return oper;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object,Object,String)
{
  return buildOperation2(cls,returnType,name);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation2(Object,Object,String)
{
  Operation oper=buildOperation(cls,returnType);
  if (oper != null) {
    oper.setName(name);
  }
  return oper;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Classifier)
{
  Parameter param=corePackage.getParameter().createParameter();
  param.setType(type);
  return param;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Object,Object,Object)
{
  return buildParameter(o,type);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Object,Object)
{
  if (o instanceof Event) {
    Event event=(Event)o;
    Parameter res=buildParameter((Classifier)type);
    res.setKind(ParameterDirectionKindEnum.PDK_IN);
    event.getParameter().add(res);
    return res;
  }
 else   if (o instanceof BehavioralFeature) {
    BehavioralFeature oper=(BehavioralFeature)o;
    Parameter res=buildParameter((Classifier)type);
    oper.getParameter().add(res);
    res.setName("arg" + oper.getParameter().size());
    return res;
  }
 else {
    throw new IllegalArgumentException("Unsupported object type");
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildRealization(Object,Object,Object)
{
  ModelElement client=(ModelElement)clnt;
  ModelElement supplier=(ModelElement)spplr;
  if (client == null || supplier == null || client.getNamespace() == null || supplier.getNamespace() == null || client.equals(supplier)) {
    throw new IllegalArgumentException("faulty arguments.");
  }
  Abstraction realization=createAbstraction();
  Namespace nsc=client.getNamespace();
  Namespace nss=supplier.getNamespace();
  Namespace ns=null;
  if (nsc.equals(nss)) {
    ns=nsc;
  }
 else {
    ns=(Namespace)model;
  }
  realization.setNamespace(nsc);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(realization,CoreFactory.REALIZE_STEREOTYPE,ns);
  realization.getClient().add(client);
  realization.getSupplier().add(supplier);
  return realization;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildTemplateArgument(Object)
{
  TemplateArgument ta=createTemplateArgument();
  ta.setModelElement((ModelElement)element);
  return ta;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildUsage(Object,Object)
{
  if (client == null || supplier == null) {
    throw new IllegalArgumentException("In buildUsage null arguments.");
  }
  if (!(client instanceof ModelElement)) {
    throw new IllegalArgumentException("client ModelElement");
  }
  if (!(supplier instanceof ModelElement)) {
    throw new IllegalArgumentException("supplier ModelElement");
  }
  Usage usage=createUsage();
  usage.getSupplier().add((ModelElement)supplier);
  usage.getClient().add((ModelElement)client);
  if (((ModelElement)supplier).getNamespace() != null) {
    usage.setNamespace(((ModelElement)supplier).getNamespace());
  }
 else   if (((ModelElement)client).getNamespace() != null) {
    usage.setNamespace(((ModelElement)client).getNamespace());
  }
  return usage;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildComment(Object,Object)
{
  if (model == null) {
    throw new IllegalArgumentException("A namespace must be supplied.");
  }
  ModelElement elementToAnnotate=(ModelElement)element;
  Comment comment=createComment();
  Namespace commentsModel=null;
  if (elementToAnnotate != null) {
    comment.getAnnotatedElement().add(elementToAnnotate);
    commentsModel=elementToAnnotate.getNamespace();
  }
 else {
    commentsModel=(Namespace)model;
  }
  comment.setNamespace(commentsModel);
  return comment;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint(Object)
{
  ModelElement constrainedElement=(ModelElement)constrElement;
  if (constrainedElement == null) {
    throw new IllegalArgumentException("the constrained element is " + "mandatory and may not be " + "null.");
  }
  Constraint con=createConstraint();
  con.getConstrainedElement().add(constrainedElement);
  con.setNamespace(constrainedElement.getNamespace());
  return con;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint(String,Object)
{
  if (bexpr == null || !(bexpr instanceof BooleanExpression)) {
    throw new IllegalArgumentException("invalid boolean expression.");
  }
  Constraint con=createConstraint();
  if (name != null) {
    con.setName(name);
  }
  con.setBody((BooleanExpression)bexpr);
  return con;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildBinding(Object,Object,List)
{
  Collection<Dependency> clientDeps=((ModelElement)client).getClientDependency();
  for (  Dependency dep : clientDeps) {
    if (dep instanceof Binding) {
      throw new IllegalArgumentException("client is already client of another Binding");
    }
  }
  if (arguments != null) {
    List<TemplateParameter> params=((ModelElement)supplier).getTemplateParameter();
    if (params.size() != arguments.size()) {
      throw new IllegalArgumentException("number of arguments doesn't match number of params");
    }
    Iterator<TemplateArgument> ita=arguments.iterator();
    for (    TemplateParameter param : params) {
      TemplateArgument ta=ita.next();
      if (ta == null || ta.getModelElement() == null) {
        continue;
      }
      if (!(param.getParameter().getClass().equals(ta.getModelElement().getClass()))) {
        throw new IllegalArgumentException("type of argument doesn't match type of parameter");
      }
    }
  }
  Binding binding=createBinding();
  binding.getClient().add((ModelElement)client);
  binding.getSupplier().add((ModelElement)supplier);
  if (arguments != null) {
    binding.getArgument().addAll(arguments);
  }
  return binding;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAbstraction(Object)
{
  if (!(elem instanceof Abstraction)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteArtifact(Object)
{
  if (!(elem instanceof Artifact)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociation(Object)
{
  if (!(elem instanceof UmlAssociation)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationClass(Object)
{
  if (!(elem instanceof AssociationClass)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationEnd(Object)
{
  if (!(elem instanceof AssociationEnd)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  AssociationEnd ae=(AssociationEnd)elem;
  UmlAssociation assoc=ae.getAssociation();
  if (assoc != null && assoc.getConnection() != null && assoc.getConnection().size() == 2) {
    modelImpl.getUmlFactory().delete(assoc);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getAAssociationEndLinkEnd().getLinkEnd(ae));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAttribute(Object)
{
  if (!(elem instanceof Attribute)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getAAttributeLinkAttribute().getAttributeLink((Attribute)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBehavioralFeature(Object)
{
  if (!(elem instanceof BehavioralFeature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBinding(Object)
{
  if (!(elem instanceof Binding)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(corePackage.getABindingArgument().getArgument((Binding)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClass(Object)
{
  if (!(elem instanceof UmlClass)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClassifier(Object)
{
  if (!(elem instanceof Classifier)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getFacade().getAssociationEnds(elem));
  Classifier cls=(Classifier)elem;
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getACreateActionInstantiation().getCreateAction(cls));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getActivityGraphs().getATypeClassifierInState().getClassifierInState(cls));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComment(Object)
{
  if (!(elem instanceof Comment)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComponent(Object)
{
  if (!(elem instanceof Component)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteConstraint(Object)
{
  if (!(elem instanceof Constraint)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDataType(Object)
{
  if (!(elem instanceof DataType)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDependency(Object)
{
  if (!(elem instanceof Dependency)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElement(Object)
{
  if (!(elem instanceof Element)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElementResidence(Object)
{
  if (!(elem instanceof ElementResidence)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFeature(Object)
{
  if (!(elem instanceof Feature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFlow(Object)
{
  if (!(elem instanceof Flow)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralizableElement(Object)
{
  if (!(elem instanceof GeneralizableElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  GeneralizableElement generalizableElement=(GeneralizableElement)elem;
  modelImpl.getUmlHelper().deleteCollection(generalizableElement.getGeneralization());
  modelImpl.getUmlHelper().deleteCollection(corePackage.getAParentSpecialization().getSpecialization(generalizableElement));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralization(Object)
{
  if (!(elem instanceof Generalization)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteInterface(Object)
{
  if (!(elem instanceof Interface)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteMethod(Object)
{
  if (!(elem instanceof Method)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteModelElement(Object)
{
  if (!(elem instanceof ModelElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  Collection<Dependency> deps=org.argouml.model.Model.getFacade().getClientDependencies(elem);
  for (  Dependency dep : deps) {
    if (dep.getClient().size() < 2 && dep.getClient().contains(elem)) {
      modelImpl.getUmlFactory().delete(dep);
    }
  }
  deps=org.argouml.model.Model.getFacade().getSupplierDependencies(elem);
  for (  Dependency dep : deps) {
    if (dep.getSupplier().size() < 2 && dep.getSupplier().contains(elem)) {
      modelImpl.getUmlFactory().delete(dep);
    }
  }
  modelImpl.getUmlHelper().deleteCollection(corePackage.getAModelElementTemplateArgument().getTemplateArgument((ModelElement)elem));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getModelManagement().getAImportedElementElementImport().getElementImport((ModelElement)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNamespace(Object)
{
  LOG.debug("Deleting namespace " + elem);
  if (!(elem instanceof Namespace)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  List<ModelElement> ownedElements=new ArrayList<ModelElement>();
  ownedElements.addAll(((Namespace)elem).getOwnedElement());
  for (  ModelElement element : ownedElements) {
    LOG.debug("Deleting ownedElement " + element);
    modelImpl.getUmlFactory().delete(element);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNode(Object)
{
  if (!(elem instanceof Node)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteOperation(Object)
{
  if (!(elem instanceof Operation)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  Operation oper=(Operation)elem;
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getACallActionOperation().getCallAction(oper));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getStateMachines().getAOccurrenceOperation().getOccurrence(oper));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteParameter(Object)
{
  if (!(elem instanceof Parameter)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePermission(Object)
{
  if (!(elem instanceof Permission)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePresentationElement(Object)
{
  if (!(elem instanceof PresentationElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteRelationship(Object)
{
  if (!(elem instanceof Relationship)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteStructuralFeature(Object)
{
  if (!(elem instanceof StructuralFeature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateArgument(Object)
{
  if (!(elem instanceof TemplateArgument)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateParameter(Object)
{
  if (!(elem instanceof TemplateParameter)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteUsage(Object)
{
  if (!(elem instanceof Usage)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumeration(Object)
{
  if (!(elem instanceof Enumeration)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumerationLiteral(Object)
{
  if (!(elem instanceof EnumerationLiteral)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePrimitive(Object)
{
  if (!(elem instanceof Primitive)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteProgrammingLanguageDataType(Object)
{
  if (!(elem instanceof ProgrammingLanguageDataType)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyClass(Object,Object)
{
  if (!(source instanceof UmlClass && ns instanceof Namespace)) {
    throw new IllegalArgumentException("source: " + source + ",ns: "+ ns);
  }
  UmlClass c=createClass();
  ((Namespace)ns).getOwnedElement().add(c);
  doCopyClass(source,c);
  return c;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyFeature(Object,Object)
{
  if (!(source instanceof Feature && classifier instanceof Classifier)) {
    throw new IllegalArgumentException("source: " + source + ",classifier: "+ classifier);
  }
  Feature f=null;
  if (source instanceof Attribute) {
    Attribute attr=createAttribute();
    doCopyAttribute((Attribute)source,attr);
    f=attr;
  }
 else   if (source instanceof Operation) {
    Operation oper=createOperation();
    doCopyOperation((Operation)source,oper);
    f=oper;
  }
 else   if (source instanceof Method) {
    Method method=createMethod();
    doCopyMethod((Method)source,method);
    f=method;
  }
 else   if (source instanceof Reception) {
    Reception reception=(Reception)modelImpl.getCommonBehaviorFactory().createReception();
    doCopyReception((Reception)source,reception);
    f=reception;
  }
 else {
    throw new IllegalArgumentException("source: " + source);
  }
  f.setOwner((Classifier)classifier);
  ((Classifier)classifier).getFeature().add(f);
  return f;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyDataType(Object,Object)
{
  if (!(source instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  if (!(ns instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  DataType i=createDataType();
  ((Namespace)ns).getOwnedElement().add(i);
  doCopyDataType(source,i);
  return i;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyInterface(Object,Object)
{
  if (!(source instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  if (!(ns instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  Interface i=createInterface();
  ((Namespace)ns).getOwnedElement().add(i);
  doCopyInterface(source,i);
  return i;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyEnumeration(Object,Object)
{
  doCopyModelElement(from,to);
  List listFrom=((Enumeration)from).getLiteral();
  List listTo=((Enumeration)to).getLiteral();
  Object literalFrom;
  Object literalTo;
  for (int i=0; i < listFrom.size(); i++) {
    literalFrom=listFrom.get(i);
    if (listTo.size() > i) {
      literalTo=listTo.get(i);
    }
 else {
      literalTo=createEnumerationLiteral();
      listTo.add(literalTo);
    }
    doCopyModelElement(literalFrom,literalTo);
    ((EnumerationLiteral)literalTo).setEnumeration((Enumeration)to);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyElement(Object,Object)
{
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClass(Object,Object)
{
  if (!(source instanceof UmlClass)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof UmlClass)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
  ((UmlClass)target).setActive(((UmlClass)source).isActive());
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClassifier(Object,Object)
{
  if (!(source instanceof Classifier)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Classifier)) {
    throw new IllegalArgumentException();
  }
  doCopyNamespace(source,target);
  doCopyGeneralizableElement(source,target);
  for (  Feature f : ((Classifier)source).getFeature()) {
    copyFeature(f,target);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyDataType(Object,Object)
{
  if (!(source instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyGeneralizableElement(Object,Object)
{
  if (!(source instanceof GeneralizableElement && target instanceof GeneralizableElement)) {
    throw new IllegalArgumentException("source: " + source + ",target: "+ target);
  }
  doCopyModelElement(source,target);
  GeneralizableElement targetGE=((GeneralizableElement)target);
  GeneralizableElement sourceGE=((GeneralizableElement)source);
  targetGE.setAbstract(sourceGE.isAbstract());
  targetGE.setLeaf(sourceGE.isLeaf());
  targetGE.setRoot(sourceGE.isRoot());
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyInterface(Object,Object)
{
  if (!(source instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyModelElement(Object,Object)
{
  if (!(source instanceof ModelElement)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof ModelElement)) {
    throw new IllegalArgumentException();
  }
  ModelElement targetME=((ModelElement)target);
  ModelElement sourceME=((ModelElement)source);
  targetME.setName(sourceME.getName());
  doCopyElement(source,target);
  targetME.setSpecification(sourceME.isSpecification());
  targetME.setVisibility(sourceME.getVisibility());
  modelImpl.getExtensionMechanismsFactory().copyTaggedValues(source,target);
  if (!sourceME.getStereotype().isEmpty()) {
    Model targetModel=(Model)org.argouml.model.Model.getFacade().getModel(targetME);
    for (    Stereotype s : sourceME.getStereotype()) {
      targetME.getStereotype().add(s);
    }
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyNamespace(Object,Object)
{
  if (!(source instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  doCopyModelElement(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyAttribute(Attribute,Attribute)
{
  target.setMultiplicity(getMultiplicity11());
  target.setChangeability(source.getChangeability());
  target.setTargetScope(source.getTargetScope());
  target.setType(source.getType());
  doCopyFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyOperation(Operation,Operation)
{
  target.setAbstract(source.isAbstract());
  target.setLeaf(source.isLeaf());
  target.setRoot(source.isRoot());
  target.setConcurrency(source.getConcurrency());
  target.setSpecification(source.getSpecification());
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyMethod(Method,Method)
{
  ProcedureExpression pe=source.getBody();
  if (pe != null) {
    target.setBody((ProcedureExpression)modelImpl.getDataTypesFactory().createProcedureExpression(pe.getLanguage(),pe.getBody()));
  }
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyReception(Reception,Reception)
{
  target.setAbstract(source.isAbstract());
  target.setLeaf(source.isLeaf());
  target.setRoot(source.isRoot());
  target.setSpecification(source.getSpecification());
  target.setSignal(source.getSignal());
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyBehavioralFeature(BehavioralFeature,BehavioralFeature)
{
  target.setQuery(source.isQuery());
  Collection<Signal> raisedSignals=modelImpl.getUmlPackage().getCommonBehavior().getAContextRaisedSignal().getRaisedSignal(source);
  for (  Signal signal : raisedSignals) {
    modelImpl.getUmlPackage().getCommonBehavior().getAContextRaisedSignal().add(target,signal);
  }
  doCopyFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyFeature(Feature,Feature)
{
  target.setVisibility(source.getVisibility());
  target.setOwnerScope(source.getOwnerScope());
  doCopyModelElement(source,target);
}


-------------------------------------
Reading file: TestCases/Input/ArgoUML/SVNFilesSideBySide/15245/trunk_src_argouml-core-model-mdr_src_org_argouml_model_mdr_CoreFactoryMDRImpl.java.v15245
org.argouml.model.mdr.CoreFactoryMDRImpl.CoreFactoryMDRImpl	1	MDRModelImplementation	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAbstraction	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAbstraction	3	String	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createArtifact	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociation	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationEnd	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createAttribute	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createBinding	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createComment	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createComponent	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createConstraint	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createDataType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createDependency	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createElementResidence	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildElementResidence	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumeration	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumerationLiteral	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumerationLiteral	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.createFlow	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createGeneralization	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createInterface	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createMethod	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createNode	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createOperation	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createParameter	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPermission	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitive	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitiveType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createProgrammingLanguageDataType	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateArgument	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateParameter	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.createUsage	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	6	Classifier	boolean	AggregationKind	Classifier	boolean	AggregationKind	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	5	Object	Object	Object	Object	Boolean	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation	5	Object	boolean	Object	boolean	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd	11	Object	String	Object	Object	Object	boolean	Object	Object	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.getMaxUpper	1	Multiplicity	
org.argouml.model.mdr.CoreFactoryMDRImpl.getMultiplicity11	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	0	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildDataType	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumeration	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildDependency	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermission	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageImport	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermissionInternal	2	ModelElement	ModelElement	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageAccess	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization	3	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildMethod	1	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation	4	Object	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation2	3	Object	Object	String	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	1	Classifier	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildRealization	3	Object	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildTemplateArgument	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildUsage	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildComment	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint	2	String	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.buildBinding	3	Object	Object	List	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAbstraction	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteArtifact	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociation	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationEnd	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAttribute	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBehavioralFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBinding	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClass	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClassifier	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComment	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComponent	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteConstraint	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDataType	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDependency	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElementResidence	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFlow	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralizableElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralization	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteInterface	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteMethod	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteModelElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNamespace	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNode	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteOperation	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteParameter	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePermission	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePresentationElement	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteRelationship	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteStructuralFeature	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateArgument	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateParameter	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteUsage	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumeration	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumerationLiteral	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deletePrimitive	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.deleteProgrammingLanguageDataType	1	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyFeature	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyDataType	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyInterface	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.copyEnumeration	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClass	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClassifier	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyDataType	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyGeneralizableElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyInterface	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyModelElement	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyNamespace	2	Object	Object	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyAttribute	2	Attribute	Attribute	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyOperation	2	Operation	Operation	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyMethod	2	Method	Method	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyReception	2	Reception	Reception	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyBehavioralFeature	2	BehavioralFeature	BehavioralFeature	
org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyFeature	2	Feature	Feature	
List of methods:
org.argouml.model.mdr.CoreFactoryMDRImpl.CoreFactoryMDRImpl(MDRModelImplementation)
{
  modelImpl=implementation;
  corePackage=modelImpl.getUmlPackage().getCore();
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAbstraction()
{
  Abstraction myAbstraction=corePackage.getAbstraction().createAbstraction();
  super.initialize(myAbstraction);
  return myAbstraction;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAbstraction(String,Object,Object)
{
  if (!(client instanceof Classifier) || !(supplier instanceof Classifier)) {
    throw new IllegalArgumentException("The supplier and client of an abstraction" + "should be classifiers");
  }
  if (client.equals(supplier)) {
    throw new IllegalArgumentException("The supplier and the client " + "must be different elements");
  }
  Abstraction abstraction=createAbstraction();
  abstraction.setName(name);
  abstraction.getClient().add((Classifier)client);
  abstraction.getSupplier().add((Classifier)supplier);
  return abstraction;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createArtifact()
{
  Artifact artifact=corePackage.getArtifact().createArtifact();
  super.initialize(artifact);
  return artifact;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociation()
{
  UmlAssociation assoc=corePackage.getUmlAssociation().createUmlAssociation();
  super.initialize(assoc);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationClass()
{
  AssociationClass assoc=corePackage.getAssociationClass().createAssociationClass();
  super.initialize(assoc);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAssociationEnd()
{
  AssociationEnd assocEnd=corePackage.getAssociationEnd().createAssociationEnd();
  super.initialize(assocEnd);
  return assocEnd;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createAttribute()
{
  Attribute myAttribute=corePackage.getAttribute().createAttribute();
  super.initialize(myAttribute);
  return myAttribute;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createBinding()
{
  Binding myBinding=corePackage.getBinding().createBinding();
  super.initialize(myBinding);
  return myBinding;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createClass()
{
  UmlClass myClass=corePackage.getUmlClass().createUmlClass();
  super.initialize(myClass);
  return myClass;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createComment()
{
  Comment myComment=corePackage.getComment().createComment();
  super.initialize(myComment);
  return myComment;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createComponent()
{
  Component myComponent=corePackage.getComponent().createComponent();
  super.initialize(myComponent);
  return myComponent;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createConstraint()
{
  Constraint myConstraint=corePackage.getConstraint().createConstraint();
  super.initialize(myConstraint);
  return myConstraint;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createDataType()
{
  DataType dataType=corePackage.getDataType().createDataType();
  super.initialize(dataType);
  return dataType;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createDependency()
{
  Dependency myDependency=corePackage.getDependency().createDependency();
  super.initialize(myDependency);
  return myDependency;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createElementResidence()
{
  ElementResidence myElementResidence=corePackage.getElementResidence().createElementResidence();
  super.initialize(myElementResidence);
  return myElementResidence;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildElementResidence(Object,Object)
{
  ElementResidence myElementResidence=corePackage.getElementResidence().createElementResidence();
  super.initialize(myElementResidence);
  myElementResidence.setContainer((Component)component);
  myElementResidence.setResident((ModelElement)me);
  return myElementResidence;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumeration()
{
  Enumeration myEnumeration=corePackage.getEnumeration().createEnumeration();
  super.initialize(myEnumeration);
  return myEnumeration;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createEnumerationLiteral()
{
  EnumerationLiteral myEnumerationLiteral=corePackage.getEnumerationLiteral().createEnumerationLiteral();
  super.initialize(myEnumerationLiteral);
  return myEnumerationLiteral;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumerationLiteral(String,Object)
{
  EnumerationLiteral el=createEnumerationLiteral();
  el.setName(name);
  el.setEnumeration((Enumeration)enumeration);
  return el;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createFlow()
{
  Flow myFlow=corePackage.getFlow().createFlow();
  super.initialize(myFlow);
  return myFlow;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createGeneralization()
{
  Generalization myGeneralization=corePackage.getGeneralization().createGeneralization();
  super.initialize(myGeneralization);
  return myGeneralization;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createInterface()
{
  Interface myInterface=corePackage.getInterface().createInterface();
  super.initialize(myInterface);
  return myInterface;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createMethod()
{
  Method myMethod=corePackage.getMethod().createMethod();
  super.initialize(myMethod);
  return myMethod;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createNode()
{
  Node myNode=corePackage.getNode().createNode();
  super.initialize(myNode);
  return myNode;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createOperation()
{
  Operation myOperation=corePackage.getOperation().createOperation();
  super.initialize(myOperation);
  return myOperation;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createParameter()
{
  Parameter myParameter=corePackage.getParameter().createParameter();
  super.initialize(myParameter);
  return myParameter;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPermission()
{
  Permission myPermission=corePackage.getPermission().createPermission();
  super.initialize(myPermission);
  return myPermission;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitive()
{
  return createPrimitiveType();
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createPrimitiveType()
{
  Primitive obj=corePackage.getPrimitive().createPrimitive();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createProgrammingLanguageDataType()
{
  ProgrammingLanguageDataType obj=corePackage.getProgrammingLanguageDataType().createProgrammingLanguageDataType();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateArgument()
{
  TemplateArgument obj=corePackage.getTemplateArgument().createTemplateArgument();
  super.initialize(obj);
  return obj;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createTemplateParameter()
{
  TemplateParameter myTemplateParameter=corePackage.getTemplateParameter().createTemplateParameter();
  super.initialize(myTemplateParameter);
  return myTemplateParameter;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.createUsage()
{
  Usage myUsage=corePackage.getUsage().createUsage();
  super.initialize(myUsage);
  return myUsage;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Classifier,boolean,AggregationKind,Classifier,boolean,AggregationKind)
{
  if (c1 == null || c2 == null) {
    throw new IllegalArgumentException("one of " + "the classifiers to be " + "connected is null");
  }
  Namespace ns1=c1.getNamespace();
  Namespace ns2=c2.getNamespace();
  if (ns1 == null || ns2 == null) {
    throw new IllegalArgumentException("one of " + "the classifiers does not " + "belong to a namespace");
  }
  Namespace ns=null;
  if (nav2) {
    ns=ns1;
  }
 else   if (nav1) {
    ns=ns2;
  }
 else {
    throw new IllegalArgumentException("At least one end must be navigable");
  }
  UmlAssociation assoc=createAssociation();
  assoc.setName("");
  assoc.setNamespace(ns);
  buildAssociationEnd(assoc,null,c1,null,null,nav1,null,agg1,null,null,null);
  buildAssociationEnd(assoc,null,c2,null,null,nav2,null,agg2,null,null,null);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,Object,Object,Object,Boolean)
{
  if (fromClassifier == null || toClassifier == null) {
    throw new IllegalArgumentException("one of " + "the classifiers to be " + "connected is null");
  }
  Classifier from=(Classifier)fromClassifier;
  Classifier to=(Classifier)toClassifier;
  AggregationKind agg1=(AggregationKind)aggregationKind1;
  AggregationKind agg2=(AggregationKind)aggregationKind2;
  Namespace ns1=from.getNamespace();
  if (ns1 == null) {
    throw new IllegalArgumentException("The from " + "classifiers does not " + "belong to a namespace");
  }
  UmlAssociation assoc=createAssociation();
  assoc.setName("");
  assoc.setNamespace(ns1);
  boolean nav1=true;
  boolean nav2=true;
  if (from instanceof Interface) {
    nav2=false;
    agg2=agg1;
    agg1=null;
  }
 else   if (to instanceof Interface) {
    nav1=false;
  }
 else {
    nav1=!Boolean.TRUE.equals(unidirectional);
    nav2=true;
  }
  buildAssociationEnd(assoc,null,from,null,null,nav1,null,agg1,null,null,null);
  buildAssociationEnd(assoc,null,to,null,null,nav2,null,agg2,null,null,null);
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,Object)
{
  Classifier c1=(Classifier)classifier1;
  Classifier c2=(Classifier)classifier2;
  return buildAssociation(c1,true,AggregationKindEnum.AK_NONE,c2,true,AggregationKindEnum.AK_NONE);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociation(Object,boolean,Object,boolean,String)
{
  UmlAssociation assoc=buildAssociation((Classifier)c1,nav1,AggregationKindEnum.AK_NONE,(Classifier)c2,nav2,AggregationKindEnum.AK_NONE);
  if (assoc != null) {
    assoc.setName(name);
  }
  return assoc;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass(Object,Object)
{
  if (end1 == null || end2 == null || !(end1 instanceof Classifier) || !(end2 instanceof Classifier)) {
    throw new IllegalArgumentException("either one of the arguments was null");
  }
  final Classifier classifier1=(Classifier)end1;
  final Classifier classifier2=(Classifier)end2;
  AssociationClass assocClass=createAssociationClass();
  assocClass.setNamespace(classifier1.getNamespace());
  assocClass.setName("");
  assocClass.setAbstract(false);
  assocClass.setActive(false);
  assocClass.setRoot(false);
  assocClass.setLeaf(false);
  assocClass.setSpecification(false);
  assocClass.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  buildAssociationEnd(assocClass,null,classifier1,null,null,true,null,null,null,null,null);
  buildAssociationEnd(assocClass,null,classifier2,null,null,true,null,null,null,null,null);
  return assocClass;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd(Object,String,Object,Object,Object,boolean,Object,Object,Object,Object,Object)
{
  if (assoc == null || !(assoc instanceof UmlAssociation) || type == null || !(type instanceof Classifier)) {
    throw new IllegalArgumentException("either type or association " + "are null");
  }
  if (multi != null && !(multi instanceof Multiplicity)) {
    throw new IllegalArgumentException("Multiplicity");
  }
  if (stereo != null && !(stereo instanceof Stereotype)) {
    throw new IllegalArgumentException("Stereotype");
  }
  if (order != null && !(order instanceof OrderingKind)) {
    throw new IllegalArgumentException("OrderingKind");
  }
  if (aggregation != null && !(aggregation instanceof AggregationKind)) {
    throw new IllegalArgumentException("AggregationKind");
  }
  if (scope != null && !(scope instanceof ScopeKind)) {
    throw new IllegalArgumentException("ScopeKind");
  }
  if (changeable != null && !(changeable instanceof ChangeableKind)) {
    throw new IllegalArgumentException("ChangeableKind");
  }
  if (visibility != null && !(visibility instanceof VisibilityKind)) {
    throw new IllegalArgumentException("VisibilityKind");
  }
  if (type instanceof DataType || type instanceof Interface) {
    if (!navigable) {
      throw new IllegalArgumentException("Wellformedness rule 2.5.3.3 [1] is broken. " + "The Classifier of an AssociationEnd cannot" + "be an Interface or a DataType if the "+ "association is navigable away from "+ "that end.");
    }
    List<AssociationEnd> ends=new ArrayList<AssociationEnd>();
    ends.addAll(((UmlAssociation)assoc).getConnection());
    for (    AssociationEnd end : ends) {
      if (end.isNavigable()) {
        throw new IllegalArgumentException("type is either " + "datatype or " + "interface and is "+ "navigable to");
      }
    }
  }
  if (aggregation != null && aggregation.equals(AggregationKindEnum.AK_COMPOSITE) && multi != null && getMaxUpper((Multiplicity)multi) > 1) {
    throw new IllegalArgumentException("aggregation is composite " + "and multiplicity > 1");
  }
  AssociationEnd end=createAssociationEnd();
  end.setAssociation((UmlAssociation)assoc);
  end.setParticipant((Classifier)type);
  end.setName(name);
  List<AssociationEnd> ends=((UmlAssociation)assoc).getConnection();
  if (ends.size() >= 3) {
    for (    AssociationEnd e : ends) {
      e.setAggregation(AggregationKindEnum.AK_NONE);
    }
  }
  if (multi != null) {
    end.setMultiplicity((Multiplicity)multi);
  }
 else {
    end.setMultiplicity(getMultiplicity11());
  }
  if (stereo != null) {
    end.getStereotype().clear();
    end.getStereotype().add((Stereotype)stereo);
  }
  end.setNavigable(navigable);
  if (order != null) {
    end.setOrdering((OrderingKind)order);
  }
 else {
    end.setOrdering(OrderingKindEnum.OK_UNORDERED);
  }
  if (aggregation != null) {
    end.setAggregation((AggregationKind)aggregation);
  }
 else {
    end.setAggregation(AggregationKindEnum.AK_NONE);
  }
  if (scope != null) {
    end.setTargetScope((ScopeKind)scope);
  }
 else {
    end.setTargetScope(ScopeKindEnum.SK_INSTANCE);
  }
  if (changeable != null) {
    end.setChangeability((ChangeableKind)changeable);
  }
 else {
    end.setChangeability(ChangeableKindEnum.CK_CHANGEABLE);
  }
  if (visibility != null) {
    end.setVisibility((VisibilityKind)visibility);
  }
 else {
    end.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  }
  return end;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.getMaxUpper(Multiplicity)
{
  int max=0;
  for (  MultiplicityRange mr : m.getRange()) {
    int value=mr.getUpper();
    if (value > max) {
      max=value;
    }
  }
  return 0;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.getMultiplicity11()
{
  return (Multiplicity)modelImpl.getDataTypesFactory().createMultiplicity(1,1);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationEnd(Object,Object)
{
  if (type == null || !(type instanceof Classifier) || assoc == null || !(assoc instanceof UmlAssociation)) {
    throw new IllegalArgumentException("one of the arguments is null");
  }
  return buildAssociationEnd(assoc,"",type,null,null,true,null,null,null,null,VisibilityKindEnum.VK_PUBLIC);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute(Object,Object)
{
  return buildAttribute2(theType);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2(Object)
{
  Attribute attr=buildAttribute();
  attr.setType((Classifier)theType);
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute()
{
  Attribute attr=createAttribute();
  attr.setName("newAttr");
  attr.setMultiplicity(getMultiplicity11());
  attr.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  attr.setOwnerScope(ScopeKindEnum.SK_INSTANCE);
  attr.setChangeability(ChangeableKindEnum.CK_CHANGEABLE);
  attr.setTargetScope(ScopeKindEnum.SK_INSTANCE);
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute(Object,Object,Object)
{
  Attribute attr=buildAttribute(model,type);
  if (handle instanceof Classifier) {
    Classifier cls=(Classifier)handle;
    cls.getFeature().add(attr);
  }
 else   if (handle instanceof AssociationEnd) {
    AssociationEnd assend=(AssociationEnd)handle;
    assend.getQualifier().add(attr);
  }
 else {
    throw new IllegalArgumentException();
  }
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildAttribute2(Object,Object)
{
  Attribute attr=buildAttribute2(type);
  if (handle instanceof Classifier) {
    Classifier cls=(Classifier)handle;
    cls.getFeature().add(attr);
  }
 else   if (handle instanceof AssociationEnd) {
    AssociationEnd assend=(AssociationEnd)handle;
    assend.getQualifier().add(attr);
  }
 else {
    throw new IllegalArgumentException();
  }
  return attr;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass()
{
  ModelCommand command=new ModelCommand(){
    private UmlClass cl;
    public UmlClass execute(){
      cl=createClass();
      cl.setName("");
      cl.setAbstract(false);
      cl.setActive(false);
      cl.setRoot(false);
      cl.setLeaf(false);
      cl.setSpecification(false);
      cl.setVisibility(VisibilityKindEnum.VK_PUBLIC);
      return cl;
    }
    public void undo(){
      try {
        cl.refDelete();
      }
 catch (      InvalidObjectException e) {
        LOG.warn("Object already deleted " + cl);
      }
    }
    public boolean isUndoable(){
      return true;
    }
    public boolean isRedoable(){
      return false;
    }
  }
;
  return (UmlClass)org.argouml.model.Model.execute(command);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(Object)
{
  UmlClass clazz=buildClass();
  if (owner instanceof Namespace) {
    modelImpl.getCoreHelper().setNamespace(clazz,owner);
  }
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(String)
{
  UmlClass clazz=buildClass();
  clazz.setName(name);
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildClass(String,Object)
{
  UmlClass clazz=buildClass();
  clazz.setName(name);
  if (owner instanceof Namespace) {
    modelImpl.getCoreHelper().setNamespace(clazz,owner);
  }
  return clazz;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface()
{
  Interface cl=createInterface();
  cl.setName("");
  cl.setAbstract(false);
  cl.setRoot(false);
  cl.setLeaf(false);
  cl.setSpecification(false);
  cl.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(Object)
{
  Interface cl=buildInterface();
  if (owner instanceof Namespace) {
    cl.setNamespace((Namespace)owner);
  }
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(String)
{
  Interface cl=buildInterface();
  cl.setName(name);
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildInterface(String,Object)
{
  Interface cl=buildInterface();
  cl.setName(name);
  if (owner instanceof Namespace) {
    cl.setNamespace((Namespace)owner);
  }
  return cl;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildDataType(String,Object)
{
  DataType dt=createDataType();
  dt.setName(name);
  if (owner instanceof Namespace) {
    dt.setNamespace((Namespace)owner);
  }
  return dt;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildEnumeration(String,Object)
{
  Enumeration e=createEnumeration();
  e.setName(name);
  if (owner instanceof Namespace) {
    e.setNamespace((Namespace)owner);
  }
  return e;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildDependency(Object,Object)
{
  ModelElement client=(ModelElement)clientObj;
  ModelElement supplier=(ModelElement)supplierObj;
  if (client == null || supplier == null) {
    throw new IllegalArgumentException("client or supplier is null " + "client = " + client + " supplier = "+ supplier);
  }
  Dependency dep=createDependency();
  dep.getSupplier().add(supplier);
  dep.getClient().add(client);
  if (client instanceof Namespace) {
    dep.setNamespace((Namespace)client);
  }
 else   if (client.getNamespace() != null) {
    dep.setNamespace(client.getNamespace());
  }
  return dep;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermission(Object,Object)
{
  if (!(client instanceof ModelElement) || !(supplier instanceof ModelElement)) {
    throw new IllegalArgumentException("client is not a Namespace" + " or supplier is not a Package");
  }
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    LOG.warn("buildPermission called with client that is not a " + "Namespace or supplier that is not a Package");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(ModelElement)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.IMPORT_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageImport(Object,Object)
{
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    throw new IllegalArgumentException("client is not a Namespace" + " or supplier is not a Package");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(UmlPackage)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.IMPORT_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPermissionInternal(ModelElement,ModelElement)
{
  Permission permission=createPermission();
  permission.getSupplier().add(supplier);
  permission.getClient().add(client);
  if (client instanceof Namespace) {
    permission.setNamespace((Namespace)client);
  }
 else   if (client.getNamespace() != null) {
    permission.setNamespace(client.getNamespace());
  }
  return permission;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildPackageAccess(Object,Object)
{
  if (!(client instanceof Namespace) || !(supplier instanceof UmlPackage)) {
    throw new IllegalArgumentException("client or " + "supplier is not a Namespace");
  }
  Permission per=buildPermissionInternal((ModelElement)client,(UmlPackage)supplier);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(per,ModelManagementHelper.ACCESS_STEREOTYPE,per.getNamespace());
  return per;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization(Object,Object,String)
{
  if (child == null || parent == null || !(child instanceof GeneralizableElement) || !(parent instanceof GeneralizableElement)) {
    throw new IllegalArgumentException();
  }
  Generalization gen=buildGeneralization(child,parent);
  if (gen != null) {
    gen.setName(name);
  }
  return gen;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildGeneralization(Object,Object)
{
  if ((!(child1 instanceof GeneralizableElement) || !(parent1 instanceof GeneralizableElement)) && child1 != parent1) {
    throw new IllegalArgumentException("Both items must be different generalizable elements");
  }
  GeneralizableElement child=(GeneralizableElement)child1;
  GeneralizableElement parent=(GeneralizableElement)parent1;
  for (  Generalization gen : parent.getGeneralization()) {
    if (gen.getParent().equals(child)) {
      throw new IllegalArgumentException("Generalization exists" + " in opposite direction");
    }
  }
  if (parent.isLeaf()) {
    throw new IllegalArgumentException("parent is leaf");
  }
  if (child.isRoot()) {
    throw new IllegalArgumentException("child is root");
  }
  Generalization gen=createGeneralization();
  gen.setParent(parent);
  gen.setChild(child);
  if (child.getNamespace() != null) {
    gen.setNamespace(child.getNamespace());
  }
 else   if (child instanceof Namespace) {
    gen.setNamespace((Namespace)child);
  }
  return gen;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildMethod(String)
{
  Method method=createMethod();
  if (method != null) {
    method.setName(name);
  }
  return method;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object,Object)
{
  return buildOperation(classifier,returnType);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object)
{
  if (!(classifier instanceof Classifier)) {
    throw new IllegalArgumentException("Handle is not a classifier");
  }
  Classifier cls=(Classifier)classifier;
  Operation oper=createOperation();
  oper.setName("newOperation");
  oper.setOwner(cls);
  oper.setVisibility(VisibilityKindEnum.VK_PUBLIC);
  oper.setAbstract(false);
  oper.setLeaf(false);
  oper.setRoot(false);
  oper.setQuery(false);
  oper.setOwnerScope(ScopeKindEnum.SK_INSTANCE);
  oper.setConcurrency(CallConcurrencyKindEnum.CCK_SEQUENTIAL);
  Parameter returnParameter=buildParameter(oper,returnType);
  returnParameter.setKind(ParameterDirectionKindEnum.PDK_RETURN);
  returnParameter.setName("return");
  return oper;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation(Object,Object,Object,String)
{
  return buildOperation2(cls,returnType,name);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildOperation2(Object,Object,String)
{
  Operation oper=buildOperation(cls,returnType);
  if (oper != null) {
    oper.setName(name);
  }
  return oper;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Classifier)
{
  Parameter param=corePackage.getParameter().createParameter();
  param.setType(type);
  return param;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Object,Object,Object)
{
  return buildParameter(o,type);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildParameter(Object,Object)
{
  if (o instanceof Event) {
    Event event=(Event)o;
    Parameter res=buildParameter((Classifier)type);
    res.setKind(ParameterDirectionKindEnum.PDK_IN);
    event.getParameter().add(res);
    return res;
  }
 else   if (o instanceof BehavioralFeature) {
    BehavioralFeature oper=(BehavioralFeature)o;
    Parameter res=buildParameter((Classifier)type);
    oper.getParameter().add(res);
    res.setName("arg" + oper.getParameter().size());
    return res;
  }
 else {
    throw new IllegalArgumentException("Unsupported object type");
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildRealization(Object,Object,Object)
{
  ModelElement client=(ModelElement)clnt;
  ModelElement supplier=(ModelElement)spplr;
  if (client == null || supplier == null || client.getNamespace() == null || supplier.getNamespace() == null || client.equals(supplier)) {
    throw new IllegalArgumentException("faulty arguments.");
  }
  Abstraction realization=createAbstraction();
  Namespace nsc=client.getNamespace();
  Namespace nss=supplier.getNamespace();
  Namespace ns=null;
  if (nsc.equals(nss)) {
    ns=nsc;
  }
 else {
    ns=(Namespace)model;
  }
  realization.setNamespace(nsc);
  modelImpl.getExtensionMechanismsFactory().buildStereotype(realization,CoreFactory.REALIZE_STEREOTYPE,ns);
  realization.getClient().add(client);
  realization.getSupplier().add(supplier);
  return realization;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildTemplateArgument(Object)
{
  TemplateArgument ta=createTemplateArgument();
  ta.setModelElement((ModelElement)element);
  return ta;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildUsage(Object,Object)
{
  if (client == null || supplier == null) {
    throw new IllegalArgumentException("In buildUsage null arguments.");
  }
  if (!(client instanceof ModelElement)) {
    throw new IllegalArgumentException("client ModelElement");
  }
  if (!(supplier instanceof ModelElement)) {
    throw new IllegalArgumentException("supplier ModelElement");
  }
  Usage usage=createUsage();
  usage.getSupplier().add((ModelElement)supplier);
  usage.getClient().add((ModelElement)client);
  if (((ModelElement)supplier).getNamespace() != null) {
    usage.setNamespace(((ModelElement)supplier).getNamespace());
  }
 else   if (((ModelElement)client).getNamespace() != null) {
    usage.setNamespace(((ModelElement)client).getNamespace());
  }
  return usage;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildComment(Object,Object)
{
  if (model == null) {
    throw new IllegalArgumentException("A namespace must be supplied.");
  }
  ModelElement elementToAnnotate=(ModelElement)element;
  Comment comment=createComment();
  Namespace commentsModel=null;
  if (elementToAnnotate != null) {
    comment.getAnnotatedElement().add(elementToAnnotate);
    commentsModel=elementToAnnotate.getNamespace();
  }
 else {
    commentsModel=(Namespace)model;
  }
  comment.setNamespace(commentsModel);
  return comment;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint(Object)
{
  ModelElement constrainedElement=(ModelElement)constrElement;
  if (constrainedElement == null) {
    throw new IllegalArgumentException("the constrained element is " + "mandatory and may not be " + "null.");
  }
  Constraint con=createConstraint();
  con.getConstrainedElement().add(constrainedElement);
  con.setNamespace(constrainedElement.getNamespace());
  return con;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildConstraint(String,Object)
{
  if (bexpr == null || !(bexpr instanceof BooleanExpression)) {
    throw new IllegalArgumentException("invalid boolean expression.");
  }
  Constraint con=createConstraint();
  if (name != null) {
    con.setName(name);
  }
  con.setBody((BooleanExpression)bexpr);
  return con;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.buildBinding(Object,Object,List)
{
  Collection<Dependency> clientDeps=((ModelElement)client).getClientDependency();
  for (  Dependency dep : clientDeps) {
    if (dep instanceof Binding) {
      throw new IllegalArgumentException("client is already client of another Binding");
    }
  }
  if (arguments != null) {
    List<TemplateParameter> params=((ModelElement)supplier).getTemplateParameter();
    if (params.size() != arguments.size()) {
      throw new IllegalArgumentException("number of arguments doesn't match number of params");
    }
    Iterator<TemplateArgument> ita=arguments.iterator();
    for (    TemplateParameter param : params) {
      TemplateArgument ta=ita.next();
      if (ta == null || ta.getModelElement() == null) {
        continue;
      }
      if (!(param.getParameter().getClass().equals(ta.getModelElement().getClass()))) {
        throw new IllegalArgumentException("type of argument doesn't match type of parameter");
      }
    }
  }
  Binding binding=createBinding();
  binding.getClient().add((ModelElement)client);
  binding.getSupplier().add((ModelElement)supplier);
  if (arguments != null) {
    binding.getArgument().addAll(arguments);
  }
  return binding;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAbstraction(Object)
{
  if (!(elem instanceof Abstraction)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteArtifact(Object)
{
  if (!(elem instanceof Artifact)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociation(Object)
{
  if (!(elem instanceof UmlAssociation)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationClass(Object)
{
  if (!(elem instanceof AssociationClass)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAssociationEnd(Object)
{
  if (!(elem instanceof AssociationEnd)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  AssociationEnd ae=(AssociationEnd)elem;
  UmlAssociation assoc=ae.getAssociation();
  if (assoc != null && assoc.getConnection() != null && assoc.getConnection().size() == 2) {
    modelImpl.getUmlFactory().delete(assoc);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getAAssociationEndLinkEnd().getLinkEnd(ae));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteAttribute(Object)
{
  if (!(elem instanceof Attribute)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getAAttributeLinkAttribute().getAttributeLink((Attribute)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBehavioralFeature(Object)
{
  if (!(elem instanceof BehavioralFeature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteBinding(Object)
{
  if (!(elem instanceof Binding)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(corePackage.getABindingArgument().getArgument((Binding)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClass(Object)
{
  if (!(elem instanceof UmlClass)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteClassifier(Object)
{
  if (!(elem instanceof Classifier)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getFacade().getAssociationEnds(elem));
  Classifier cls=(Classifier)elem;
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getACreateActionInstantiation().getCreateAction(cls));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getActivityGraphs().getATypeClassifierInState().getClassifierInState(cls));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComment(Object)
{
  if (!(elem instanceof Comment)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteComponent(Object)
{
  if (!(elem instanceof Component)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteConstraint(Object)
{
  if (!(elem instanceof Constraint)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDataType(Object)
{
  if (!(elem instanceof DataType)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteDependency(Object)
{
  if (!(elem instanceof Dependency)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElement(Object)
{
  if (!(elem instanceof Element)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteElementResidence(Object)
{
  if (!(elem instanceof ElementResidence)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFeature(Object)
{
  if (!(elem instanceof Feature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteFlow(Object)
{
  if (!(elem instanceof Flow)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralizableElement(Object)
{
  if (!(elem instanceof GeneralizableElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  GeneralizableElement generalizableElement=(GeneralizableElement)elem;
  modelImpl.getUmlHelper().deleteCollection(generalizableElement.getGeneralization());
  modelImpl.getUmlHelper().deleteCollection(corePackage.getAParentSpecialization().getSpecialization(generalizableElement));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteGeneralization(Object)
{
  if (!(elem instanceof Generalization)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteInterface(Object)
{
  if (!(elem instanceof Interface)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteMethod(Object)
{
  if (!(elem instanceof Method)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteModelElement(Object)
{
  if (!(elem instanceof ModelElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  Collection<Dependency> deps=org.argouml.model.Model.getFacade().getClientDependencies(elem);
  for (  Dependency dep : deps) {
    if (dep.getClient().size() < 2 && dep.getClient().contains(elem)) {
      modelImpl.getUmlFactory().delete(dep);
    }
  }
  deps=org.argouml.model.Model.getFacade().getSupplierDependencies(elem);
  for (  Dependency dep : deps) {
    if (dep.getSupplier().size() < 2 && dep.getSupplier().contains(elem)) {
      modelImpl.getUmlFactory().delete(dep);
    }
  }
  modelImpl.getUmlHelper().deleteCollection(corePackage.getAModelElementTemplateArgument().getTemplateArgument((ModelElement)elem));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getModelManagement().getAImportedElementElementImport().getElementImport((ModelElement)elem));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNamespace(Object)
{
  LOG.debug("Deleting namespace " + elem);
  if (!(elem instanceof Namespace)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  List<ModelElement> ownedElements=new ArrayList<ModelElement>();
  ownedElements.addAll(((Namespace)elem).getOwnedElement());
  for (  ModelElement element : ownedElements) {
    LOG.debug("Deleting ownedElement " + element);
    modelImpl.getUmlFactory().delete(element);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteNode(Object)
{
  if (!(elem instanceof Node)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteOperation(Object)
{
  if (!(elem instanceof Operation)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
  Operation oper=(Operation)elem;
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getCommonBehavior().getACallActionOperation().getCallAction(oper));
  modelImpl.getUmlHelper().deleteCollection(modelImpl.getUmlPackage().getStateMachines().getAOccurrenceOperation().getOccurrence(oper));
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteParameter(Object)
{
  if (!(elem instanceof Parameter)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePermission(Object)
{
  if (!(elem instanceof Permission)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePresentationElement(Object)
{
  if (!(elem instanceof PresentationElement)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteRelationship(Object)
{
  if (!(elem instanceof Relationship)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteStructuralFeature(Object)
{
  if (!(elem instanceof StructuralFeature)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateArgument(Object)
{
  if (!(elem instanceof TemplateArgument)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteTemplateParameter(Object)
{
  if (!(elem instanceof TemplateParameter)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteUsage(Object)
{
  if (!(elem instanceof Usage)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumeration(Object)
{
  if (!(elem instanceof Enumeration)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteEnumerationLiteral(Object)
{
  if (!(elem instanceof EnumerationLiteral)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deletePrimitive(Object)
{
  if (!(elem instanceof Primitive)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.deleteProgrammingLanguageDataType(Object)
{
  if (!(elem instanceof ProgrammingLanguageDataType)) {
    throw new IllegalArgumentException("elem: " + elem);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyClass(Object,Object)
{
  if (!(source instanceof UmlClass && ns instanceof Namespace)) {
    throw new IllegalArgumentException("source: " + source + ",ns: "+ ns);
  }
  UmlClass c=createClass();
  ((Namespace)ns).getOwnedElement().add(c);
  doCopyClass(source,c);
  return c;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyFeature(Object,Object)
{
  if (!(source instanceof Feature && classifier instanceof Classifier)) {
    throw new IllegalArgumentException("source: " + source + ",classifier: "+ classifier);
  }
  Feature f=null;
  if (source instanceof Attribute) {
    Attribute attr=createAttribute();
    doCopyAttribute((Attribute)source,attr);
    f=attr;
  }
 else   if (source instanceof Operation) {
    Operation oper=createOperation();
    doCopyOperation((Operation)source,oper);
    f=oper;
  }
 else   if (source instanceof Method) {
    Method method=createMethod();
    doCopyMethod((Method)source,method);
    f=method;
  }
 else   if (source instanceof Reception) {
    Reception reception=(Reception)modelImpl.getCommonBehaviorFactory().createReception();
    doCopyReception((Reception)source,reception);
    f=reception;
  }
 else {
    throw new IllegalArgumentException("source: " + source);
  }
  f.setOwner((Classifier)classifier);
  ((Classifier)classifier).getFeature().add(f);
  return f;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyDataType(Object,Object)
{
  if (!(source instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  if (!(ns instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  DataType i=createDataType();
  ((Namespace)ns).getOwnedElement().add(i);
  doCopyDataType(source,i);
  return i;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyInterface(Object,Object)
{
  if (!(source instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  if (!(ns instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  Interface i=createInterface();
  ((Namespace)ns).getOwnedElement().add(i);
  doCopyInterface(source,i);
  return i;
}


org.argouml.model.mdr.CoreFactoryMDRImpl.copyEnumeration(Object,Object)
{
  doCopyModelElement(from,to);
  List listFrom=((Enumeration)from).getLiteral();
  List listTo=((Enumeration)to).getLiteral();
  Object literalFrom;
  Object literalTo;
  for (int i=0; i < listFrom.size(); i++) {
    literalFrom=listFrom.get(i);
    if (listTo.size() > i) {
      literalTo=listTo.get(i);
    }
 else {
      literalTo=createEnumerationLiteral();
      listTo.add(literalTo);
    }
    doCopyModelElement(literalFrom,literalTo);
    ((EnumerationLiteral)literalTo).setEnumeration((Enumeration)to);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyElement(Object,Object)
{
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClass(Object,Object)
{
  if (!(source instanceof UmlClass)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof UmlClass)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
  ((UmlClass)target).setActive(((UmlClass)source).isActive());
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyClassifier(Object,Object)
{
  if (!(source instanceof Classifier)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Classifier)) {
    throw new IllegalArgumentException();
  }
  doCopyNamespace(source,target);
  doCopyGeneralizableElement(source,target);
  for (  Feature f : ((Classifier)source).getFeature()) {
    copyFeature(f,target);
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyDataType(Object,Object)
{
  if (!(source instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof DataType)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyGeneralizableElement(Object,Object)
{
  if (!(source instanceof GeneralizableElement && target instanceof GeneralizableElement)) {
    throw new IllegalArgumentException("source: " + source + ",target: "+ target);
  }
  doCopyModelElement(source,target);
  GeneralizableElement targetGE=((GeneralizableElement)target);
  GeneralizableElement sourceGE=((GeneralizableElement)source);
  targetGE.setAbstract(sourceGE.isAbstract());
  targetGE.setLeaf(sourceGE.isLeaf());
  targetGE.setRoot(sourceGE.isRoot());
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyInterface(Object,Object)
{
  if (!(source instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Interface)) {
    throw new IllegalArgumentException();
  }
  doCopyClassifier(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyModelElement(Object,Object)
{
  if (!(source instanceof ModelElement)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof ModelElement)) {
    throw new IllegalArgumentException();
  }
  ModelElement targetME=((ModelElement)target);
  ModelElement sourceME=((ModelElement)source);
  targetME.setName(sourceME.getName());
  doCopyElement(source,target);
  targetME.setSpecification(sourceME.isSpecification());
  targetME.setVisibility(sourceME.getVisibility());
  modelImpl.getExtensionMechanismsFactory().copyTaggedValues(source,target);
  if (!sourceME.getStereotype().isEmpty()) {
    Model targetModel=(Model)org.argouml.model.Model.getFacade().getModel(targetME);
    for (    Stereotype s : sourceME.getStereotype()) {
      targetME.getStereotype().add(s);
    }
  }
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyNamespace(Object,Object)
{
  if (!(source instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  if (!(target instanceof Namespace)) {
    throw new IllegalArgumentException();
  }
  doCopyModelElement(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyAttribute(Attribute,Attribute)
{
  target.setMultiplicity(getMultiplicity11());
  target.setChangeability(source.getChangeability());
  target.setTargetScope(source.getTargetScope());
  target.setType(source.getType());
  doCopyFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyOperation(Operation,Operation)
{
  target.setAbstract(source.isAbstract());
  target.setLeaf(source.isLeaf());
  target.setRoot(source.isRoot());
  target.setConcurrency(source.getConcurrency());
  target.setSpecification(source.getSpecification());
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyMethod(Method,Method)
{
  ProcedureExpression pe=source.getBody();
  if (pe != null) {
    target.setBody((ProcedureExpression)modelImpl.getDataTypesFactory().createProcedureExpression(pe.getLanguage(),pe.getBody()));
  }
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyReception(Reception,Reception)
{
  target.setAbstract(source.isAbstract());
  target.setLeaf(source.isLeaf());
  target.setRoot(source.isRoot());
  target.setSpecification(source.getSpecification());
  target.setSignal(source.getSignal());
  doCopyBehavioralFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyBehavioralFeature(BehavioralFeature,BehavioralFeature)
{
  target.setQuery(source.isQuery());
  Collection<Signal> raisedSignals=modelImpl.getUmlPackage().getCommonBehavior().getAContextRaisedSignal().getRaisedSignal(source);
  for (  Signal signal : raisedSignals) {
    modelImpl.getUmlPackage().getCommonBehavior().getAContextRaisedSignal().add(target,signal);
  }
  doCopyFeature(source,target);
}


org.argouml.model.mdr.CoreFactoryMDRImpl.doCopyFeature(Feature,Feature)
{
  target.setVisibility(source.getVisibility());
  target.setOwnerScope(source.getOwnerScope());
  doCopyModelElement(source,target);
}


-------------------------------------
ListOfCorpusMethodsPreviousVersion size: 139
ListOfCorpusMethodsCurrentVersion size: 138
Gold set methods: 
org.argouml.model.mdr.CoreFactoryMDRImpl.buildAssociationClass(Object,Object)

##########################################################

